{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Compilers Principles, Techniques, & Tools (purple dragon book) second edition exercise answers \u7f16\u8bd1\u539f\u7406\uff08\u7d2b\u9f99\u4e66\uff09\u4e2d\u6587\u7b2c2\u7248\u4e60\u9898\u7b54\u6848 Something I hope you know before go into the answers First, please watch or star this repo, I'll be more happy if you follow me. Bug report, questions and discussion are welcome, you can post an issue or pull a request . All graphs are painted by yed , it is simple, cross-platform and free. There are some key-point.md file, key points and difficult points are summarized in them. As we know only teacher can buy the answer book, so I don't know the standard answer, but I tried my best to keep the correctness, if you found any bug, please tell me , thanks. License It is still under consideration. Anyone know which is suitable?","title":"Compilers Principles, Techniques, &amp; Tools (purple dragon book) second edition exercise answers"},{"location":"#compilers-principles-techniques-tools-purple-dragon-book-second-edition-exercise-answers","text":"","title":"Compilers Principles, Techniques, &amp; Tools (purple dragon book) second edition exercise answers"},{"location":"#2","text":"","title":"\u7f16\u8bd1\u539f\u7406\uff08\u7d2b\u9f99\u4e66\uff09\u4e2d\u6587\u7b2c2\u7248\u4e60\u9898\u7b54\u6848"},{"location":"#something-i-hope-you-know-before-go-into-the-answers","text":"First, please watch or star this repo, I'll be more happy if you follow me. Bug report, questions and discussion are welcome, you can post an issue or pull a request . All graphs are painted by yed , it is simple, cross-platform and free. There are some key-point.md file, key points and difficult points are summarized in them. As we know only teacher can buy the answer book, so I don't know the standard answer, but I tried my best to keep the correctness, if you found any bug, please tell me , thanks.","title":"Something I hope you know before go into the answers"},{"location":"#license","text":"It is still under consideration. Anyone know which is suitable?","title":"License"},{"location":"ch01/1.1/1.1/","text":"Exercises for Section 1.1 1.1.1 What is the difference between a compiler and an interpreter? Answer A compiler is a program that can read a program in one language - the source language - and translate it into an equivalent program in another language \u2013 the target language and report any errors in the source program that it detects during the translation process. Interpreter directly executes the operations specified in the source program on inputs supplied by the user. 1.1.2 What are the advantages of: (a) a compiler over an interpreter (b) an interpreter over a compiler? Answer a. The machine-language target program produced by a compiler is usually much faster than an interpreter at mapping inputs to outputs. b. An interpreter can usually give better error diagnostics than a compiler, because it executes the source program statement by statement. 1.1.3 What advantages are there to a language-processing system in which the compiler produces assembly language rather than machine language? Answer The compiler may produce an assembly-language program as its output, because assembly language is easier to produce as output and is easier to debug. 1.1.4 A compiler that translates a high-level language into another high-level language is called a source-to-source translator. What advantages are there to using C as a target language for a compiler? Answer For the C language there are many compilers available that compile to almost every hardware. 1.1.5 Describe some of the tasks that an assembler needs to perform. Answer It translates from the assembly language to machine code. This machine code is relocatable.","title":"Exercises for Section 1.1"},{"location":"ch01/1.1/1.1/#exercises-for-section-11","text":"","title":"Exercises for Section 1.1"},{"location":"ch01/1.1/1.1/#111","text":"What is the difference between a compiler and an interpreter?","title":"1.1.1"},{"location":"ch01/1.1/1.1/#answer","text":"A compiler is a program that can read a program in one language - the source language - and translate it into an equivalent program in another language \u2013 the target language and report any errors in the source program that it detects during the translation process. Interpreter directly executes the operations specified in the source program on inputs supplied by the user.","title":"Answer"},{"location":"ch01/1.1/1.1/#112","text":"What are the advantages of: (a) a compiler over an interpreter (b) an interpreter over a compiler?","title":"1.1.2"},{"location":"ch01/1.1/1.1/#answer_1","text":"a. The machine-language target program produced by a compiler is usually much faster than an interpreter at mapping inputs to outputs. b. An interpreter can usually give better error diagnostics than a compiler, because it executes the source program statement by statement.","title":"Answer"},{"location":"ch01/1.1/1.1/#113","text":"What advantages are there to a language-processing system in which the compiler produces assembly language rather than machine language?","title":"1.1.3"},{"location":"ch01/1.1/1.1/#answer_2","text":"The compiler may produce an assembly-language program as its output, because assembly language is easier to produce as output and is easier to debug.","title":"Answer"},{"location":"ch01/1.1/1.1/#114","text":"A compiler that translates a high-level language into another high-level language is called a source-to-source translator. What advantages are there to using C as a target language for a compiler?","title":"1.1.4"},{"location":"ch01/1.1/1.1/#answer_3","text":"For the C language there are many compilers available that compile to almost every hardware.","title":"Answer"},{"location":"ch01/1.1/1.1/#115","text":"Describe some of the tasks that an assembler needs to perform.","title":"1.1.5"},{"location":"ch01/1.1/1.1/#answer_4","text":"It translates from the assembly language to machine code. This machine code is relocatable.","title":"Answer"},{"location":"ch01/1.3/1.3/","text":"Exercises for Section 1.3 1.3.1 Indicate which of the following terms: a. imperative b. declarative c. von Neumann d. object-oriented e. functional f. third-generation g. fourth-generation h. scripting apply to which of the following languages: C C++ Cobol Fortran Java Lisp ML Perl Python VB. Answer imperative: C, C++ object-oriented: C++, Java functional: ML scripting: Perl, Python","title":"Exercises for Section 1.3"},{"location":"ch01/1.3/1.3/#exercises-for-section-13","text":"","title":"Exercises for Section 1.3"},{"location":"ch01/1.3/1.3/#131","text":"Indicate which of the following terms: a. imperative b. declarative c. von Neumann d. object-oriented e. functional f. third-generation g. fourth-generation h. scripting apply to which of the following languages: C C++ Cobol Fortran Java Lisp ML Perl Python VB.","title":"1.3.1"},{"location":"ch01/1.3/1.3/#answer","text":"imperative: C, C++ object-oriented: C++, Java functional: ML scripting: Perl, Python","title":"Answer"},{"location":"ch01/1.6/1.6/","text":"Exercises for Section 1.6 1.6.1 For the block-structured C code below, indicate the values assigned to w, x, y, and z. int w, x, y, z; int i = 4; int j = 5; { int j = 7; i = 6; w = i + j; } x = i + j; { int i = 8; y = i + j; } z = i + j; Answer w = 13, x = 11, y = 13, z = 11. 1.6.2 Repeat Exercise 1.6.1 for the code below. int w, x, y, z; int i = 3; int j = 4; { int i = 5; w = i + j; } x = i + j; { int j = 6; i = 7; y = i + j; } z = i + j; Answer w = 9, x = 7, y = 13, z = 11. 1.6.3 For the block-structured code of Fig. 1.14, assuming the usual static scoping of declarations, give the scope for each of the twelve declarations. Answer Block B1: declarations: -> scope w B1-B3-B4 x B1-B2-B4 y B1-B5 z B1-B2-B5 Block B2: declarations: -> scope x B2-B3 z B2 Block B3: declarations: -> scope w B3 x B3 Block B4: declarations: -> scope w B4 x B4 Block B5: declarations: -> scope y B5 z B5 1.6.4 What is printed by the following C code? #define a (x + 1) int x = 2; void b() { x = a; printf(\"%d\\n\", x); } void c() { int x = 1; printf(\"%d\\n\", a); } void main () { b(); c(); } Answer 3 2","title":"Exercises for Section 1.6"},{"location":"ch01/1.6/1.6/#exercises-for-section-16","text":"","title":"Exercises for Section 1.6"},{"location":"ch01/1.6/1.6/#161","text":"For the block-structured C code below, indicate the values assigned to w, x, y, and z. int w, x, y, z; int i = 4; int j = 5; { int j = 7; i = 6; w = i + j; } x = i + j; { int i = 8; y = i + j; } z = i + j;","title":"1.6.1"},{"location":"ch01/1.6/1.6/#answer","text":"w = 13, x = 11, y = 13, z = 11.","title":"Answer"},{"location":"ch01/1.6/1.6/#162","text":"Repeat Exercise 1.6.1 for the code below. int w, x, y, z; int i = 3; int j = 4; { int i = 5; w = i + j; } x = i + j; { int j = 6; i = 7; y = i + j; } z = i + j;","title":"1.6.2"},{"location":"ch01/1.6/1.6/#answer_1","text":"w = 9, x = 7, y = 13, z = 11.","title":"Answer"},{"location":"ch01/1.6/1.6/#163","text":"For the block-structured code of Fig. 1.14, assuming the usual static scoping of declarations, give the scope for each of the twelve declarations.","title":"1.6.3"},{"location":"ch01/1.6/1.6/#answer_2","text":"Block B1: declarations: -> scope w B1-B3-B4 x B1-B2-B4 y B1-B5 z B1-B2-B5 Block B2: declarations: -> scope x B2-B3 z B2 Block B3: declarations: -> scope w B3 x B3 Block B4: declarations: -> scope w B4 x B4 Block B5: declarations: -> scope y B5 z B5","title":"Answer"},{"location":"ch01/1.6/1.6/#164","text":"What is printed by the following C code? #define a (x + 1) int x = 2; void b() { x = a; printf(\"%d\\n\", x); } void c() { int x = 1; printf(\"%d\\n\", a); } void main () { b(); c(); }","title":"1.6.4"},{"location":"ch01/1.6/1.6/#answer_3","text":"3 2","title":"Answer"},{"location":"ch02/2.2/2.2/","text":"Exercises for Section 2.2 2.2.1 Consider the context-free grammar: S -> S S + | S S * | a Show how the string aa+a* can be generated by this grammar. Construct a parse tree for this string. What language does this grammar generate? Justify your answer. Answer S -> S S * -> S S + S * -> a S + S * -> a a + S * -> a a + a * L = {Postfix expression consisting of digits, plus and multiple signs} 2.2.2 What language is generated by the following grammars? In each case justify your answer. S -> 0 S 1 | 0 1 S -> + S S | - S S | a S -> S ( S ) S | \u03b5 S -> a S b S | b S a S | \u03b5 S -> a | S + S | S S | S * | ( S ) Answer L = {0 n 1 n | n>=1} L = {Prefix expression consisting of plus and minus signs} L = {Matched brackets of arbitrary arrangement and nesting, includes \u03b5} L = {String has the same amount of a and b, includes \u03b5} L = {Regular expressions used to describe regular languages} refer to wiki 2.2.3 Which of the grammars in Exercise 2.2.2 are ambiguous? Answer No No Yes Yes Yes 2.2.4 Construct unambiguous context-free grammars for each of the following languages. In each case show that your grammar is correct. Arithmetic expressions in postfix notation. Left-associative lists of identifiers separated by commas. Right-associative lists of identifiers separated by commas. Arithmetic expressions of integers and identifiers with the four binary operators +, -, *, /. Add unary plus and minus to the arithmetic operators of 4. Answer 1. E -> E E op | num 2. list -> list , id | id 3. list -> id , list | id 4. expr -> expr + term | expr - term | term term -> term * factor | term / factor | factor factor -> id | num | (expr) 5. expr -> expr + term | expr - term | term term -> term * unary | term / unary | unary unary -> + factor | - factor | factor factor - > id | num | (expr) 2.2.5 Show that all binary strings generated by the following grammar have values divisible by 3. Hint. Use induction on the number of nodes in a parse tree. num -> 11 | 1001 | num 0 | num num Does the grammar generate all binary strings with values divisible by 3? Answer Proof Any string derived from the grammar can be considered to be a sequence consisting of 11 and 1001, where each sequence element is possibly suffixed with a 0. Let n be the set of positions where 11 is placed. 11 is said to be at position i if the first 1 in 11 is at position i , where i starts at 0 and grows from least significant to most significant bit. Let m be the equivalent set for 1001 . The sum of any string produced by the grammar is: sum = \u03a3 n (2 1 + 2 0 ) * 2 n + \u03a3 m (2 3 + 2 0 ) * 2 m = \u03a3 n 3 * 2 n + \u03a3 m 9 * 2 m This is clearly divisible by 3. No. Consider the string \"10101\", which is divisible by 3, but cannot be derived from the grammar. Readers seeking a more formal proof can read about it below: Proof : Every number divisible by 3 can be written in the form 3k . We will consider k > 0 (though it would be valid to consider k to be an arbitrary integer). Note that every part of num(11, 1001 and 0) is divisible by 3, if the grammar could generate all the numbers divisible by 3, we can get a production for binary k from num's production: 3k = num -> 11 | 1001 | num 0 | num num k = num/3 -> 01 | 0011 | k 0 | k k k -> 01 | 0011 | k 0 | k k It is obvious that any value of k that has more than 2 consecutive bits set to 1 can never be produced. This can be confirmed by the example given in the beginning: 10101 is 3*7, hence, k = 7 = 111 in binary. Because 111 has more than 2 consecutive 1's in binary, the grammar will never produce 21. 2.2.6 Construct a context-free grammar for roman numerals. Note: we just consider a subset of roman numerals which is less than 4k. Answer wikipedia: Roman_numerals via wikipedia, we can categorize the single roman numerals into 4 groups: I, II, III | I V | V, V I, V II, V III | I X then get the production: digit -> smallDigit | I V | V smallDigit | I X smallDigit -> I | II | III | \u03b5 and we can find a simple way to map roman to arabic numerals. For example: XII => X, II => 10 + 2 => 12 CXCIX => C, XC, IX => 100 + 90 + 9 => 199 MDCCCLXXX => M, DCCC, LXXX => 1000 + 800 + 80 => 1880 via the upper two rules, we can derive the production: romanNum -> thousand hundred ten digit thousand -> M | MM | MMM | \u03b5 hundred -> smallHundred | C D | D smallHundred | C M smallHundred -> C | CC | CCC | \u03b5 ten -> smallTen | X L | L smallTen | X C smallTen -> X | XX | XXX | \u03b5 digit -> smallDigit | I V | V smallDigit | I X smallDigit -> I | II | III | \u03b5","title":"Exercises for Section 2.2"},{"location":"ch02/2.2/2.2/#exercises-for-section-22","text":"","title":"Exercises for Section 2.2"},{"location":"ch02/2.2/2.2/#221","text":"Consider the context-free grammar: S -> S S + | S S * | a Show how the string aa+a* can be generated by this grammar. Construct a parse tree for this string. What language does this grammar generate? Justify your answer.","title":"2.2.1"},{"location":"ch02/2.2/2.2/#answer","text":"S -> S S * -> S S + S * -> a S + S * -> a a + S * -> a a + a * L = {Postfix expression consisting of digits, plus and multiple signs}","title":"Answer"},{"location":"ch02/2.2/2.2/#222","text":"What language is generated by the following grammars? In each case justify your answer. S -> 0 S 1 | 0 1 S -> + S S | - S S | a S -> S ( S ) S | \u03b5 S -> a S b S | b S a S | \u03b5 S -> a | S + S | S S | S * | ( S )","title":"2.2.2"},{"location":"ch02/2.2/2.2/#answer_1","text":"L = {0 n 1 n | n>=1} L = {Prefix expression consisting of plus and minus signs} L = {Matched brackets of arbitrary arrangement and nesting, includes \u03b5} L = {String has the same amount of a and b, includes \u03b5} L = {Regular expressions used to describe regular languages} refer to wiki","title":"Answer"},{"location":"ch02/2.2/2.2/#223","text":"Which of the grammars in Exercise 2.2.2 are ambiguous?","title":"2.2.3"},{"location":"ch02/2.2/2.2/#answer_2","text":"No No Yes Yes Yes","title":"Answer"},{"location":"ch02/2.2/2.2/#224","text":"Construct unambiguous context-free grammars for each of the following languages. In each case show that your grammar is correct. Arithmetic expressions in postfix notation. Left-associative lists of identifiers separated by commas. Right-associative lists of identifiers separated by commas. Arithmetic expressions of integers and identifiers with the four binary operators +, -, *, /. Add unary plus and minus to the arithmetic operators of 4.","title":"2.2.4"},{"location":"ch02/2.2/2.2/#answer_3","text":"1. E -> E E op | num 2. list -> list , id | id 3. list -> id , list | id 4. expr -> expr + term | expr - term | term term -> term * factor | term / factor | factor factor -> id | num | (expr) 5. expr -> expr + term | expr - term | term term -> term * unary | term / unary | unary unary -> + factor | - factor | factor factor - > id | num | (expr)","title":"Answer"},{"location":"ch02/2.2/2.2/#225","text":"Show that all binary strings generated by the following grammar have values divisible by 3. Hint. Use induction on the number of nodes in a parse tree. num -> 11 | 1001 | num 0 | num num Does the grammar generate all binary strings with values divisible by 3?","title":"2.2.5"},{"location":"ch02/2.2/2.2/#answer_4","text":"Proof Any string derived from the grammar can be considered to be a sequence consisting of 11 and 1001, where each sequence element is possibly suffixed with a 0. Let n be the set of positions where 11 is placed. 11 is said to be at position i if the first 1 in 11 is at position i , where i starts at 0 and grows from least significant to most significant bit. Let m be the equivalent set for 1001 . The sum of any string produced by the grammar is: sum = \u03a3 n (2 1 + 2 0 ) * 2 n + \u03a3 m (2 3 + 2 0 ) * 2 m = \u03a3 n 3 * 2 n + \u03a3 m 9 * 2 m This is clearly divisible by 3. No. Consider the string \"10101\", which is divisible by 3, but cannot be derived from the grammar. Readers seeking a more formal proof can read about it below: Proof : Every number divisible by 3 can be written in the form 3k . We will consider k > 0 (though it would be valid to consider k to be an arbitrary integer). Note that every part of num(11, 1001 and 0) is divisible by 3, if the grammar could generate all the numbers divisible by 3, we can get a production for binary k from num's production: 3k = num -> 11 | 1001 | num 0 | num num k = num/3 -> 01 | 0011 | k 0 | k k k -> 01 | 0011 | k 0 | k k It is obvious that any value of k that has more than 2 consecutive bits set to 1 can never be produced. This can be confirmed by the example given in the beginning: 10101 is 3*7, hence, k = 7 = 111 in binary. Because 111 has more than 2 consecutive 1's in binary, the grammar will never produce 21.","title":"Answer"},{"location":"ch02/2.2/2.2/#226","text":"Construct a context-free grammar for roman numerals. Note: we just consider a subset of roman numerals which is less than 4k.","title":"2.2.6"},{"location":"ch02/2.2/2.2/#answer_5","text":"wikipedia: Roman_numerals via wikipedia, we can categorize the single roman numerals into 4 groups: I, II, III | I V | V, V I, V II, V III | I X then get the production: digit -> smallDigit | I V | V smallDigit | I X smallDigit -> I | II | III | \u03b5 and we can find a simple way to map roman to arabic numerals. For example: XII => X, II => 10 + 2 => 12 CXCIX => C, XC, IX => 100 + 90 + 9 => 199 MDCCCLXXX => M, DCCC, LXXX => 1000 + 800 + 80 => 1880 via the upper two rules, we can derive the production: romanNum -> thousand hundred ten digit thousand -> M | MM | MMM | \u03b5 hundred -> smallHundred | C D | D smallHundred | C M smallHundred -> C | CC | CCC | \u03b5 ten -> smallTen | X L | L smallTen | X C smallTen -> X | XX | XXX | \u03b5 digit -> smallDigit | I V | V smallDigit | I X smallDigit -> I | II | III | \u03b5","title":"Answer"},{"location":"ch02/2.3/2.3/","text":"2.3 Exercises for Section 2.3 2.3.1 Construct a syntax-directed translation scheme that translates arithmetic expressions from infix notation into prefix notation in which an operator appears before its operands; e.g. , -xy is the prefix notation for x - y. Give annotated parse trees for the inputs 9-5+2 and 9-5*2. Answer productions: expr -> expr + term | expr - term | term term -> term * factor | term / factor | factor factor -> digit | (expr) translation schemes: expr -> {print(\"+\")} expr + term | {print(\"-\")} expr - term | term term -> {print(\"*\")} term * factor | {print(\"/\")} term / factor | factor factor -> digit {print(digit)} | (expr) 2.3.2 Construct a syntax-directed translation scheme that translates arithmetic expressions from postfix notation into infix notation. Give annotated parse trees for the inputs 95-2 and 952 -. Answer productions: expr -> expr expr + | expr expr - | expr expr * | expr expr / | digit translation schemes: expr -> expr {print(\"+\")} expr + | expr {print(\"-\")} expr - | {print(\"(\")} expr {print(\")*(\")} expr {print(\")\")} * | {print(\"(\")} expr {print(\")/(\")} expr {print(\")\")} / | digit {print(digit)} Another reference answer E -> {print(\"(\")} E {print(op)} E {print(\")\"}} op | digit {print(digit)} 2.3.3 Construct a syntax-directed translation scheme that translates integers into roman numerals. Answer assistant function: repeat(sign, times) // repeat('a',2) = 'aa' translation schemes: num -> thousand hundred ten digit { num.roman = thousand.roman || hundred.roman || ten.roman || digit.roman; print(num.roman)} thousand -> low {thousand.roman = repeat('M', low.v)} hundred -> low {hundred.roman = repeat('C', low.v)} | 4 {hundred.roman = 'CD'} | high {hundred.roman = 'D' || repeat('X', high.v - 5)} | 9 {hundred.roman = 'CM'} ten -> low {ten.roman = repeat('X', low.v)} | 4 {ten.roman = 'XL'} | high {ten.roman = 'L' || repeat('X', high.v - 5)} | 9 {ten.roman = 'XC'} digit -> low {digit.roman = repeat('I', low.v)} | 4 {digit.roman = 'IV'} | high {digit.roman = 'V' || repeat('I', high.v - 5)} | 9 {digit.roman = 'IX'} low -> 0 {low.v = 0} | 1 {low.v = 1} | 2 {low.v = 2} | 3 {low.v = 3} high -> 5 {high.v = 5} | 6 {high.v = 6} | 7 {high.v = 7} | 8 {high.v = 8} 2.3.4 Construct a syntax-directed translation scheme that trans\u00ad lates roman numerals into integers. Answer productions: romanNum -> thousand hundred ten digit thousand -> M | MM | MMM | \u03b5 hundred -> smallHundred | C D | D smallHundred | C M smallHundred -> C | CC | CCC | \u03b5 ten -> smallTen | X L | L smallTen | X C smallTen -> X | XX | XXX | \u03b5 digit -> smallDigit | I V | V smallDigit | I X smallDigit -> I | II | III | \u03b5 translation schemes: romanNum -> thousand hundred ten digit {romanNum.v = thousand.v || hundred.v || ten.v || digit.v; print(romanNun.v)} thousand -> M {thousand.v = 1} | MM {thousand.v = 2} | MMM {thousand.v = 3} | \u03b5 {thousand.v = 0} hundred -> smallHundred {hundred.v = smallHundred.v} | C D {hundred.v = smallHundred.v} | D smallHundred {hundred.v = 5 + smallHundred.v} | C M {hundred.v = 9} smallHundred -> C {smallHundred.v = 1} | CC {smallHundred.v = 2} | CCC {smallHundred.v = 3} | \u03b5 {hundred.v = 0} ten -> smallTen {ten.v = smallTen.v} | X L {ten.v = 4} | L smallTen {ten.v = 5 + smallTen.v} | X C {ten.v = 9} smallTen -> X {smallTen.v = 1} | XX {smallTen.v = 2} | XXX {smallTen.v = 3} | \u03b5 {smallTen.v = 0} digit -> smallDigit {digit.v = smallDigit.v} | I V {digit.v = 4} | V smallDigit {digit.v = 5 + smallDigit.v} | I X {digit.v = 9} smallDigit -> I {smallDigit.v = 1} | II {smallDigit.v = 2} | III {smallDigit.v = 3} | \u03b5 {smallDigit.v = 0} 2.3.5 Construct a syntax-directed translation scheme that translates postfix arithmetic expressions into equivalent prefix arithmetic expressions. Answer production: expr -> expr expr op | digit translation scheme: expr -> {print(op)} expr expr op | digit {print(digit)}","title":"2.3 Exercises for Section 2.3"},{"location":"ch02/2.3/2.3/#23-exercises-for-section-23","text":"","title":"2.3 Exercises for Section 2.3"},{"location":"ch02/2.3/2.3/#231","text":"Construct a syntax-directed translation scheme that translates arithmetic expressions from infix notation into prefix notation in which an operator appears before its operands; e.g. , -xy is the prefix notation for x - y. Give annotated parse trees for the inputs 9-5+2 and 9-5*2.","title":"2.3.1"},{"location":"ch02/2.3/2.3/#answer","text":"productions: expr -> expr + term | expr - term | term term -> term * factor | term / factor | factor factor -> digit | (expr) translation schemes: expr -> {print(\"+\")} expr + term | {print(\"-\")} expr - term | term term -> {print(\"*\")} term * factor | {print(\"/\")} term / factor | factor factor -> digit {print(digit)} | (expr)","title":"Answer"},{"location":"ch02/2.3/2.3/#232","text":"Construct a syntax-directed translation scheme that translates arithmetic expressions from postfix notation into infix notation. Give annotated parse trees for the inputs 95-2 and 952 -.","title":"2.3.2"},{"location":"ch02/2.3/2.3/#answer_1","text":"productions: expr -> expr expr + | expr expr - | expr expr * | expr expr / | digit translation schemes: expr -> expr {print(\"+\")} expr + | expr {print(\"-\")} expr - | {print(\"(\")} expr {print(\")*(\")} expr {print(\")\")} * | {print(\"(\")} expr {print(\")/(\")} expr {print(\")\")} / | digit {print(digit)}","title":"Answer"},{"location":"ch02/2.3/2.3/#another-reference-answer","text":"E -> {print(\"(\")} E {print(op)} E {print(\")\"}} op | digit {print(digit)}","title":"Another reference answer"},{"location":"ch02/2.3/2.3/#233","text":"Construct a syntax-directed translation scheme that translates integers into roman numerals.","title":"2.3.3"},{"location":"ch02/2.3/2.3/#answer_2","text":"assistant function: repeat(sign, times) // repeat('a',2) = 'aa' translation schemes: num -> thousand hundred ten digit { num.roman = thousand.roman || hundred.roman || ten.roman || digit.roman; print(num.roman)} thousand -> low {thousand.roman = repeat('M', low.v)} hundred -> low {hundred.roman = repeat('C', low.v)} | 4 {hundred.roman = 'CD'} | high {hundred.roman = 'D' || repeat('X', high.v - 5)} | 9 {hundred.roman = 'CM'} ten -> low {ten.roman = repeat('X', low.v)} | 4 {ten.roman = 'XL'} | high {ten.roman = 'L' || repeat('X', high.v - 5)} | 9 {ten.roman = 'XC'} digit -> low {digit.roman = repeat('I', low.v)} | 4 {digit.roman = 'IV'} | high {digit.roman = 'V' || repeat('I', high.v - 5)} | 9 {digit.roman = 'IX'} low -> 0 {low.v = 0} | 1 {low.v = 1} | 2 {low.v = 2} | 3 {low.v = 3} high -> 5 {high.v = 5} | 6 {high.v = 6} | 7 {high.v = 7} | 8 {high.v = 8}","title":"Answer"},{"location":"ch02/2.3/2.3/#234","text":"Construct a syntax-directed translation scheme that trans\u00ad lates roman numerals into integers.","title":"2.3.4"},{"location":"ch02/2.3/2.3/#answer_3","text":"productions: romanNum -> thousand hundred ten digit thousand -> M | MM | MMM | \u03b5 hundred -> smallHundred | C D | D smallHundred | C M smallHundred -> C | CC | CCC | \u03b5 ten -> smallTen | X L | L smallTen | X C smallTen -> X | XX | XXX | \u03b5 digit -> smallDigit | I V | V smallDigit | I X smallDigit -> I | II | III | \u03b5 translation schemes: romanNum -> thousand hundred ten digit {romanNum.v = thousand.v || hundred.v || ten.v || digit.v; print(romanNun.v)} thousand -> M {thousand.v = 1} | MM {thousand.v = 2} | MMM {thousand.v = 3} | \u03b5 {thousand.v = 0} hundred -> smallHundred {hundred.v = smallHundred.v} | C D {hundred.v = smallHundred.v} | D smallHundred {hundred.v = 5 + smallHundred.v} | C M {hundred.v = 9} smallHundred -> C {smallHundred.v = 1} | CC {smallHundred.v = 2} | CCC {smallHundred.v = 3} | \u03b5 {hundred.v = 0} ten -> smallTen {ten.v = smallTen.v} | X L {ten.v = 4} | L smallTen {ten.v = 5 + smallTen.v} | X C {ten.v = 9} smallTen -> X {smallTen.v = 1} | XX {smallTen.v = 2} | XXX {smallTen.v = 3} | \u03b5 {smallTen.v = 0} digit -> smallDigit {digit.v = smallDigit.v} | I V {digit.v = 4} | V smallDigit {digit.v = 5 + smallDigit.v} | I X {digit.v = 9} smallDigit -> I {smallDigit.v = 1} | II {smallDigit.v = 2} | III {smallDigit.v = 3} | \u03b5 {smallDigit.v = 0}","title":"Answer"},{"location":"ch02/2.3/2.3/#235","text":"Construct a syntax-directed translation scheme that translates postfix arithmetic expressions into equivalent prefix arithmetic expressions.","title":"2.3.5"},{"location":"ch02/2.3/2.3/#answer_4","text":"production: expr -> expr expr op | digit translation scheme: expr -> {print(op)} expr expr op | digit {print(digit)}","title":"Answer"},{"location":"ch02/2.4/2.4/","text":"Exercises for Section 2.4 2.4.1 Construct recursive-descent parsers, starting with the following grammars: S -> + S S | - S S | a S -> S ( S ) S | \u03b5 S -> 0 S 1 | 0 1 Answer See 2.4.1.1.c , 2.4.1.2.c , and 2.4.1.3.c for real implementations in C. 1\uff09 S -> + S S | - S S | a void S(){ switch(lookahead){ case \"+\": match(\"+\"); S(); S(); break; case \"-\": match(\"-\"); S(); S(); break; case \"a\": match(\"a\"); break; default: throw new SyntaxException(); } } void match(Terminal t){ if(lookahead = t){ lookahead = nextTerminal(); }else{ throw new SyntaxException() } } 2\uff09 S -> S ( S ) S | \u03b5 void S(){ if(lookahead == \"(\"){ match(\"(\"); S(); match(\")\"); S(); } } 3\uff09 S -> 0 S 1 | 0 1 void S(){ switch(lookahead){ case \"0\": match(\"0\"); S(); match(\"1\"); break; case \"1\": // match(epsilon); break; default: throw new SyntaxException(); } }","title":"2.4"},{"location":"ch02/2.4/2.4/#exercises-for-section-24","text":"","title":"Exercises for Section 2.4"},{"location":"ch02/2.4/2.4/#241","text":"Construct recursive-descent parsers, starting with the following grammars: S -> + S S | - S S | a S -> S ( S ) S | \u03b5 S -> 0 S 1 | 0 1","title":"2.4.1"},{"location":"ch02/2.4/2.4/#answer","text":"See 2.4.1.1.c , 2.4.1.2.c , and 2.4.1.3.c for real implementations in C. 1\uff09 S -> + S S | - S S | a void S(){ switch(lookahead){ case \"+\": match(\"+\"); S(); S(); break; case \"-\": match(\"-\"); S(); S(); break; case \"a\": match(\"a\"); break; default: throw new SyntaxException(); } } void match(Terminal t){ if(lookahead = t){ lookahead = nextTerminal(); }else{ throw new SyntaxException() } } 2\uff09 S -> S ( S ) S | \u03b5 void S(){ if(lookahead == \"(\"){ match(\"(\"); S(); match(\")\"); S(); } } 3\uff09 S -> 0 S 1 | 0 1 void S(){ switch(lookahead){ case \"0\": match(\"0\"); S(); match(\"1\"); break; case \"1\": // match(epsilon); break; default: throw new SyntaxException(); } }","title":"Answer"},{"location":"ch02/2.6/2.6/","text":"Exercises for Section 2.6 2.6.1 Extend the lexical analyzer in Section 2.6.5 to remove comments, defined as follows: A comment begins with // and includes all characters until the end of that line. A comment begins with / and includes all characters through the next occurrence of the character sequence /. 2.6.2 Extend the lexical analyzer in Section 2.6.5 to recognize the relational operators <, <=, ==, ! =, >=, >. 2.6.3 Extend the lexical analyzer in Section 2.6.5 to recognize floating point numbers such as 2., 3.14, and . 5. Answer Source code: commit 8dd1a9a Code snippet(src/lexer/Lexer.java)\uff1a public Token scan() throws IOException, SyntaxException{ for(;;peek = (char)stream.read()){ if(peek == ' ' || peek == '\\t'){ continue; }else if(peek == '\\n'){ line = line + 1; }else{ break; } } // handle comment if(peek == '/'){ peek = (char) stream.read(); if(peek == '/'){ // single line comment for(;;peek = (char)stream.read()){ if(peek == '\\n'){ break; } } }else if(peek == '*'){ // block comment char prevPeek = ' '; for(;;prevPeek = peek, peek = (char)stream.read()){ if(prevPeek == '*' && peek == '/'){ break; } } }else{ throw new SyntaxException(); } } // handle relation sign if(\"<=!>\".indexOf(peek) > -1){ StringBuffer b = new StringBuffer(); b.append(peek); peek = (char)stream.read(); if(peek == '='){ b.append(peek); } return new Rel(b.toString()); } // handle number, no type sensitive if(Character.isDigit(peek) || peek == '.'){ Boolean isDotExist = false; StringBuffer b = new StringBuffer(); do{ if(peek == '.'){ isDotExist = true; } b.append(peek); peek = (char)stream.read(); }while(isDotExist == true ? Character.isDigit(peek) : Character.isDigit(peek) || peek == '.'); return new Num(new Float(b.toString())); } // handle word if(Character.isLetter(peek)){ StringBuffer b = new StringBuffer(); do{ b.append(peek); peek = (char)stream.read(); }while(Character.isLetterOrDigit(peek)); String s = b.toString(); Word w = words.get(s); if(w == null){ w = new Word(Tag.ID, s); words.put(s, w); } return w; } Token t = new Token(peek); peek = ' '; return t; }","title":"Exercises for Section 2.6"},{"location":"ch02/2.6/2.6/#exercises-for-section-26","text":"","title":"Exercises for Section 2.6"},{"location":"ch02/2.6/2.6/#261","text":"Extend the lexical analyzer in Section 2.6.5 to remove comments, defined as follows: A comment begins with // and includes all characters until the end of that line. A comment begins with / and includes all characters through the next occurrence of the character sequence /.","title":"2.6.1"},{"location":"ch02/2.6/2.6/#262","text":"Extend the lexical analyzer in Section 2.6.5 to recognize the relational operators <, <=, ==, ! =, >=, >.","title":"2.6.2"},{"location":"ch02/2.6/2.6/#263","text":"Extend the lexical analyzer in Section 2.6.5 to recognize floating point numbers such as 2., 3.14, and . 5.","title":"2.6.3"},{"location":"ch02/2.6/2.6/#answer","text":"Source code: commit 8dd1a9a Code snippet(src/lexer/Lexer.java)\uff1a public Token scan() throws IOException, SyntaxException{ for(;;peek = (char)stream.read()){ if(peek == ' ' || peek == '\\t'){ continue; }else if(peek == '\\n'){ line = line + 1; }else{ break; } } // handle comment if(peek == '/'){ peek = (char) stream.read(); if(peek == '/'){ // single line comment for(;;peek = (char)stream.read()){ if(peek == '\\n'){ break; } } }else if(peek == '*'){ // block comment char prevPeek = ' '; for(;;prevPeek = peek, peek = (char)stream.read()){ if(prevPeek == '*' && peek == '/'){ break; } } }else{ throw new SyntaxException(); } } // handle relation sign if(\"<=!>\".indexOf(peek) > -1){ StringBuffer b = new StringBuffer(); b.append(peek); peek = (char)stream.read(); if(peek == '='){ b.append(peek); } return new Rel(b.toString()); } // handle number, no type sensitive if(Character.isDigit(peek) || peek == '.'){ Boolean isDotExist = false; StringBuffer b = new StringBuffer(); do{ if(peek == '.'){ isDotExist = true; } b.append(peek); peek = (char)stream.read(); }while(isDotExist == true ? Character.isDigit(peek) : Character.isDigit(peek) || peek == '.'); return new Num(new Float(b.toString())); } // handle word if(Character.isLetter(peek)){ StringBuffer b = new StringBuffer(); do{ b.append(peek); peek = (char)stream.read(); }while(Character.isLetterOrDigit(peek)); String s = b.toString(); Word w = words.get(s); if(w == null){ w = new Word(Tag.ID, s); words.put(s, w); } return w; } Token t = new Token(peek); peek = ' '; return t; }","title":"Answer"},{"location":"ch02/2.8/2.8/","text":"Exercises for Section 2.8 2.8.1 For-statements in C and Java have the form: for ( exprl ; expr2 ; expr3 ) stmt The first expression is executed before the loop; it is typically used for initializing the loop index. The second expression is a test made before each iteration of the loop; the loop is exited if the expression becomes 0. The loop itself can be thought of as the statement {stmt expr3 ; }. The third expression is executed at the end of each iteration; it is typically used to increment the loop index. The meaning of the for-statement is similar to expr1 ; while ( expr2 ) {stmt expr3 ; } Define a class For for for-statements, similar to class If in Fig. 2.43. Answer class For extends Stmt { Expr E1; Expr E2; Expr E3; Stmt S; public For(Expr expr1, Expr expr2, Expr expr3, Stmt stmt){ E1 = expr1; E2 = expr2; E3 = expr3; S = stmt; } public void gen(){ E1.gen(); Label start = new Label(); Label end = new Label(); emit(\"ifFalse \" + E2.rvalue().toString() + \" goto \" + end); S.gen(); E3.gen(); emit(\"goto \" + start); emit(end + \":\") } } 2.8.2 The programming language C does not have a boolean type. Show how a C compiler might translate an if-statement into three-address code. Answer Replace emit(\"ifFalse \" + E.rvalue().toString() + \" goto \" + after); with emit(\"ifEqual \" + E.rvalue().toString() + \" 0 goto \" + after); or emit(\"ifEqualZero \" + E.rvalue().toString() + \" goto \" + after);","title":"Exercises for Section 2.8"},{"location":"ch02/2.8/2.8/#exercises-for-section-28","text":"","title":"Exercises for Section 2.8"},{"location":"ch02/2.8/2.8/#281","text":"For-statements in C and Java have the form: for ( exprl ; expr2 ; expr3 ) stmt The first expression is executed before the loop; it is typically used for initializing the loop index. The second expression is a test made before each iteration of the loop; the loop is exited if the expression becomes 0. The loop itself can be thought of as the statement {stmt expr3 ; }. The third expression is executed at the end of each iteration; it is typically used to increment the loop index. The meaning of the for-statement is similar to expr1 ; while ( expr2 ) {stmt expr3 ; } Define a class For for for-statements, similar to class If in Fig. 2.43.","title":"2.8.1"},{"location":"ch02/2.8/2.8/#answer","text":"class For extends Stmt { Expr E1; Expr E2; Expr E3; Stmt S; public For(Expr expr1, Expr expr2, Expr expr3, Stmt stmt){ E1 = expr1; E2 = expr2; E3 = expr3; S = stmt; } public void gen(){ E1.gen(); Label start = new Label(); Label end = new Label(); emit(\"ifFalse \" + E2.rvalue().toString() + \" goto \" + end); S.gen(); E3.gen(); emit(\"goto \" + start); emit(end + \":\") } }","title":"Answer"},{"location":"ch02/2.8/2.8/#282","text":"The programming language C does not have a boolean type. Show how a C compiler might translate an if-statement into three-address code.","title":"2.8.2"},{"location":"ch02/2.8/2.8/#answer_1","text":"Replace emit(\"ifFalse \" + E.rvalue().toString() + \" goto \" + after); with emit(\"ifEqual \" + E.rvalue().toString() + \" 0 goto \" + after); or emit(\"ifEqualZero \" + E.rvalue().toString() + \" goto \" + after);","title":"Answer"},{"location":"ch02/key-point/key-point/","text":"\u7b2c2\u7ae0\u8981\u70b9 1. \u6587\u6cd5\u3001\u8bed\u6cd5\u5236\u5bfc\u7ffb\u8bd1\u65b9\u6848\u3001\u8bed\u6cd5\u5236\u5bfc\u7684\u7ffb\u8bd1\u5668 \u4ee5\u4e00\u4e2a\u4ec5\u652f\u6301\u4e2a\u4f4d\u6570\u52a0\u51cf\u6cd5\u7684\u8868\u8fbe\u5f0f\u4e3a\u4f8b \u6587\u6cd5 list -> list + digit | list - digit | digit digit -> 0 | 1 | \u2026 | 9 \uff08\u6d88\u9664\u4e86\u5de6\u9012\u5f52\u7684\uff09\u8bed\u6cd5\u5236\u5bfc\u7ffb\u8bd1\u65b9\u6848 expr -> term rest rest -> + term { print('+') } rest | - term { print('+') } rest | \u03b5 term -> 0 { print('0') } | 1 { print('1') } | \u2026 | 9 { print('9') } \u8bed\u6cd5\u5236\u5bfc\u7684\u7ffb\u8bd1\u5668 java\u4ee3\u7801\u89c1 p46 2. \u8bed\u6cd5\u6811\u3001\u8bed\u6cd5\u5206\u6790\u6811 \u4ee5 2 + 5 - 9 \u4e3a\u4f8b 3. \u6b63\u5219\u6587\u6cd5\u3001\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u3001\u4e0a\u4e0b\u6587\u76f8\u5173\u6587\u6cd5? \u6587\u6cd5\u7f29\u5199\uff1a RG\uff1a \u6b63\u5219\u6587\u6cd5 CFG\uff1a \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 CSG\uff1a \u4e0a\u4e0b\u6587\u76f8\u5173\u6587\u6cd5 \u6b63\u5219\u6587\u6cd5 wiki \u6b63\u5219\u6587\u6cd5\u5728\u6807\u51c6\u4e4b\u540e\u6240\u6709\u4ea7\u751f\u5f0f\u90fd\u5e94\u8be5\u6ee1\u8db3\u4e0b\u9762\u4e09\u79cd\u60c5\u5f62\u4e2d\u7684\u4e00\u79cd\uff1a B -> a B -> a C B -> epsilon \u5173\u952e\u70b9\u5728\u4e8e\uff1a \u4ea7\u751f\u5f0f\u7684\u5de6\u624b\u8fb9\u5fc5\u987b\u662f\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u3002 \u4ea7\u751f\u5f0f\u7684\u53f3\u624b\u8fb9\u53ef\u4ee5\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u53ef\u4ee5\u6709\u4e00\u4e2a\u7ec8\u7ed3\u7b26\uff0c\u4e5f\u53ef\u4ee5\u6709\u4e00\u4e2a\u7ec8\u7ed3\u7b26\u52a0\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u3002 \u4ece\u4ea7\u751f\u5f0f\u7684\u89d2\u5ea6\u770b\uff0c\u8fd9\u6837\u7684\u89c4\u5b9a\u4f7f\u5f97\u6bcf\u5e94\u7528\u4e00\u6761\u4ea7\u751f\u89c4\u5219\uff0c\u5c31\u53ef\u4ee5\u4ea7\u751f\u51fa\u96f6\u6216\u4e00\u4e2a\u7ec8\u7ed3\u7b26\uff0c\u76f4\u5230\u6700\u540e\u4ea7\u751f\u51fa\u6211\u4eec\u8981\u7684\u90a3\u4e2a\u5b57\u7b26\u4e32\u3002 \u4ece\u5339\u914d\u7684\u89d2\u5ea6\u770b\uff0c\u8fd9\u6837\u7684\u89c4\u5b9a\u4f7f\u5f97\u6bcf\u5e94\u7528\u4e00\u6761\u89c4\u5219\uff0c\u5c31\u53ef\u4ee5\u6d88\u8017\u6389\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\uff0c\u76f4\u5230\u6574\u4e2a\u5b57\u7b26\u4e32\u88ab\u5339\u914d\u6389\u3002 \u8fd9\u6837\u5b9a\u4e49\u7684\u8bed\u8a00\u6240\u5bf9\u5e94\u7684\u81ea\u52a8\u673a\u6709\u4e00\u79cd\u6027\u8d28\uff1a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u3002 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u53ea\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u7684\u4e00\u4e2a\u72b6\u6001\uff0c\u548c\u5f97\u5230\u4e0b\u4e00\u4e2a\u8f93\u5165\u7b26\u53f7\uff0c\u5c31\u53ef\u4ee5\u51b3\u5b9a\u63a5\u4e0b\u6765\u7684\u72b6\u6001\u8fc1\u79fb\u3002 \u6b63\u5219\u6587\u6cd5\u548c\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 CFG \u8ddf RG \u6700\u5927\u7684\u533a\u522b\u5c31\u662f\uff0c\u4ea7\u751f\u5f0f\u7684\u53f3\u624b\u8fb9\u53ef\u4ee5\u6709\u96f6\u6216\u591a\u4e2a\u7ec8\u7ed3\u7b26\u6216\u975e\u7ec8\u7ed3\u7b26\uff0c\u987a\u5e8f\u548c\u4e2a\u6570\u90fd\u6ca1\u9650\u5236\u3002 \u60f3\u50cf\u4e00\u4e2a\u7ecf\u5178\u4f8b\u5b50\uff0c\u62ec\u53f7\u7684\u914d\u5bf9\u5339\u914d\uff1a expr -> '(' expr ')' | epsilon \u8fd9\u4e2a\u4ea7\u751f\u5f0f\u91cc\uff08\u5148\u53ea\u770b\u7b2c\u4e00\u4e2a\u5b50\u4ea7\u751f\u5f0f\uff09\uff0c\u53f3\u624b\u8fb9\u6709\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26 expr\uff0c\u4f46\u5b83\u7684\u5de6\u53f3\u4e24\u4fa7\u90fd\u6709\u7ec8\u7ed3\u7b26\uff0c\u8fd9\u79cd\u4ea7\u751f\u5f0f\u65e0\u6cd5\u88ab\u6807\u51c6\u5316\u4e3a\u4e25\u683c\u7684 RG \u3002\u8fd9\u5c31\u662fCFG\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 \u5b83\u5bf9\u5e94\u7684\u81ea\u52a8\u673a\u5c31\u4e0d\u53ea\u8981\u8bb0\u5f55\u5f53\u524d\u7684\u4e00\u4e2a\u72b6\u6001\uff0c\u8fd8\u5f97\u5916\u52a0\u8bb0\u5f55\u5230\u8fbe\u5f53\u524d\u4f4d\u7f6e\u7684\u5386\u53f2\uff0c\u624d\u53ef\u4ee5\u6839\u636e\u4e0b\u4e00\u4e2a\u8f93\u5165\u7b26\u53f7\u51b3\u5b9a\u72b6\u6001\u8fc1\u79fb\u3002\u6240\u8c13\u7684\u201c\u5386\u53f2\u201d\u5728\u8fd9\u91cc\u5c31\u662f\u5b58\u7740\u5df2\u5339\u914d\u89c4\u5219\u7684\u6808\u3002 CFG \u5bf9\u5e94\u7684\u81ea\u52a8\u673a\u4e3a PDA(\u4e0b\u63a8\u81ea\u52a8\u673a)\u3002 RG \u7684\u89c4\u5b9a\u4e25\u683c\uff0c\u5bf9\u5e94\u7684\u597d\u5904\u662f\u5b83\u5bf9\u5e94\u7684\u81ea\u52a8\u673a\u975e\u5e38\u7b80\u5355\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u975e\u5e38\u9ad8\u6548\u4e14\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002 \u4e0a\u4e0b\u6587\u76f8\u5173\u6587\u6cd5 CSG \u5728 CFG\u7684\u57fa\u7840\u4e0a\u8fdb\u4e00\u6b65\u653e\u5bbd\u9650\u5236\u3002 \u4ea7\u751f\u5f0f\u7684\u5de6\u624b\u8fb9\u4e5f\u53ef\u4ee5\u6709\u7ec8\u7ed3\u7b26\u548c\u975e\u7ec8\u7ed3\u7b26\u3002\u5de6\u624b\u8fb9\u7684\u7ec8\u7ed3\u7b26\u5c31\u662f\u201c\u4e0a\u4e0b\u6587\u201d\u7684\u6765\u6e90\u3002\u4e5f\u5c31\u662f\u8bf4\u5339\u914d\u7684\u65f6\u5019\u4e0d\u80fd\u5149\u770b\u5f53\u524d\u5339\u914d\u5230\u54ea\u91cc\u4e86\uff0c\u8fd8\u5f97\u770b\u5f53\u524d\u4f4d\u7f6e\u7684\u5de6\u53f3\u5230\u5e95\u6709\u5565\uff08\u4e5f\u5c31\u662f\u4e0a\u4e0b\u6587\u662f\u5565\uff09\uff0c\u4e0a\u4e0b\u6587\u5728\u8fd9\u6761\u89c4\u5219\u5e94\u7528\u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u88ab\u6d88\u8017\u6389\uff0c\u53ea\u662f\u201c\u770b\u770b\u201d\u3002 CSG \u7684\u518d\u4e0a\u4e00\u5c42\u662f PSG\uff0cphrase structure grammar\u3002 \u57fa\u672c\u4e0a\u5c31\u662fCSG\u7684\u9650\u5236\u5168\u90e8\u53d6\u6d88\u6389\u3002 \u5de6\u53f3\u4e24\u8fb9\u90fd\u53ef\u4ee5\u6709\u4efb\u610f\u591a\u4e2a\u3001\u4efb\u610f\u987a\u5e8f\u7684\u7ec8\u7ed3\u7b26\u548c\u975e\u7ec8\u7ed3\u7b26\u3002 \u53cd\u6b63\u4e0d\u505a\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u8bdd\u4e5f\u4e0d\u4f1a\u9047\u5230\u8fd9\u79cd\u6587\u6cd5\uff0c\u6240\u4ee5\u5177\u4f53\u5c31\u4e0d\u8bf4\u4e86\u3002 4. \u4e3a\u4ec0\u4e48\u6709 n \u4e2a\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u5c31\u5bf9\u5e94 n+1 \u4e2a\u4ea7\u751f\u5f0f\uff1f \u4f18\u5148\u7ea7\u7684\u5904\u7406\u53ef\u4ee5\u5728\u7eaf\u6587\u6cd5\u5c42\u9762\u89e3\u51b3\uff0c\u4e5f\u53ef\u4ee5\u5728parser\u5b9e\u73b0\u4e2d\u7528\u522b\u7684\u529e\u6cd5\u5904\u7406\u6389\u3002 \u7eaf\u6587\u6cd5\u5c42\u9762\u4e66\u4e0a\u4ecb\u7ecd\u7684\uff0c\u6709\u591a\u5c11\u4e2a\u4f18\u5148\u7ea7\u5c31\u6709\u90a3\u4e48\u591a\u52a01\u4e2a\u4ea7\u751f\u5f0f\u3002 \u4e66\u4e0a\u4ecb\u7ecd\u7684\u56db\u5219\u8fd0\u7b97\u7684\u6587\u6cd5\uff0c\u4f1a\u4f7f\u5f97\u52a0\u51cf\u6cd5\u79bb\u6839\u6bd4\u8f83\u8fd1\uff0c\u4e58\u9664\u6cd5\u79bb\u6839\u6bd4\u8f83\u8fdc\u3002 \u8bed\u6cd5\u6811\u7684\u5f62\u72b6\u51b3\u5b9a\u4e86\u8282\u70b9\u7684\u8ba1\u7b97\u987a\u5e8f\uff0c\u79bb\u6839\u8fdc\u7684\u8282\u70b9\u5c31\u4f1a\u5148\u5904\u7406\uff0c\u8fd9\u6837\u770b\u8d77\u6765\u5c31\u662f\u4e58\u9664\u6cd5\u5148\u8ba1\u7b97\uff0c\u4e5f\u5c31\u662f\u4e58\u9664\u6cd5\u7684\u4f18\u5148\u7ea7\u66f4\u9ad8\u3002 \u53c2\u8003\uff1ahttp://rednaxelafx.iteye.com/blog/492667 5. \u907f\u514d\u4e8c\u4e49\u6027\u6587\u6cd5\u7684\u6709\u6548\u539f\u5219\uff1f \u4e8c\u4e49\u6027\u95ee\u9898\u4e3b\u8981\u662f\u8ddf CFG \u7684\u7279\u6027\u6709\u5173\u7cfb\u7684\u3002 CFG \u7684\u9009\u62e9\u7ed3\u6784\uff08\"|\"\uff09\u662f\u6ca1\u6709\u89c4\u5b9a\u987a\u5e8f\u6216\u8005\u8bf4\u4f18\u5148\u7ea7\u7684\uff0c \u540c\u65f6\uff0c\u591a\u4e2a\u89c4\u5219\u53ef\u80fd\u4f1a\u6709\u5171\u540c\u524d\u7f00\uff0c \u8fd9\u6837\u624d\u4f1a\u6709\u4e8c\u4e49\u6027\u95ee\u9898\u3002 PEG \u662f\u8ddfCFG\u7c7b\u4f3c\u7684\u4e00\u79cd\u4e1c\u897f\uff0c\u8bed\u8a00\u7684\u8868\u8fbe\u529b\u4e0a\u8ddfCFG\u76f8\u4f3c\u3002 \u4f46\u6587\u6cd5\u5c42\u9762\u6ca1\u6709\u4e8c\u4e49\u6027\uff0c\u56e0\u4e3a\u5b83\u7684\u9009\u62e9\u7ed3\u6784\uff08\"|\"\uff09\u662f\u6709\u987a\u5e8f\u6216\u8005\u8bf4\u6709\u4f18\u5148\u7ea7\u7684\u3002 6. \u907f\u514d\u9884\u6d4b\u5206\u6790\u5668\u56e0\u5de6\u9012\u5f52\u6587\u6cd5\u9020\u6210\u7684\u65e0\u9650\u5faa\u73af \u4ea7\u751f\u5f0f\uff1a A -> A x | y \u8bed\u6cd5\u5236\u5bfc\u7ffb\u8bd1\u4f2a\u4ee3\u7801\u7247\u6bb5\uff1a void A(){ switch(lookahead){ case x: A();match(x);break; case y: match(y):break; default: report(\"syntax error\") } } \u5f53\u8bed\u53e5\u7b26\u5408 A x \u5f62\u5f0f\u65f6\uff0c A() \u8fd0\u7b97\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u4ea7\u751f\u5f0f\u6539\u4e3a\u7b49\u4ef7\u7684\u975e\u5de6\u9012\u5f52\u5f62\u5f0f\u6765\u907f\u514d: B -> y C C -> x C | \u03b5 7. \u4e3a\u4ec0\u4e48\u5728\u53f3\u9012\u5f52\u7684\u6587\u6cd5\u4e2d\uff0c\u5305\u542b\u4e86\u5de6\u7ed3\u5408\u8fd0\u7b97\u7b26\u7684\u8868\u8fbe\u5f0f\u7ffb\u8bd1\u4f1a\u6bd4\u8f83\u56f0\u96be\uff1f 8. \u4e2d\u95f4\u4ee3\u7801\u751f\u6210\u65f6\u7684\u5de6\u503c\u548c\u53f3\u503c\u95ee\u9898\u3002 \u770b\u4e86\u4e66\u4e0a lvalue() \u548c rvalue() \u7684\u4f2a\u4ee3\u7801\uff0c\u611f\u89c9\u53ef\u4ee5\u505a\u5de6\u503c\u4e5f\u53ef\u4ee5\u505a\u53f3\u503c\u7684\u90fd\u7531 lvalue() \u5904\u7406\uff0c\u800c\u5bf9\u4e8e\u53f3\u503c\u7684\u5904\u7406\uff0c\u8981\u4e48\u81ea\u5df1\u5904\u7406\u6389\u4e86\uff0c\u5bf9\u4e8e\u53ef\u4ee5\u4f5c\u4e3a\u5de6\u503c\u7684\u53f3\u503c\u5219\u8c03\u7528 lvalue()\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5f04\u4e2a value() \u5c31\u7ed3\u4e86\uff1f","title":"\u7b2c2\u7ae0\u8981\u70b9"},{"location":"ch02/key-point/key-point/#2","text":"","title":"\u7b2c2\u7ae0\u8981\u70b9"},{"location":"ch02/key-point/key-point/#1","text":"\u4ee5\u4e00\u4e2a\u4ec5\u652f\u6301\u4e2a\u4f4d\u6570\u52a0\u51cf\u6cd5\u7684\u8868\u8fbe\u5f0f\u4e3a\u4f8b \u6587\u6cd5 list -> list + digit | list - digit | digit digit -> 0 | 1 | \u2026 | 9 \uff08\u6d88\u9664\u4e86\u5de6\u9012\u5f52\u7684\uff09\u8bed\u6cd5\u5236\u5bfc\u7ffb\u8bd1\u65b9\u6848 expr -> term rest rest -> + term { print('+') } rest | - term { print('+') } rest | \u03b5 term -> 0 { print('0') } | 1 { print('1') } | \u2026 | 9 { print('9') } \u8bed\u6cd5\u5236\u5bfc\u7684\u7ffb\u8bd1\u5668 java\u4ee3\u7801\u89c1 p46","title":"1. \u6587\u6cd5\u3001\u8bed\u6cd5\u5236\u5bfc\u7ffb\u8bd1\u65b9\u6848\u3001\u8bed\u6cd5\u5236\u5bfc\u7684\u7ffb\u8bd1\u5668"},{"location":"ch02/key-point/key-point/#2_1","text":"\u4ee5 2 + 5 - 9 \u4e3a\u4f8b","title":"2. \u8bed\u6cd5\u6811\u3001\u8bed\u6cd5\u5206\u6790\u6811"},{"location":"ch02/key-point/key-point/#3","text":"\u6587\u6cd5\u7f29\u5199\uff1a RG\uff1a \u6b63\u5219\u6587\u6cd5 CFG\uff1a \u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5 CSG\uff1a \u4e0a\u4e0b\u6587\u76f8\u5173\u6587\u6cd5","title":"3. \u6b63\u5219\u6587\u6cd5\u3001\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u3001\u4e0a\u4e0b\u6587\u76f8\u5173\u6587\u6cd5?"},{"location":"ch02/key-point/key-point/#_1","text":"wiki \u6b63\u5219\u6587\u6cd5\u5728\u6807\u51c6\u4e4b\u540e\u6240\u6709\u4ea7\u751f\u5f0f\u90fd\u5e94\u8be5\u6ee1\u8db3\u4e0b\u9762\u4e09\u79cd\u60c5\u5f62\u4e2d\u7684\u4e00\u79cd\uff1a B -> a B -> a C B -> epsilon \u5173\u952e\u70b9\u5728\u4e8e\uff1a \u4ea7\u751f\u5f0f\u7684\u5de6\u624b\u8fb9\u5fc5\u987b\u662f\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u3002 \u4ea7\u751f\u5f0f\u7684\u53f3\u624b\u8fb9\u53ef\u4ee5\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u53ef\u4ee5\u6709\u4e00\u4e2a\u7ec8\u7ed3\u7b26\uff0c\u4e5f\u53ef\u4ee5\u6709\u4e00\u4e2a\u7ec8\u7ed3\u7b26\u52a0\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u3002 \u4ece\u4ea7\u751f\u5f0f\u7684\u89d2\u5ea6\u770b\uff0c\u8fd9\u6837\u7684\u89c4\u5b9a\u4f7f\u5f97\u6bcf\u5e94\u7528\u4e00\u6761\u4ea7\u751f\u89c4\u5219\uff0c\u5c31\u53ef\u4ee5\u4ea7\u751f\u51fa\u96f6\u6216\u4e00\u4e2a\u7ec8\u7ed3\u7b26\uff0c\u76f4\u5230\u6700\u540e\u4ea7\u751f\u51fa\u6211\u4eec\u8981\u7684\u90a3\u4e2a\u5b57\u7b26\u4e32\u3002 \u4ece\u5339\u914d\u7684\u89d2\u5ea6\u770b\uff0c\u8fd9\u6837\u7684\u89c4\u5b9a\u4f7f\u5f97\u6bcf\u5e94\u7528\u4e00\u6761\u89c4\u5219\uff0c\u5c31\u53ef\u4ee5\u6d88\u8017\u6389\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\uff0c\u76f4\u5230\u6574\u4e2a\u5b57\u7b26\u4e32\u88ab\u5339\u914d\u6389\u3002 \u8fd9\u6837\u5b9a\u4e49\u7684\u8bed\u8a00\u6240\u5bf9\u5e94\u7684\u81ea\u52a8\u673a\u6709\u4e00\u79cd\u6027\u8d28\uff1a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u3002 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u53ea\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u7684\u4e00\u4e2a\u72b6\u6001\uff0c\u548c\u5f97\u5230\u4e0b\u4e00\u4e2a\u8f93\u5165\u7b26\u53f7\uff0c\u5c31\u53ef\u4ee5\u51b3\u5b9a\u63a5\u4e0b\u6765\u7684\u72b6\u6001\u8fc1\u79fb\u3002","title":"\u6b63\u5219\u6587\u6cd5"},{"location":"ch02/key-point/key-point/#_2","text":"CFG \u8ddf RG \u6700\u5927\u7684\u533a\u522b\u5c31\u662f\uff0c\u4ea7\u751f\u5f0f\u7684\u53f3\u624b\u8fb9\u53ef\u4ee5\u6709\u96f6\u6216\u591a\u4e2a\u7ec8\u7ed3\u7b26\u6216\u975e\u7ec8\u7ed3\u7b26\uff0c\u987a\u5e8f\u548c\u4e2a\u6570\u90fd\u6ca1\u9650\u5236\u3002 \u60f3\u50cf\u4e00\u4e2a\u7ecf\u5178\u4f8b\u5b50\uff0c\u62ec\u53f7\u7684\u914d\u5bf9\u5339\u914d\uff1a expr -> '(' expr ')' | epsilon \u8fd9\u4e2a\u4ea7\u751f\u5f0f\u91cc\uff08\u5148\u53ea\u770b\u7b2c\u4e00\u4e2a\u5b50\u4ea7\u751f\u5f0f\uff09\uff0c\u53f3\u624b\u8fb9\u6709\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26 expr\uff0c\u4f46\u5b83\u7684\u5de6\u53f3\u4e24\u4fa7\u90fd\u6709\u7ec8\u7ed3\u7b26\uff0c\u8fd9\u79cd\u4ea7\u751f\u5f0f\u65e0\u6cd5\u88ab\u6807\u51c6\u5316\u4e3a\u4e25\u683c\u7684 RG \u3002\u8fd9\u5c31\u662fCFG\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 \u5b83\u5bf9\u5e94\u7684\u81ea\u52a8\u673a\u5c31\u4e0d\u53ea\u8981\u8bb0\u5f55\u5f53\u524d\u7684\u4e00\u4e2a\u72b6\u6001\uff0c\u8fd8\u5f97\u5916\u52a0\u8bb0\u5f55\u5230\u8fbe\u5f53\u524d\u4f4d\u7f6e\u7684\u5386\u53f2\uff0c\u624d\u53ef\u4ee5\u6839\u636e\u4e0b\u4e00\u4e2a\u8f93\u5165\u7b26\u53f7\u51b3\u5b9a\u72b6\u6001\u8fc1\u79fb\u3002\u6240\u8c13\u7684\u201c\u5386\u53f2\u201d\u5728\u8fd9\u91cc\u5c31\u662f\u5b58\u7740\u5df2\u5339\u914d\u89c4\u5219\u7684\u6808\u3002 CFG \u5bf9\u5e94\u7684\u81ea\u52a8\u673a\u4e3a PDA(\u4e0b\u63a8\u81ea\u52a8\u673a)\u3002 RG \u7684\u89c4\u5b9a\u4e25\u683c\uff0c\u5bf9\u5e94\u7684\u597d\u5904\u662f\u5b83\u5bf9\u5e94\u7684\u81ea\u52a8\u673a\u975e\u5e38\u7b80\u5355\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u975e\u5e38\u9ad8\u6548\u4e14\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u3002","title":"\u6b63\u5219\u6587\u6cd5\u548c\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5"},{"location":"ch02/key-point/key-point/#_3","text":"CSG \u5728 CFG\u7684\u57fa\u7840\u4e0a\u8fdb\u4e00\u6b65\u653e\u5bbd\u9650\u5236\u3002 \u4ea7\u751f\u5f0f\u7684\u5de6\u624b\u8fb9\u4e5f\u53ef\u4ee5\u6709\u7ec8\u7ed3\u7b26\u548c\u975e\u7ec8\u7ed3\u7b26\u3002\u5de6\u624b\u8fb9\u7684\u7ec8\u7ed3\u7b26\u5c31\u662f\u201c\u4e0a\u4e0b\u6587\u201d\u7684\u6765\u6e90\u3002\u4e5f\u5c31\u662f\u8bf4\u5339\u914d\u7684\u65f6\u5019\u4e0d\u80fd\u5149\u770b\u5f53\u524d\u5339\u914d\u5230\u54ea\u91cc\u4e86\uff0c\u8fd8\u5f97\u770b\u5f53\u524d\u4f4d\u7f6e\u7684\u5de6\u53f3\u5230\u5e95\u6709\u5565\uff08\u4e5f\u5c31\u662f\u4e0a\u4e0b\u6587\u662f\u5565\uff09\uff0c\u4e0a\u4e0b\u6587\u5728\u8fd9\u6761\u89c4\u5219\u5e94\u7528\u7684\u65f6\u5019\u5e76\u4e0d\u4f1a\u88ab\u6d88\u8017\u6389\uff0c\u53ea\u662f\u201c\u770b\u770b\u201d\u3002 CSG \u7684\u518d\u4e0a\u4e00\u5c42\u662f PSG\uff0cphrase structure grammar\u3002 \u57fa\u672c\u4e0a\u5c31\u662fCSG\u7684\u9650\u5236\u5168\u90e8\u53d6\u6d88\u6389\u3002 \u5de6\u53f3\u4e24\u8fb9\u90fd\u53ef\u4ee5\u6709\u4efb\u610f\u591a\u4e2a\u3001\u4efb\u610f\u987a\u5e8f\u7684\u7ec8\u7ed3\u7b26\u548c\u975e\u7ec8\u7ed3\u7b26\u3002 \u53cd\u6b63\u4e0d\u505a\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u8bdd\u4e5f\u4e0d\u4f1a\u9047\u5230\u8fd9\u79cd\u6587\u6cd5\uff0c\u6240\u4ee5\u5177\u4f53\u5c31\u4e0d\u8bf4\u4e86\u3002","title":"\u4e0a\u4e0b\u6587\u76f8\u5173\u6587\u6cd5"},{"location":"ch02/key-point/key-point/#4-n-n1","text":"\u4f18\u5148\u7ea7\u7684\u5904\u7406\u53ef\u4ee5\u5728\u7eaf\u6587\u6cd5\u5c42\u9762\u89e3\u51b3\uff0c\u4e5f\u53ef\u4ee5\u5728parser\u5b9e\u73b0\u4e2d\u7528\u522b\u7684\u529e\u6cd5\u5904\u7406\u6389\u3002 \u7eaf\u6587\u6cd5\u5c42\u9762\u4e66\u4e0a\u4ecb\u7ecd\u7684\uff0c\u6709\u591a\u5c11\u4e2a\u4f18\u5148\u7ea7\u5c31\u6709\u90a3\u4e48\u591a\u52a01\u4e2a\u4ea7\u751f\u5f0f\u3002 \u4e66\u4e0a\u4ecb\u7ecd\u7684\u56db\u5219\u8fd0\u7b97\u7684\u6587\u6cd5\uff0c\u4f1a\u4f7f\u5f97\u52a0\u51cf\u6cd5\u79bb\u6839\u6bd4\u8f83\u8fd1\uff0c\u4e58\u9664\u6cd5\u79bb\u6839\u6bd4\u8f83\u8fdc\u3002 \u8bed\u6cd5\u6811\u7684\u5f62\u72b6\u51b3\u5b9a\u4e86\u8282\u70b9\u7684\u8ba1\u7b97\u987a\u5e8f\uff0c\u79bb\u6839\u8fdc\u7684\u8282\u70b9\u5c31\u4f1a\u5148\u5904\u7406\uff0c\u8fd9\u6837\u770b\u8d77\u6765\u5c31\u662f\u4e58\u9664\u6cd5\u5148\u8ba1\u7b97\uff0c\u4e5f\u5c31\u662f\u4e58\u9664\u6cd5\u7684\u4f18\u5148\u7ea7\u66f4\u9ad8\u3002 \u53c2\u8003\uff1ahttp://rednaxelafx.iteye.com/blog/492667","title":"4. \u4e3a\u4ec0\u4e48\u6709 n \u4e2a\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u5c31\u5bf9\u5e94 n+1 \u4e2a\u4ea7\u751f\u5f0f\uff1f"},{"location":"ch02/key-point/key-point/#5","text":"\u4e8c\u4e49\u6027\u95ee\u9898\u4e3b\u8981\u662f\u8ddf CFG \u7684\u7279\u6027\u6709\u5173\u7cfb\u7684\u3002 CFG \u7684\u9009\u62e9\u7ed3\u6784\uff08\"|\"\uff09\u662f\u6ca1\u6709\u89c4\u5b9a\u987a\u5e8f\u6216\u8005\u8bf4\u4f18\u5148\u7ea7\u7684\uff0c \u540c\u65f6\uff0c\u591a\u4e2a\u89c4\u5219\u53ef\u80fd\u4f1a\u6709\u5171\u540c\u524d\u7f00\uff0c \u8fd9\u6837\u624d\u4f1a\u6709\u4e8c\u4e49\u6027\u95ee\u9898\u3002 PEG \u662f\u8ddfCFG\u7c7b\u4f3c\u7684\u4e00\u79cd\u4e1c\u897f\uff0c\u8bed\u8a00\u7684\u8868\u8fbe\u529b\u4e0a\u8ddfCFG\u76f8\u4f3c\u3002 \u4f46\u6587\u6cd5\u5c42\u9762\u6ca1\u6709\u4e8c\u4e49\u6027\uff0c\u56e0\u4e3a\u5b83\u7684\u9009\u62e9\u7ed3\u6784\uff08\"|\"\uff09\u662f\u6709\u987a\u5e8f\u6216\u8005\u8bf4\u6709\u4f18\u5148\u7ea7\u7684\u3002","title":"5. \u907f\u514d\u4e8c\u4e49\u6027\u6587\u6cd5\u7684\u6709\u6548\u539f\u5219\uff1f"},{"location":"ch02/key-point/key-point/#6","text":"\u4ea7\u751f\u5f0f\uff1a A -> A x | y \u8bed\u6cd5\u5236\u5bfc\u7ffb\u8bd1\u4f2a\u4ee3\u7801\u7247\u6bb5\uff1a void A(){ switch(lookahead){ case x: A();match(x);break; case y: match(y):break; default: report(\"syntax error\") } } \u5f53\u8bed\u53e5\u7b26\u5408 A x \u5f62\u5f0f\u65f6\uff0c A() \u8fd0\u7b97\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u4ea7\u751f\u5f0f\u6539\u4e3a\u7b49\u4ef7\u7684\u975e\u5de6\u9012\u5f52\u5f62\u5f0f\u6765\u907f\u514d: B -> y C C -> x C | \u03b5","title":"6. \u907f\u514d\u9884\u6d4b\u5206\u6790\u5668\u56e0\u5de6\u9012\u5f52\u6587\u6cd5\u9020\u6210\u7684\u65e0\u9650\u5faa\u73af"},{"location":"ch02/key-point/key-point/#7","text":"","title":"7. \u4e3a\u4ec0\u4e48\u5728\u53f3\u9012\u5f52\u7684\u6587\u6cd5\u4e2d\uff0c\u5305\u542b\u4e86\u5de6\u7ed3\u5408\u8fd0\u7b97\u7b26\u7684\u8868\u8fbe\u5f0f\u7ffb\u8bd1\u4f1a\u6bd4\u8f83\u56f0\u96be\uff1f"},{"location":"ch02/key-point/key-point/#8","text":"\u770b\u4e86\u4e66\u4e0a lvalue() \u548c rvalue() \u7684\u4f2a\u4ee3\u7801\uff0c\u611f\u89c9\u53ef\u4ee5\u505a\u5de6\u503c\u4e5f\u53ef\u4ee5\u505a\u53f3\u503c\u7684\u90fd\u7531 lvalue() \u5904\u7406\uff0c\u800c\u5bf9\u4e8e\u53f3\u503c\u7684\u5904\u7406\uff0c\u8981\u4e48\u81ea\u5df1\u5904\u7406\u6389\u4e86\uff0c\u5bf9\u4e8e\u53ef\u4ee5\u4f5c\u4e3a\u5de6\u503c\u7684\u53f3\u503c\u5219\u8c03\u7528 lvalue()\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5f04\u4e2a value() \u5c31\u7ed3\u4e86\uff1f","title":"8. \u4e2d\u95f4\u4ee3\u7801\u751f\u6210\u65f6\u7684\u5de6\u503c\u548c\u53f3\u503c\u95ee\u9898\u3002"},{"location":"ch03/3.1/3.1/","text":"Exercises for Section 3.1 3.1.1 Divide the following C++ program: float limitedSquare(x){float x; /* returns x-squared, nut never more than 100 */ return (x <= -10.0 || x >= 10.0) ? 100 : x*x; } into appropriate lexemes, using the discussion of Section 3.1.2 as a guide. Which lexemes should get associated lexical values? What should those values be? Answer <float> <id, limitedSquaare> <(> <id, x> <)> <{> <float> <id, x> <return> <(> <id, x> <op,\"<=\"> <num, -10.0> <op, \"||\"> <id, x> <op, \">=\"> <num, 10.0> <)> <op, \"?\"> <num, 100> <op, \":\"> <id, x> <op, \"*\"> <id, x> <}> 3.1.2 Tagged languages like HTML or XML are different from conventional programming languages in that the punctuation (tags) are either very numerous (as in HTML) or a user-definable set (as in XML). Further, tags can often have parameters. Suggest how to divide the following HTML document: Here is a photo of <b>my house</b>; <p><img src=\"house.gif\"/><br/> see <a href=\"morePix.html\">More Picture</a> if you liked that one.</p> into appropriate lexemes. Which lexemes should get associated lexical values, and what should those values be? Answer <text, \"Here is a photo of\"> <nodestart, b> <text, \"my house\"> <nodeend, b> <nodestart, p> <selfendnode, img> <selfendnode, br> <text, \"see\"> <nodestart, a> <text, \"More Picture\"> <nodeend, a> <text, \"if you liked that one.\"> <nodeend, p>","title":"Exercises for Section 3.1"},{"location":"ch03/3.1/3.1/#exercises-for-section-31","text":"","title":"Exercises for Section 3.1"},{"location":"ch03/3.1/3.1/#311","text":"Divide the following C++ program: float limitedSquare(x){float x; /* returns x-squared, nut never more than 100 */ return (x <= -10.0 || x >= 10.0) ? 100 : x*x; } into appropriate lexemes, using the discussion of Section 3.1.2 as a guide. Which lexemes should get associated lexical values? What should those values be?","title":"3.1.1"},{"location":"ch03/3.1/3.1/#answer","text":"<float> <id, limitedSquaare> <(> <id, x> <)> <{> <float> <id, x> <return> <(> <id, x> <op,\"<=\"> <num, -10.0> <op, \"||\"> <id, x> <op, \">=\"> <num, 10.0> <)> <op, \"?\"> <num, 100> <op, \":\"> <id, x> <op, \"*\"> <id, x> <}>","title":"Answer"},{"location":"ch03/3.1/3.1/#312","text":"Tagged languages like HTML or XML are different from conventional programming languages in that the punctuation (tags) are either very numerous (as in HTML) or a user-definable set (as in XML). Further, tags can often have parameters. Suggest how to divide the following HTML document: Here is a photo of <b>my house</b>; <p><img src=\"house.gif\"/><br/> see <a href=\"morePix.html\">More Picture</a> if you liked that one.</p> into appropriate lexemes. Which lexemes should get associated lexical values, and what should those values be?","title":"3.1.2"},{"location":"ch03/3.1/3.1/#answer_1","text":"<text, \"Here is a photo of\"> <nodestart, b> <text, \"my house\"> <nodeend, b> <nodestart, p> <selfendnode, img> <selfendnode, br> <text, \"see\"> <nodestart, a> <text, \"More Picture\"> <nodeend, a> <text, \"if you liked that one.\"> <nodeend, p>","title":"Answer"},{"location":"ch03/3.3/3.3/","text":"Exercises for Section 3.3 3.3.1 Consult the language reference manuals to determine the sets of characters that form the input alphabet (excluding those that may only appear in character strings or comments) the lexical form of numerical constants, and the lexical form of identifiers, for each of the following languages: C C++ C# Fortran Java Lisp SQL 3.3.2 Describe the languages denoted by the following regular expressions: a(a|b)*a ((\u03b5|a)b*)* (a|b)*a(a|b)(a|b) a*ba*ba*ba* !! (aa|bb)*((ab|ba)(aa|bb)*(ab|ba)(aa|bb)*)* Answer String of a's and b's that start and end with a. String of a's and b's. String of a's and b's that the character third from the last is a. String of a's and b's that only contains three b. String of a's and b's that has a even number of a and b. 3.3.3 In a string of length n, how many of the following are there? Prefixes. Suffixes. Proper prefixes. ! Substrings. ! Subsequences. Answer n + 1 n + 1 n - 1 C(n+1,2) + 1 (need to count epsilon in) \u03a3(i=0,n) C(n, i) 3.3.4 Most languages are case sensitive, so keywords can be written only one way, and the regular expressions describing their lexeme is very simple. However, some languages, like SQL, are case insensitive, so a keyword can be written either in lowercase or in uppercase, or in any mixture of cases. Thus, the SQL keyword SELECT can also be written select, Select, or sElEcT, for instance. Show how to write a regular expression for a keyword in a case\u00ad insensitive language. Illustrate the idea by writing the expression for \"select\" in SQL. Answer select -> [Ss][Ee][Ll][Ee][Cc][Tt] 3.3.5 \uff01Write regular definitions for the following languages: All strings of lowercase letters that contain the five vowels in order. All strings of lowercase letters in which the letters are in ascending lexicographic order. Comments, consisting of a string surrounded by / and /, without an intervening */, unless it is inside double-quotes (\") !! All strings of digits with no repeated digits. Hint: Try this problem first with a few digits, such as {O, 1, 2}. !! All strings of digits with at most one repeated digit. !! All strings of a's and b's with an even number of a's and an odd number of b's. The set of Chess moves,in the informal notation,such as p-k4 or kbp*qn. !! All strings of a's and b's that do not contain the substring abb. All strings of a's and b's that do not contain the subsequence abb. Answer 1\u3001 want -> other* a (other|a)* e (other|e)* i (other|i)* o (other|o)* u (other|u)* other -> [bcdfghjklmnpqrstvwxyz] 2\u3001 a* b* ... z* 3\u3001 \\/\\*([^*\"]*|\".*\"|\\*+[^/])*\\*\\/ 4\u3001 want -> 0|A?0?1(A0?1|01)*A?0?|A0? A -> 0?2(02)* Steps: step1. Transition diagram step2. GNFA step3. Remove node 0 and simplify step4. Remove node 2 and simplify step5. Remove node 1 and simplify 5\u3001 want -> (FE*G|(aa)*b)(E|FE*G) E -> b(aa)*b F -> a(aa)*b G -> b(aa)*ab|a F -> ba(aa)*b Steps: step1. Transition diagram step2. GNFA step3. Remove node A and simplify step4. Remove node D and simplify step5. Remove node C and simplify 8\u3001 b*(a+b?)* 9\u3001 b* | b*a+ | b*a+ba* 3.3.6 Write character classes for the following sets of characters: The first ten letters (up to \"j\") in either upper or lower case. The lowercase consonants. The \"digits\" in a hexadecimal number (choose either upper or lower case for the \"digits\" above 9). The characters that can appear at the end of alegitimate English sentence (e.g. , exclamation point) . Answer [A-Ja-j] [bcdfghjklmnpqrstvwxzy] [0-9a-f] [.?!] 3.3.7 Note that these regular expressions give all of the following symbols (operator characters) a special meaning: \\ \" . ^ $ [ ] * + ? { } | / Their special meaning must be turned off if they are needed to represent themselves in a character string. We can do so by quoting the character within a string of length one or more; e.g., the regular expression \"**\" matches the string ** . We can also get the literal meaning of an operator character by preceding it by a backslash. Thus, the regular expression \\*\\* also matches the string **. Write a regular expression that matches the string \"\\. Answer \\\"\\\\ 3.3.9 ! The regular expression r{m, n} matches from m to n occurrences of the pattern r. For example, a [ 1 , 5] matches a string of one to five a's. Show that for every regular expression containing repetition operators of this form, there is an equivalent regular expression without repetition operators. Answer r{m,n} is equals to r.(m).r | r.(m + 1).r | ... | r.(n).r 3.3.10 ! The operator ^ matches the left end of a line, and $ matches the right end of a line. The operator ^ is also used to introduce complemented character classes, but the context always makes it clear which meaning is intended. For example, ^[^aeiou]*$ matches any complete line that does not contain a lowercase vowel. How do you tell which meaning of ^ is intended? Can you always replace a regular expression using the ^ and $ operators by an equivalent expression that does not use either of these operators? Answer if ^ is in a pair of brakets, and it is the first letter, it means complemented classes, or it means the left end of a line.","title":"Exercises for Section 3.3"},{"location":"ch03/3.3/3.3/#exercises-for-section-33","text":"","title":"Exercises for Section 3.3"},{"location":"ch03/3.3/3.3/#331","text":"Consult the language reference manuals to determine the sets of characters that form the input alphabet (excluding those that may only appear in character strings or comments) the lexical form of numerical constants, and the lexical form of identifiers, for each of the following languages: C C++ C# Fortran Java Lisp SQL","title":"3.3.1"},{"location":"ch03/3.3/3.3/#332","text":"Describe the languages denoted by the following regular expressions: a(a|b)*a ((\u03b5|a)b*)* (a|b)*a(a|b)(a|b) a*ba*ba*ba* !! (aa|bb)*((ab|ba)(aa|bb)*(ab|ba)(aa|bb)*)*","title":"3.3.2"},{"location":"ch03/3.3/3.3/#answer","text":"String of a's and b's that start and end with a. String of a's and b's. String of a's and b's that the character third from the last is a. String of a's and b's that only contains three b. String of a's and b's that has a even number of a and b.","title":"Answer"},{"location":"ch03/3.3/3.3/#333","text":"In a string of length n, how many of the following are there? Prefixes. Suffixes. Proper prefixes. ! Substrings. ! Subsequences.","title":"3.3.3"},{"location":"ch03/3.3/3.3/#answer_1","text":"n + 1 n + 1 n - 1 C(n+1,2) + 1 (need to count epsilon in) \u03a3(i=0,n) C(n, i)","title":"Answer"},{"location":"ch03/3.3/3.3/#334","text":"Most languages are case sensitive, so keywords can be written only one way, and the regular expressions describing their lexeme is very simple. However, some languages, like SQL, are case insensitive, so a keyword can be written either in lowercase or in uppercase, or in any mixture of cases. Thus, the SQL keyword SELECT can also be written select, Select, or sElEcT, for instance. Show how to write a regular expression for a keyword in a case\u00ad insensitive language. Illustrate the idea by writing the expression for \"select\" in SQL.","title":"3.3.4"},{"location":"ch03/3.3/3.3/#answer_2","text":"select -> [Ss][Ee][Ll][Ee][Cc][Tt]","title":"Answer"},{"location":"ch03/3.3/3.3/#335","text":"\uff01Write regular definitions for the following languages: All strings of lowercase letters that contain the five vowels in order. All strings of lowercase letters in which the letters are in ascending lexicographic order. Comments, consisting of a string surrounded by / and /, without an intervening */, unless it is inside double-quotes (\") !! All strings of digits with no repeated digits. Hint: Try this problem first with a few digits, such as {O, 1, 2}. !! All strings of digits with at most one repeated digit. !! All strings of a's and b's with an even number of a's and an odd number of b's. The set of Chess moves,in the informal notation,such as p-k4 or kbp*qn. !! All strings of a's and b's that do not contain the substring abb. All strings of a's and b's that do not contain the subsequence abb.","title":"3.3.5"},{"location":"ch03/3.3/3.3/#answer_3","text":"1\u3001 want -> other* a (other|a)* e (other|e)* i (other|i)* o (other|o)* u (other|u)* other -> [bcdfghjklmnpqrstvwxyz] 2\u3001 a* b* ... z* 3\u3001 \\/\\*([^*\"]*|\".*\"|\\*+[^/])*\\*\\/ 4\u3001 want -> 0|A?0?1(A0?1|01)*A?0?|A0? A -> 0?2(02)* Steps: step1. Transition diagram step2. GNFA step3. Remove node 0 and simplify step4. Remove node 2 and simplify step5. Remove node 1 and simplify 5\u3001 want -> (FE*G|(aa)*b)(E|FE*G) E -> b(aa)*b F -> a(aa)*b G -> b(aa)*ab|a F -> ba(aa)*b Steps: step1. Transition diagram step2. GNFA step3. Remove node A and simplify step4. Remove node D and simplify step5. Remove node C and simplify 8\u3001 b*(a+b?)* 9\u3001 b* | b*a+ | b*a+ba*","title":"Answer"},{"location":"ch03/3.3/3.3/#336","text":"Write character classes for the following sets of characters: The first ten letters (up to \"j\") in either upper or lower case. The lowercase consonants. The \"digits\" in a hexadecimal number (choose either upper or lower case for the \"digits\" above 9). The characters that can appear at the end of alegitimate English sentence (e.g. , exclamation point) .","title":"3.3.6"},{"location":"ch03/3.3/3.3/#answer_4","text":"[A-Ja-j] [bcdfghjklmnpqrstvwxzy] [0-9a-f] [.?!]","title":"Answer"},{"location":"ch03/3.3/3.3/#337","text":"Note that these regular expressions give all of the following symbols (operator characters) a special meaning: \\ \" . ^ $ [ ] * + ? { } | / Their special meaning must be turned off if they are needed to represent themselves in a character string. We can do so by quoting the character within a string of length one or more; e.g., the regular expression \"**\" matches the string ** . We can also get the literal meaning of an operator character by preceding it by a backslash. Thus, the regular expression \\*\\* also matches the string **. Write a regular expression that matches the string \"\\.","title":"3.3.7"},{"location":"ch03/3.3/3.3/#answer_5","text":"\\\"\\\\","title":"Answer"},{"location":"ch03/3.3/3.3/#339","text":"The regular expression r{m, n} matches from m to n occurrences of the pattern r. For example, a [ 1 , 5] matches a string of one to five a's. Show that for every regular expression containing repetition operators of this form, there is an equivalent regular expression without repetition operators.","title":"3.3.9 !"},{"location":"ch03/3.3/3.3/#answer_6","text":"r{m,n} is equals to r.(m).r | r.(m + 1).r | ... | r.(n).r","title":"Answer"},{"location":"ch03/3.3/3.3/#3310","text":"The operator ^ matches the left end of a line, and $ matches the right end of a line. The operator ^ is also used to introduce complemented character classes, but the context always makes it clear which meaning is intended. For example, ^[^aeiou]*$ matches any complete line that does not contain a lowercase vowel. How do you tell which meaning of ^ is intended? Can you always replace a regular expression using the ^ and $ operators by an equivalent expression that does not use either of these operators?","title":"3.3.10 !"},{"location":"ch03/3.3/3.3/#answer_7","text":"if ^ is in a pair of brakets, and it is the first letter, it means complemented classes, or it means the left end of a line.","title":"Answer"},{"location":"ch03/3.4/3.4/","text":"3.4 \u8282\u7684\u7ec3\u4e60 3.4.1 \u7ed9\u51fa\u8bc6\u522b\u7ec3\u4e60 3.3.2 \u4e2d\u5404\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u6240\u63cf\u8ff0\u7684\u8bed\u8a00\u72b6\u6001\u8f6c\u6362\u56fe\u3002 \u89e3\u7b54 \u89e3\u7b54\u6b65\u9aa4\uff1aNFA -> DFA -> \u6700\u5c11\u72b6\u6001\u7684 DFA\uff08\u72b6\u6001\u8f6c\u6362\u56fe\uff09 a(a|b)*a NFA: DFA: NFA DFA a b {0} A B {1,2,3,5,8} B C D {2,3,4,5,7,8, 9 } C C D {2,3,5,6,7,8} D C D \u6700\u5c11\u72b6\u6001\u7684 DFA(\u72b6\u6001\u8f6c\u6362\u56fe): \u5408\u5e76\u4e0d\u53ef\u533a\u5206\u7684\u72b6\u6001 B \u548c D ((\u03b5|a)b*)* (a|b)*a(a|b)(a|b) NFA: DFA: NFA DFA a b {0,1,2,4,7} A B C {1,2,3,4,6,7,8,9,11} B D E {1,2,4,5,6,7} C B C {1,2,3,4,6,7,8,9,10,11,13,14,16} D F G {1,2,4,5,6,7,12,13,14,16} E H I {1,2,3,4,6,7,8,9,10,11,13,14,15,16, 18 } F F G {1,2,4,5,6,7,12,13,14,16,17, 18 } G H I {1,2,3,4,6,7,8,9,11,15, 18 } H D E {1,2,4,5,6,7,17, 18 } I B C \u6700\u5c11\u72b6\u6001\u7684 DFA(\u72b6\u6001\u8f6c\u6362\u56fe): \u5408\u5e76\u4e0d\u53ef\u533a\u5206\u7684\u72b6\u6001 A \u548c C a*ba*ba*ba* 3.4.2 \u7ed9\u51fa\u8bc6\u522b\u7ec3\u4e60 3.3.5 \u4e2d\u5404\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u6240\u63cf\u8ff0\u8bed\u8a00\u7684\u72b6\u6001\u8f6c\u6362\u56fe\u3002 3.4.3 \u6784\u9020\u4e0b\u5217\u4e32\u7684\u5931\u6548\u51fd\u6570\u3002 abababaab aaaaaa abbaabb \u89e3\u7b54 \u4ee3\u7801\u8be6\u89c1\uff1a src/failure-function.js [ 0, 0, 1, 2, 3, 4, 5, 1, 2 ] [ 0, 1, 2, 3, 4, 5 ] [ 0, 0, 0, 1, 1, 2, 3 ] 3.4.4 \uff01 \u5bf9 s \u8fdb\u884c\u5f52\u7eb3\uff0c\u8bc1\u660e\u56fe 3-19 \u7684\u7b97\u6cd5\u6b63\u786e\u5730\u8ba1\u7b97\u51fa\u4e86\u5931\u6548\u51fd\u6570\u3002 \u56fe 3-19\uff1a\u8ba1\u7b97\u5173\u952e\u5b57 b_1b_2\u2026b_n \u7684\u5931\u6548\u51fd\u6570 01 t = 0; 02 f(1) = 0; 03 for (s = 1; s < n; s ++){ 04 while( t > 0 && b_s+1 != b_t+1) t = f(t); 05 if(b_s+1 == b_t+1){ 06 t = t + 1; 07 f(s + 1) = t; 08 }else{ 09 f(s + 1) = 0; 10 } 11 } \u8bc1\u660e \u5df2\u77e5 f(1) = 0 \u5728\u7b2c 1 \u6b21 for \u5faa\u73af\u65f6\uff0c\u8ba1\u7b97 f(2) \u7684\u503c\uff0c\u5f53\u7b2c5\u884c\u4ee3\u7801 b_2 == b_1 \u6210\u7acb\u65f6\uff0c\u4ee3\u7801\u8fdb\u5165\u5230\u7b2c7\u884c\u5f97\u51fa f(2) = 1\uff0c\u4e0d\u6210\u7acb\u65f6\uff0c\u5219\u4ee3\u7801\u8fdb\u5165\u7b2c9\u884c\u5f97\u51fa f(2) = 0\u3002\u663e\u7136\uff0c\u8fd9\u6b21\u5faa\u73af\u6b63\u786e\u7684\u8ba1\u7b97\u51fa\u4e86 f(2) \u3002 \u5047\u8bbe\u5728\u7b2c i-1 \u6b21\u8fdb\u5165\u5faa\u73af\u65f6\uff0c\u4e5f\u6b63\u786e\u7684\u8ba1\u7b97\u51fa\u4e86 f(i)\uff0c\u4e5f\u6709 f(i) = t (\u65e0\u8bba t \u662f\u5927\u4e8e 0 \u8fd8\u662f\u7b49\u4e8e 0) \u90a3\u4e48\u5728\u7b2c 1 \u6b21\u8fdb\u5165\u5faa\u73af\u65f6\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u8fdb\u884c\u8003\u8651\uff1a t == 0 \u8fd9\u79cd\u60c5\u51b5\u6bd4\u8f83\u7b80\u5355\uff0c\u76f4\u63a5\u4ece\u7b2c 5 \u884c\u5f00\u59cb\uff0c\u5f53 b_i+1 == b_1 \u65f6\uff0cf(i+1) = 1\uff0c\u5426\u5219 f(i+1) = 0 2. t > 0 while \u5faa\u73af\u4f1a\u4e0d\u65ad\u7f29\u5c0f t \u503c\uff0c\u8bd5\u56fe\u627e\u51fa\u6700\u5927\u53ef\u80fd\u7684\u4f7f\u5f97 b_i+1 == b_t+1 \u6210\u7acb\u7684 t \u503c\uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u8fdb\u5165\u7b2c 5 \u884c\u6267\u884c\uff0c\u5f97\u5230 f(i+1) = t+1\uff1b\u6216\u8005\u76f4\u5230 t == 0 \u65f6\u4e5f\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8df3\u51fa\u5faa\u73af\uff0c\u8fd9\u65f6\u8fdb\u5165\u7b2c 5 \u884c\u6267\u884c\uff0c\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u524d\u4e00\u79cd\u60c5\u51b5\u3002 3.4.5 \uff01\uff01 \u8bf4\u660e\u56fe 3-19 \u4e2d\u7684\u7b2c 4 \u884c\u7684\u590d\u5236\u8bed\u53e5 t = f(t) \u6700\u591a\u88ab\u6267\u884c n \u6b21\u3002\u8fdb\u800c\u8bf4\u660e\u6574\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u5176\u4e2d n \u662f\u5173\u952e\u5b57\u957f\u5ea6\u3002 \u89e3\u7b54 \u8be6\u89c1 matrix \u7684\u535a\u6587 KMP\u7b97\u6cd5\u8be6\u89e3 \u3002 3.4.6 \u5e94\u7528 KMP \u7b97\u6cd5\u5224\u65ad\u5173\u952e\u5b57 ababaa \u662f\u5426\u4e3a\u4e0b\u9762\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\uff1a abababaab abababbaa \u89e3\u7b54 \u4ee3\u7801\u8be6\u89c1\uff1a src/failure-function.js true false 3.4.7 \uff01\uff01 \u8bf4\u660e\u56fe 3-20 \u4e2d\u7684\u7b97\u6cd5\u53ef\u4ee5\u6b63\u786e\u7684\u8868\u793a\u8f93\u5165\u5173\u952e\u5b57\u662f\u5426\u4e3a\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002 \u56fe 3-20\uff1aKMP \u7b97\u6cd5\u5728 O(m + n) \u7684\u65f6\u95f4\u5185\u68c0\u6d4b\u5b57\u7b26\u4e32a_1a_3...a_n \u4e2d\u662f\u5426\u5305\u542b\u5355\u4e2a\u5173\u952e\u5b57 b1b2...bn s = 0; for(i = 1; i <= m; i ++){ while(s > 0 && a_i != b_s+1) s = f(s); if(a_i == b_s+1) s = s + 1; if(s == n) return \"yes\"; } return \"no\"; 3.4.8 \u5047\u8bbe\u5df2\u7ecf\u8ba1\u7b97\u5f97\u5230\u51fd\u6570 f \u4e14\u4ed6\u7684\u503c\u5b58\u50a8\u5728\u4e00\u4e2a\u4ee5 s \u4e3a\u4e0b\u6807\u7684\u6570\u5b57\u4e2d\uff0c\u8bf4\u660e\u56fe 3-20 \u4e2d\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(m + n)\u3002 \u89e3\u7b54 \u8be6\u89c1 matrix \u7684\u535a\u6587 KMP\u7b97\u6cd5\u8be6\u89e3 \u3002 3.4.9 Fibonacci \u5b57\u7b26\u4e32\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a s1 = b s2 = a \u5f53 k > 2 \u65f6\uff0c s k = s k-1 s k-2 \u4f8b\u5982\uff1as 3 = ab, s 4 = aba, s 5 = abaab s n \u7684\u957f\u5ea6\u662f\u591a\u5c11\uff1f \u6784\u9020 s 6 \u7684\u5931\u6548\u51fd\u6570\u3002 \u6784\u9020 s 7 \u7684\u5931\u6548\u51fd\u6570\u3002 \uff01\uff01 \u8bf4\u660e\u4efb\u4f55 s n \u7684\u5931\u6548\u51fd\u6570\u90fd\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\uff1af(1) = f(2) = 0\uff0c\u4e14\u5bf9\u4e8e 2 < j <= |s n |, f(j) = j - |s k-1 |\uff0c\u5176\u4e2d k \u662f\u4f7f\u5f97 |s k | <= j + 1 \u7684\u6700\u5927\u6574\u6570\u3002 \uff01\uff01 \u5728 KMP \u7b97\u6cd5\u4e2d\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u786e\u5b9a\u5173\u952e\u5b57 s k \u662f\u5426\u51fa\u73b0\u5728\u5b57\u7b26\u4e32 s k+1 \u4e2d\uff0c\u6700\u591a\u4f1a\u8fde\u7eed\u591a\u5c11\u6b21\u8c03\u7528\u5931\u6548\u51fd\u6570\uff1f \u89e3\u7b54 \u89c1 \u7ef4\u57fa\u767e\u79d1 s 6 = abaababa failure = [ 0, 0, 1, 1, 2, 3, 2, 3 ] s 7 = abaababaabaab failure = [ 0, 0, 1, 1, 2, 3, 2, 3, 4, 5, 6, 4, 5 ]","title":"3.4 \u8282\u7684\u7ec3\u4e60"},{"location":"ch03/3.4/3.4/#34","text":"","title":"3.4 \u8282\u7684\u7ec3\u4e60"},{"location":"ch03/3.4/3.4/#341","text":"\u7ed9\u51fa\u8bc6\u522b\u7ec3\u4e60 3.3.2 \u4e2d\u5404\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u6240\u63cf\u8ff0\u7684\u8bed\u8a00\u72b6\u6001\u8f6c\u6362\u56fe\u3002","title":"3.4.1"},{"location":"ch03/3.4/3.4/#_1","text":"\u89e3\u7b54\u6b65\u9aa4\uff1aNFA -> DFA -> \u6700\u5c11\u72b6\u6001\u7684 DFA\uff08\u72b6\u6001\u8f6c\u6362\u56fe\uff09 a(a|b)*a NFA: DFA: NFA DFA a b {0} A B {1,2,3,5,8} B C D {2,3,4,5,7,8, 9 } C C D {2,3,5,6,7,8} D C D \u6700\u5c11\u72b6\u6001\u7684 DFA(\u72b6\u6001\u8f6c\u6362\u56fe): \u5408\u5e76\u4e0d\u53ef\u533a\u5206\u7684\u72b6\u6001 B \u548c D ((\u03b5|a)b*)* (a|b)*a(a|b)(a|b) NFA: DFA: NFA DFA a b {0,1,2,4,7} A B C {1,2,3,4,6,7,8,9,11} B D E {1,2,4,5,6,7} C B C {1,2,3,4,6,7,8,9,10,11,13,14,16} D F G {1,2,4,5,6,7,12,13,14,16} E H I {1,2,3,4,6,7,8,9,10,11,13,14,15,16, 18 } F F G {1,2,4,5,6,7,12,13,14,16,17, 18 } G H I {1,2,3,4,6,7,8,9,11,15, 18 } H D E {1,2,4,5,6,7,17, 18 } I B C \u6700\u5c11\u72b6\u6001\u7684 DFA(\u72b6\u6001\u8f6c\u6362\u56fe): \u5408\u5e76\u4e0d\u53ef\u533a\u5206\u7684\u72b6\u6001 A \u548c C a*ba*ba*ba*","title":"\u89e3\u7b54"},{"location":"ch03/3.4/3.4/#342","text":"\u7ed9\u51fa\u8bc6\u522b\u7ec3\u4e60 3.3.5 \u4e2d\u5404\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u6240\u63cf\u8ff0\u8bed\u8a00\u7684\u72b6\u6001\u8f6c\u6362\u56fe\u3002","title":"3.4.2"},{"location":"ch03/3.4/3.4/#343","text":"\u6784\u9020\u4e0b\u5217\u4e32\u7684\u5931\u6548\u51fd\u6570\u3002 abababaab aaaaaa abbaabb","title":"3.4.3"},{"location":"ch03/3.4/3.4/#_2","text":"\u4ee3\u7801\u8be6\u89c1\uff1a src/failure-function.js [ 0, 0, 1, 2, 3, 4, 5, 1, 2 ] [ 0, 1, 2, 3, 4, 5 ] [ 0, 0, 0, 1, 1, 2, 3 ]","title":"\u89e3\u7b54"},{"location":"ch03/3.4/3.4/#344","text":"\u5bf9 s \u8fdb\u884c\u5f52\u7eb3\uff0c\u8bc1\u660e\u56fe 3-19 \u7684\u7b97\u6cd5\u6b63\u786e\u5730\u8ba1\u7b97\u51fa\u4e86\u5931\u6548\u51fd\u6570\u3002 \u56fe 3-19\uff1a\u8ba1\u7b97\u5173\u952e\u5b57 b_1b_2\u2026b_n \u7684\u5931\u6548\u51fd\u6570 01 t = 0; 02 f(1) = 0; 03 for (s = 1; s < n; s ++){ 04 while( t > 0 && b_s+1 != b_t+1) t = f(t); 05 if(b_s+1 == b_t+1){ 06 t = t + 1; 07 f(s + 1) = t; 08 }else{ 09 f(s + 1) = 0; 10 } 11 }","title":"3.4.4 \uff01"},{"location":"ch03/3.4/3.4/#_3","text":"\u5df2\u77e5 f(1) = 0 \u5728\u7b2c 1 \u6b21 for \u5faa\u73af\u65f6\uff0c\u8ba1\u7b97 f(2) \u7684\u503c\uff0c\u5f53\u7b2c5\u884c\u4ee3\u7801 b_2 == b_1 \u6210\u7acb\u65f6\uff0c\u4ee3\u7801\u8fdb\u5165\u5230\u7b2c7\u884c\u5f97\u51fa f(2) = 1\uff0c\u4e0d\u6210\u7acb\u65f6\uff0c\u5219\u4ee3\u7801\u8fdb\u5165\u7b2c9\u884c\u5f97\u51fa f(2) = 0\u3002\u663e\u7136\uff0c\u8fd9\u6b21\u5faa\u73af\u6b63\u786e\u7684\u8ba1\u7b97\u51fa\u4e86 f(2) \u3002 \u5047\u8bbe\u5728\u7b2c i-1 \u6b21\u8fdb\u5165\u5faa\u73af\u65f6\uff0c\u4e5f\u6b63\u786e\u7684\u8ba1\u7b97\u51fa\u4e86 f(i)\uff0c\u4e5f\u6709 f(i) = t (\u65e0\u8bba t \u662f\u5927\u4e8e 0 \u8fd8\u662f\u7b49\u4e8e 0) \u90a3\u4e48\u5728\u7b2c 1 \u6b21\u8fdb\u5165\u5faa\u73af\u65f6\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u8fdb\u884c\u8003\u8651\uff1a t == 0 \u8fd9\u79cd\u60c5\u51b5\u6bd4\u8f83\u7b80\u5355\uff0c\u76f4\u63a5\u4ece\u7b2c 5 \u884c\u5f00\u59cb\uff0c\u5f53 b_i+1 == b_1 \u65f6\uff0cf(i+1) = 1\uff0c\u5426\u5219 f(i+1) = 0 2. t > 0 while \u5faa\u73af\u4f1a\u4e0d\u65ad\u7f29\u5c0f t \u503c\uff0c\u8bd5\u56fe\u627e\u51fa\u6700\u5927\u53ef\u80fd\u7684\u4f7f\u5f97 b_i+1 == b_t+1 \u6210\u7acb\u7684 t \u503c\uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u8fdb\u5165\u7b2c 5 \u884c\u6267\u884c\uff0c\u5f97\u5230 f(i+1) = t+1\uff1b\u6216\u8005\u76f4\u5230 t == 0 \u65f6\u4e5f\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8df3\u51fa\u5faa\u73af\uff0c\u8fd9\u65f6\u8fdb\u5165\u7b2c 5 \u884c\u6267\u884c\uff0c\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u524d\u4e00\u79cd\u60c5\u51b5\u3002","title":"\u8bc1\u660e"},{"location":"ch03/3.4/3.4/#345","text":"\u8bf4\u660e\u56fe 3-19 \u4e2d\u7684\u7b2c 4 \u884c\u7684\u590d\u5236\u8bed\u53e5 t = f(t) \u6700\u591a\u88ab\u6267\u884c n \u6b21\u3002\u8fdb\u800c\u8bf4\u660e\u6574\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u5176\u4e2d n \u662f\u5173\u952e\u5b57\u957f\u5ea6\u3002","title":"3.4.5 \uff01\uff01"},{"location":"ch03/3.4/3.4/#_4","text":"\u8be6\u89c1 matrix \u7684\u535a\u6587 KMP\u7b97\u6cd5\u8be6\u89e3 \u3002","title":"\u89e3\u7b54"},{"location":"ch03/3.4/3.4/#346","text":"\u5e94\u7528 KMP \u7b97\u6cd5\u5224\u65ad\u5173\u952e\u5b57 ababaa \u662f\u5426\u4e3a\u4e0b\u9762\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\uff1a abababaab abababbaa","title":"3.4.6"},{"location":"ch03/3.4/3.4/#_5","text":"\u4ee3\u7801\u8be6\u89c1\uff1a src/failure-function.js true false","title":"\u89e3\u7b54"},{"location":"ch03/3.4/3.4/#347","text":"\u8bf4\u660e\u56fe 3-20 \u4e2d\u7684\u7b97\u6cd5\u53ef\u4ee5\u6b63\u786e\u7684\u8868\u793a\u8f93\u5165\u5173\u952e\u5b57\u662f\u5426\u4e3a\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002 \u56fe 3-20\uff1aKMP \u7b97\u6cd5\u5728 O(m + n) \u7684\u65f6\u95f4\u5185\u68c0\u6d4b\u5b57\u7b26\u4e32a_1a_3...a_n \u4e2d\u662f\u5426\u5305\u542b\u5355\u4e2a\u5173\u952e\u5b57 b1b2...bn s = 0; for(i = 1; i <= m; i ++){ while(s > 0 && a_i != b_s+1) s = f(s); if(a_i == b_s+1) s = s + 1; if(s == n) return \"yes\"; } return \"no\";","title":"3.4.7 \uff01\uff01"},{"location":"ch03/3.4/3.4/#348","text":"\u5047\u8bbe\u5df2\u7ecf\u8ba1\u7b97\u5f97\u5230\u51fd\u6570 f \u4e14\u4ed6\u7684\u503c\u5b58\u50a8\u5728\u4e00\u4e2a\u4ee5 s \u4e3a\u4e0b\u6807\u7684\u6570\u5b57\u4e2d\uff0c\u8bf4\u660e\u56fe 3-20 \u4e2d\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(m + n)\u3002","title":"3.4.8"},{"location":"ch03/3.4/3.4/#_6","text":"\u8be6\u89c1 matrix \u7684\u535a\u6587 KMP\u7b97\u6cd5\u8be6\u89e3 \u3002","title":"\u89e3\u7b54"},{"location":"ch03/3.4/3.4/#349","text":"Fibonacci \u5b57\u7b26\u4e32\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a s1 = b s2 = a \u5f53 k > 2 \u65f6\uff0c s k = s k-1 s k-2 \u4f8b\u5982\uff1as 3 = ab, s 4 = aba, s 5 = abaab s n \u7684\u957f\u5ea6\u662f\u591a\u5c11\uff1f \u6784\u9020 s 6 \u7684\u5931\u6548\u51fd\u6570\u3002 \u6784\u9020 s 7 \u7684\u5931\u6548\u51fd\u6570\u3002 \uff01\uff01 \u8bf4\u660e\u4efb\u4f55 s n \u7684\u5931\u6548\u51fd\u6570\u90fd\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\uff1af(1) = f(2) = 0\uff0c\u4e14\u5bf9\u4e8e 2 < j <= |s n |, f(j) = j - |s k-1 |\uff0c\u5176\u4e2d k \u662f\u4f7f\u5f97 |s k | <= j + 1 \u7684\u6700\u5927\u6574\u6570\u3002 \uff01\uff01 \u5728 KMP \u7b97\u6cd5\u4e2d\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u786e\u5b9a\u5173\u952e\u5b57 s k \u662f\u5426\u51fa\u73b0\u5728\u5b57\u7b26\u4e32 s k+1 \u4e2d\uff0c\u6700\u591a\u4f1a\u8fde\u7eed\u591a\u5c11\u6b21\u8c03\u7528\u5931\u6548\u51fd\u6570\uff1f","title":"3.4.9"},{"location":"ch03/3.4/3.4/#_7","text":"\u89c1 \u7ef4\u57fa\u767e\u79d1 s 6 = abaababa failure = [ 0, 0, 1, 1, 2, 3, 2, 3 ] s 7 = abaababaabaab failure = [ 0, 0, 1, 1, 2, 3, 2, 3, 4, 5, 6, 4, 5 ]","title":"\u89e3\u7b54"},{"location":"ch03/3.5/3.5/","text":"Exercises for Section 3.5 3.5.1 Describe how to make the following modifications to the Lex program of Fig. 3.23: Add the keyword while. Change the comparison operators to be the C operators of that kind. Allow the underscore ( _ ) as an additional letter. ! Add a new pattern with token STRING. The pattern consists of a double\u00ad quote ( \" ) , any string of characters and a final double-quote. However, if a double-quote appears in the string, it must be escaped by preceding it with a backslash () , and therefore a backslash in the string must be represented by two backslashes. The lexical value, which is the string without the surrounding double-quotes, and with backslashes used to es.,. cape a character removed. Strings are to be installed in a table of strings. source 3.5.2 Write a Lex program that copies a file, replacing each non\u00ad empty sequence of white space by a single blank 3.5.3 Write a Lex program that copies a C program, replacing each instance of the keyword f loat by double.\u3002 3.5.4 \uff01 Write a Lex program that converts a file to \"Pig latin.\" Specifically, assume the file is a sequence of words (groups . of letters) separated by whitespace. Every time you encounter a word: If the first letter is a consonant, move it to the end of the word and then add ay! If the first letter is a vowel, just add ay to the end of the word. All nonletters are copied int act to the output. source 3.5.5 \uff01 In SQL, keywords and identifiers are case-insensitive. Write a Lex program that recognizes the keywords SELECT, FROM, and WHERE (in any combination of capital and lower-case letters) , and token ID, which for the purposes of this exercise you may take to be any sequence of letters and digits, beginning with a letter. You need not install identifiers in a symbol table, but tell how the \"install\" function would differ from that described for case-sensitive identifiers as in Fig. 3.23. source","title":"Exercises for Section 3.5"},{"location":"ch03/3.5/3.5/#exercises-for-section-35","text":"","title":"Exercises for Section 3.5"},{"location":"ch03/3.5/3.5/#351","text":"Describe how to make the following modifications to the Lex program of Fig. 3.23: Add the keyword while. Change the comparison operators to be the C operators of that kind. Allow the underscore ( _ ) as an additional letter. ! Add a new pattern with token STRING. The pattern consists of a double\u00ad quote ( \" ) , any string of characters and a final double-quote. However, if a double-quote appears in the string, it must be escaped by preceding it with a backslash () , and therefore a backslash in the string must be represented by two backslashes. The lexical value, which is the string without the surrounding double-quotes, and with backslashes used to es.,. cape a character removed. Strings are to be installed in a table of strings. source","title":"3.5.1"},{"location":"ch03/3.5/3.5/#352","text":"Write a Lex program that copies a file, replacing each non\u00ad empty sequence of white space by a single blank","title":"3.5.2"},{"location":"ch03/3.5/3.5/#353","text":"Write a Lex program that copies a C program, replacing each instance of the keyword f loat by double.\u3002","title":"3.5.3"},{"location":"ch03/3.5/3.5/#354","text":"Write a Lex program that converts a file to \"Pig latin.\" Specifically, assume the file is a sequence of words (groups . of letters) separated by whitespace. Every time you encounter a word: If the first letter is a consonant, move it to the end of the word and then add ay! If the first letter is a vowel, just add ay to the end of the word. All nonletters are copied int act to the output. source","title":"3.5.4 \uff01"},{"location":"ch03/3.5/3.5/#355","text":"In SQL, keywords and identifiers are case-insensitive. Write a Lex program that recognizes the keywords SELECT, FROM, and WHERE (in any combination of capital and lower-case letters) , and token ID, which for the purposes of this exercise you may take to be any sequence of letters and digits, beginning with a letter. You need not install identifiers in a symbol table, but tell how the \"install\" function would differ from that described for case-sensitive identifiers as in Fig. 3.23. source","title":"3.5.5 \uff01"},{"location":"ch03/3.6/3.6/","text":"3.6 Exercises for Section 3.6 3.6.1 ! Figure 3.19 in the exercises of Section 3.4 computes the failure function for the KMP algorithm. Show how, given that failure function, we can construct, from a keyword b1b2...bn an n + 1-state DFA that recognizes .*b1b2...bn, where the dot stands for \"any character.\" Moreover, this DFA can be constructed in O(n) time. Answer Take the string \"abbaabb\" in exercise 3.4.3-3 as example, the failure function is: n : 1, 2, 3, 4, 5, 6, 7 f(n): 0, 0, 0, 1, 1, 2, 3 The DFA is\uff1a Pseudocode of building the DFA\uff1a for (i = 0; i< n; i ++) { move[s[i], c] = { if ( c == b1b2\u2026bn[i] ) { goto s[i+1] } else { goto s[f(i)] } } } It is obviously that with the known f(n), this DFA can be constructed in O(n) time. 3.6.2 Design finite automata (deterministic or nondeterministic) for each of the languages of Exercise 3.3.5. 3.6.3 For the NFA of Fig. 3.29, indicate all the paths labeled aabb. Does the NFA accept aabb? Answer (0) -a-> (0) -a-> (0) -b-> (0) -b-> (0) (0) -a-> (0) -a-> (1) -b-> (1) -b-> (1) (0) -a-> (1) -a-> (1) -b-> (1) -b-> (1) (0) -a-> (1) -a-> (2) -b-> (2) -b-> (2) (0) -a-> (1) -a-> (2) -b-> (2) -b-> ((3)) (0) -a-> (1) -a-> (2) -b-> (2) -\u03b5-> (0) -b-> (0) (0) -a-> (1) -a-> (2) -\u03b5-> (0) -b-> (0) -b-> (0) This NFA accepts \"aabb\" 3.6.4 Repeat Exercise 3.6.3 for the NFA of Fig. 3.30. 3.6.5 Give the transition tables for the NFA of: Exercise 3.6.3. Exercise 3.6.4. Figure 3.26. Answer Table 1 STATE a b \u03b5 0 {0,1} {0} \u2205 1 {1,2} {1} \u2205 2 {2} {2,3} {0} 3 \u2205 \u2205 \u2205 Table 2 STATE a b \u03b5 0 {1} \u2205 {3} 1 \u2205 {2} {0} 2 \u2205 {3} {1} 3 {0} \u2205 {2} Table 3 STATE a b \u03b5 0 \u2205 \u2205 {1,3} 1 {2} \u2205 \u2205 2 {2} \u2205 \u2205 3 \u2205 {4} \u2205 4 \u2205 {4} \u2205 Table 4 header body foot header body foot header body","title":"3.6 Exercises for Section 3.6"},{"location":"ch03/3.6/3.6/#36-exercises-for-section-36","text":"","title":"3.6 Exercises for Section 3.6"},{"location":"ch03/3.6/3.6/#361","text":"Figure 3.19 in the exercises of Section 3.4 computes the failure function for the KMP algorithm. Show how, given that failure function, we can construct, from a keyword b1b2...bn an n + 1-state DFA that recognizes .*b1b2...bn, where the dot stands for \"any character.\" Moreover, this DFA can be constructed in O(n) time.","title":"3.6.1 !"},{"location":"ch03/3.6/3.6/#answer","text":"Take the string \"abbaabb\" in exercise 3.4.3-3 as example, the failure function is: n : 1, 2, 3, 4, 5, 6, 7 f(n): 0, 0, 0, 1, 1, 2, 3 The DFA is\uff1a Pseudocode of building the DFA\uff1a for (i = 0; i< n; i ++) { move[s[i], c] = { if ( c == b1b2\u2026bn[i] ) { goto s[i+1] } else { goto s[f(i)] } } } It is obviously that with the known f(n), this DFA can be constructed in O(n) time.","title":"Answer"},{"location":"ch03/3.6/3.6/#362","text":"Design finite automata (deterministic or nondeterministic) for each of the languages of Exercise 3.3.5.","title":"3.6.2"},{"location":"ch03/3.6/3.6/#363","text":"For the NFA of Fig. 3.29, indicate all the paths labeled aabb. Does the NFA accept aabb?","title":"3.6.3"},{"location":"ch03/3.6/3.6/#answer_1","text":"(0) -a-> (0) -a-> (0) -b-> (0) -b-> (0) (0) -a-> (0) -a-> (1) -b-> (1) -b-> (1) (0) -a-> (1) -a-> (1) -b-> (1) -b-> (1) (0) -a-> (1) -a-> (2) -b-> (2) -b-> (2) (0) -a-> (1) -a-> (2) -b-> (2) -b-> ((3)) (0) -a-> (1) -a-> (2) -b-> (2) -\u03b5-> (0) -b-> (0) (0) -a-> (1) -a-> (2) -\u03b5-> (0) -b-> (0) -b-> (0) This NFA accepts \"aabb\"","title":"Answer"},{"location":"ch03/3.6/3.6/#364","text":"Repeat Exercise 3.6.3 for the NFA of Fig. 3.30.","title":"3.6.4"},{"location":"ch03/3.6/3.6/#365","text":"Give the transition tables for the NFA of: Exercise 3.6.3. Exercise 3.6.4. Figure 3.26.","title":"3.6.5"},{"location":"ch03/3.6/3.6/#answer_2","text":"Table 1 STATE a b \u03b5 0 {0,1} {0} \u2205 1 {1,2} {1} \u2205 2 {2} {2,3} {0} 3 \u2205 \u2205 \u2205 Table 2 STATE a b \u03b5 0 {1} \u2205 {3} 1 \u2205 {2} {0} 2 \u2205 {3} {1} 3 {0} \u2205 {2} Table 3 STATE a b \u03b5 0 \u2205 \u2205 {1,3} 1 {2} \u2205 \u2205 2 {2} \u2205 \u2205 3 \u2205 {4} \u2205 4 \u2205 {4} \u2205 Table 4 header body foot header body foot header body","title":"Answer"},{"location":"ch03/3.7/3.7/","text":"Exercises for Section 3.7 3.7.1 Convert to DFA's the NFA's of: Fig. 3.26. Fig. 3.29. Fig. 3.30. Answer 1\u3001 Transition table NFA State DFA State a b {0,1,3} A B C {2} B B \u2205 {4} C \u2205 C DFA 2\u3001 Transition table NFA State DFA State a b {0} A B A {0,1} B C B {0,1,2} C C D {0,2,3} D C D DFA 3\u3001 Transition table NFA State DFA State a b {0,1,2,3} A A A DFA 3.7.2 use Algorithm 3.22 to simulate the NFA's: Fig. 3.29. Fig. 3.30. on input aabb. Answer -start->{0}-a->{0,1}-a->{0,1,2}-b->{0,2,3}-b->{0,2,3} -start->{0,1,2,3}-a->{0,1,2,3}-a->{0,1,2,3}-b->{0,1,2,3}-b->{0,1,2,3} 3.7.3 Convert the following regular expressions to deterministic finite automata, using algorithms 3.23 and 3.20: (a|b)* (a*|b*)* ((\u03b5|a)|b*)* (a|b)*abb(a|b)* Answer 1\u3001 NFA Transition table NFA State DFA State a b {0,1,2,3,7} A B C {1,2,3,4,6,7} B B C {1,2,3,5,6,7} C B C DFA 2\u3001 NFA Transition table NFA State DFA State a b {0,1,2,3,4,5,8,9,10,11} A B C {1,2,3,4,5,6,8,9,10,11} B B C {1,2,3,4,5,7,8,9,10,11} C B C DFA 3\u3001 NFA Transition table NFA State DFA State a b {0,1,2,3,4,6,7,9,10} A B C {1,2,3,4,5,6,7,9,10} B B C {1,2,3,4,6,7,8,9,10} C B C DFA 4\u3001 NFA Transition table NFA State DFA State a b {0,1,2,4,7} A B C {1,2,3,4,6,7,8} B B D {1,2,4,5,6,7} C B C {1,2,4,5,6,7,9} D B E {1,2,4,5,6,7,10,11,12,14,17} E F G {1,2,3,4,6,7,8,11,12,13,14,16,17} F F H {1,2,4,5,6,7,11,12,13,15,16,17} G F G {1,2,4,5,6,7,9,11,12,14,15,16,17} H F I {1,2,4,5,6,7,10,11,12,14,15,16,17} I F G DFA","title":"Exercises for Section 3.7"},{"location":"ch03/3.7/3.7/#exercises-for-section-37","text":"","title":"Exercises for Section 3.7"},{"location":"ch03/3.7/3.7/#371","text":"Convert to DFA's the NFA's of: Fig. 3.26. Fig. 3.29. Fig. 3.30.","title":"3.7.1"},{"location":"ch03/3.7/3.7/#answer","text":"1\u3001 Transition table NFA State DFA State a b {0,1,3} A B C {2} B B \u2205 {4} C \u2205 C DFA 2\u3001 Transition table NFA State DFA State a b {0} A B A {0,1} B C B {0,1,2} C C D {0,2,3} D C D DFA 3\u3001 Transition table NFA State DFA State a b {0,1,2,3} A A A DFA","title":"Answer"},{"location":"ch03/3.7/3.7/#372","text":"use Algorithm 3.22 to simulate the NFA's: Fig. 3.29. Fig. 3.30. on input aabb.","title":"3.7.2"},{"location":"ch03/3.7/3.7/#answer_1","text":"-start->{0}-a->{0,1}-a->{0,1,2}-b->{0,2,3}-b->{0,2,3} -start->{0,1,2,3}-a->{0,1,2,3}-a->{0,1,2,3}-b->{0,1,2,3}-b->{0,1,2,3}","title":"Answer"},{"location":"ch03/3.7/3.7/#373","text":"Convert the following regular expressions to deterministic finite automata, using algorithms 3.23 and 3.20: (a|b)* (a*|b*)* ((\u03b5|a)|b*)* (a|b)*abb(a|b)*","title":"3.7.3"},{"location":"ch03/3.7/3.7/#answer_2","text":"1\u3001 NFA Transition table NFA State DFA State a b {0,1,2,3,7} A B C {1,2,3,4,6,7} B B C {1,2,3,5,6,7} C B C DFA 2\u3001 NFA Transition table NFA State DFA State a b {0,1,2,3,4,5,8,9,10,11} A B C {1,2,3,4,5,6,8,9,10,11} B B C {1,2,3,4,5,7,8,9,10,11} C B C DFA 3\u3001 NFA Transition table NFA State DFA State a b {0,1,2,3,4,6,7,9,10} A B C {1,2,3,4,5,6,7,9,10} B B C {1,2,3,4,6,7,8,9,10} C B C DFA 4\u3001 NFA Transition table NFA State DFA State a b {0,1,2,4,7} A B C {1,2,3,4,6,7,8} B B D {1,2,4,5,6,7} C B C {1,2,4,5,6,7,9} D B E {1,2,4,5,6,7,10,11,12,14,17} E F G {1,2,3,4,6,7,8,11,12,13,14,16,17} F F H {1,2,4,5,6,7,11,12,13,15,16,17} G F G {1,2,4,5,6,7,9,11,12,14,15,16,17} H F I {1,2,4,5,6,7,10,11,12,14,15,16,17} I F G DFA","title":"Answer"},{"location":"ch03/3.8/3.8/","text":"Exercises for Section 3.8 3.8.1 Suppose we have two tokens: (1) the keyword if, and (2) id\u00adentifiers, which are strings of letters other than if. Show: The NFA for these tokens, and The DFA for these tokens. Answer NFA NOTE: this NFA has potential conflict, we can decide the matched lexeme by 1. take the longest 2. take the first listed. DFA 3.8.2 Repeat Exercise 3.8.1 for tokens consisting of (1) the keyword while, (2) the keyword when, and (3) identifiers consisting of strings of letters and digits, beginning with a letter. Answer NFA DFA bother to paint 3.8.3 ! Suppose we were to revise the definition of a DFA to allow zero or one transition out of each state on each input symbol (rather than exactly one such transition, as in the standard DFA definition). Some regular expressions would then have smaller \"DFA's\" than they do under the standard definition of a DFA. Give an example of one such regular expression. Answer Take the language defined by regular expression \"ab\" as the example, assume that the set of input symbols is {a, b} Standard DFA Revised DFA Obviously, the revised DFA is smaller than the standard DFA. 3.8.4 !! Design an algorithm to recognize Lex-lookahead patterns of the form rl/r2, where rl and r2 are regular expressions. Show how your algo\u00adrithm works on the following inputs: (abcd|abc)/d (a|ab)/ba aa*/a*","title":"Exercises for Section 3.8"},{"location":"ch03/3.8/3.8/#exercises-for-section-38","text":"","title":"Exercises for Section 3.8"},{"location":"ch03/3.8/3.8/#381","text":"Suppose we have two tokens: (1) the keyword if, and (2) id\u00adentifiers, which are strings of letters other than if. Show: The NFA for these tokens, and The DFA for these tokens.","title":"3.8.1"},{"location":"ch03/3.8/3.8/#answer","text":"NFA NOTE: this NFA has potential conflict, we can decide the matched lexeme by 1. take the longest 2. take the first listed. DFA","title":"Answer"},{"location":"ch03/3.8/3.8/#382","text":"Repeat Exercise 3.8.1 for tokens consisting of (1) the keyword while, (2) the keyword when, and (3) identifiers consisting of strings of letters and digits, beginning with a letter.","title":"3.8.2"},{"location":"ch03/3.8/3.8/#answer_1","text":"NFA DFA bother to paint","title":"Answer"},{"location":"ch03/3.8/3.8/#383","text":"Suppose we were to revise the definition of a DFA to allow zero or one transition out of each state on each input symbol (rather than exactly one such transition, as in the standard DFA definition). Some regular expressions would then have smaller \"DFA's\" than they do under the standard definition of a DFA. Give an example of one such regular expression.","title":"3.8.3 !"},{"location":"ch03/3.8/3.8/#answer_2","text":"Take the language defined by regular expression \"ab\" as the example, assume that the set of input symbols is {a, b} Standard DFA Revised DFA Obviously, the revised DFA is smaller than the standard DFA.","title":"Answer"},{"location":"ch03/3.8/3.8/#384","text":"Design an algorithm to recognize Lex-lookahead patterns of the form rl/r2, where rl and r2 are regular expressions. Show how your algo\u00adrithm works on the following inputs: (abcd|abc)/d (a|ab)/ba aa*/a*","title":"3.8.4 !!"},{"location":"ch03/3.9/3.9/","text":"Exercises for Section 3.9 3.9.1 Extend the table of Fig. 3.58 to include the operators \uff1f + Answer node n nullable(n) firstpos(n) n = c_1 ? true firstpos(c_1) n = c_1 + nullable(c_1) firstpos(c_1) 3.9.2 Use Algorithm 3.36 to convert the regular expressions of Ex\u00adercise 3.7.3 directly to deterministic finite automata. Answer (a|b)* Syntax tree firstpos and lastpos for nodes in the syntax tree The function followpos node n followpos(n) 1 {1, 2, 3} 2 {1, 2, 3} 3 \u2205 Steps The value of firstpos for the root of the tree is {1, 2, 3}, so this set is the start state of D. Call this set of states A. We compute Dtran[A, a] and Dtran[A, b]. Among the positions of A, 1 correspond to a, while 2 correspond to b. Thus Dtran[A, a] = followpos(1) = {1, 2, 3}\uff0c Dtran[A, b] = followpos(2) = {1, 2, 3}. Both the results are set A, so dose not have new state, end the computation. DFA (a*|b*)* ((\u03b5|a)|b*)* (a|b)*abb(a|b)* 3.9.3 ! We can prove that two regular expressions are equivalent by showing that their minimum-state DFA's are the same up to renaming of states. Show in this way that the following regular expressions: (a|b)*, (a*|b*)*, and ((\u03b5|a)b*)* are all equivalent. Note: You may have constructed the DFA's for these expressions in response to Exercise 3.7.3. Answer Refer to the answers of 3.7.3 and 3.9.2-1 3.9.4 ! Construct the minimum-state DFA's for the following regular expressions: (a|b)*a(a|b) (a|b)*a(a|b)(a|b) (a|b)*a(a|b)(a|b)(a|b) Do you see a pattern? 3.9.5 !! To make formal the informal claim of Example 3.25, show that any deterministic finite automaton for the regular expression (a|b)*a(a|b)...(a|b) where (a|b) appears n - 1 times at the end, must have at least 2n states. Hint: Observe the pattern in Exercise 3.9.4. What condition regarding the history of inputs does each state represent?","title":"Exercises for Section 3.9"},{"location":"ch03/3.9/3.9/#exercises-for-section-39","text":"","title":"Exercises for Section 3.9"},{"location":"ch03/3.9/3.9/#391","text":"Extend the table of Fig. 3.58 to include the operators \uff1f +","title":"3.9.1"},{"location":"ch03/3.9/3.9/#answer","text":"node n nullable(n) firstpos(n) n = c_1 ? true firstpos(c_1) n = c_1 + nullable(c_1) firstpos(c_1)","title":"Answer"},{"location":"ch03/3.9/3.9/#392","text":"Use Algorithm 3.36 to convert the regular expressions of Ex\u00adercise 3.7.3 directly to deterministic finite automata.","title":"3.9.2"},{"location":"ch03/3.9/3.9/#answer_1","text":"(a|b)* Syntax tree firstpos and lastpos for nodes in the syntax tree The function followpos node n followpos(n) 1 {1, 2, 3} 2 {1, 2, 3} 3 \u2205 Steps The value of firstpos for the root of the tree is {1, 2, 3}, so this set is the start state of D. Call this set of states A. We compute Dtran[A, a] and Dtran[A, b]. Among the positions of A, 1 correspond to a, while 2 correspond to b. Thus Dtran[A, a] = followpos(1) = {1, 2, 3}\uff0c Dtran[A, b] = followpos(2) = {1, 2, 3}. Both the results are set A, so dose not have new state, end the computation. DFA (a*|b*)* ((\u03b5|a)|b*)* (a|b)*abb(a|b)*","title":"Answer"},{"location":"ch03/3.9/3.9/#393","text":"We can prove that two regular expressions are equivalent by showing that their minimum-state DFA's are the same up to renaming of states. Show in this way that the following regular expressions: (a|b)*, (a*|b*)*, and ((\u03b5|a)b*)* are all equivalent. Note: You may have constructed the DFA's for these expressions in response to Exercise 3.7.3.","title":"3.9.3 !"},{"location":"ch03/3.9/3.9/#answer_2","text":"Refer to the answers of 3.7.3 and 3.9.2-1","title":"Answer"},{"location":"ch03/3.9/3.9/#394","text":"Construct the minimum-state DFA's for the following regular expressions: (a|b)*a(a|b) (a|b)*a(a|b)(a|b) (a|b)*a(a|b)(a|b)(a|b) Do you see a pattern?","title":"3.9.4 !"},{"location":"ch03/3.9/3.9/#395","text":"To make formal the informal claim of Example 3.25, show that any deterministic finite automaton for the regular expression (a|b)*a(a|b)...(a|b) where (a|b) appears n - 1 times at the end, must have at least 2n states. Hint: Observe the pattern in Exercise 3.9.4. What condition regarding the history of inputs does each state represent?","title":"3.9.5 !!"},{"location":"ch03/key-point/key-point/","text":"\u7b2c3\u7ae0\u8981\u70b9 1. \u4ece NFA\u3001DFA \u5230\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u8f6c\u6362 http://courses.engr.illinois.edu/cs373/sp2009/lectures/lect_08.pdf 2. KMP \u53ca\u5176\u6269\u5c55\u7b97\u6cd5(p87) \u53c2\u8003 matrix \u7684\u535a\u6587 KMP\u7b97\u6cd5\u8be6\u89e3 \u3002\u6587\u4e2d\u63d0\u4f9b\u4e86\u4f8b\u5b50\uff0c\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u3002 3. \u5b57\u7b26\u4e32\u5904\u7406\u7b97\u6cd5\u7684\u6548\u7387(p103) \u5bf9\u4e8e\u6bcf\u4e2a\u6784\u9020\u5f97\u5230\u7684 DFA \u72b6\u6001\uff0c\u6211\u4eec\u6700\u591a\u5fc5\u987b\u6784\u9020 4|r| \u4e2a\u65b0\u72b6\u6001 4. DFA \u6a21\u62df\u4e2d\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u7684\u6743\u8861(p116) \u56fe 3-66 \u8868\u793a\u7684\u7b97\u6cd5 5. \u6700\u5c0f\u5316\u4e00\u4e2a DFA \u7684\u72b6\u6001\u6570\u91cf\uff08p115\uff09 \u6ce8\u610f\u56fe 3-64 \u7684\u7b2c 4 \u884c\uff1a\u201c\u72b6\u6001 s \u548c t \u5728 a \u4e0a\u7684\u8f6c\u6362\u90fd\u5230\u8fbe \u03a0 \u4e2d\u7684\u540c\u4e00\u7ec4\u201d\uff0c\u800c\u4e0d\u662f\u5230\u8fbe\u540c\u4e00\u4e2a\u72b6\u6001\u3002\u5982\u679c\u901a\u8fc7\u662f\u5426\u5230\u8fbe\u540c\u4e00\u4e2a\u72b6\u6001\u6765\u5224\u5b9a\uff0c\u90a3\u4e48\u5982\u679c s \u548c t \u5728 a \u4e0a\u7684\u8f6c\u6362\u5230\u4e86\u4e24\u4e2a\u4e0d\u540c\u4f46\u4e0d\u80fd\u533a\u5206\u7684\u72b6\u6001\u65f6\uff0c\u5c31\u4f1a\u8ba4\u4e3a s \u548c t \u662f\u53ef\u533a\u5206\u7684\u3002","title":"\u7b2c3\u7ae0\u8981\u70b9"},{"location":"ch03/key-point/key-point/#3","text":"","title":"\u7b2c3\u7ae0\u8981\u70b9"},{"location":"ch03/key-point/key-point/#1-nfadfa","text":"http://courses.engr.illinois.edu/cs373/sp2009/lectures/lect_08.pdf","title":"1. \u4ece NFA\u3001DFA \u5230\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u8f6c\u6362"},{"location":"ch03/key-point/key-point/#2-kmp-p87","text":"\u53c2\u8003 matrix \u7684\u535a\u6587 KMP\u7b97\u6cd5\u8be6\u89e3 \u3002\u6587\u4e2d\u63d0\u4f9b\u4e86\u4f8b\u5b50\uff0c\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u3002","title":"2. KMP \u53ca\u5176\u6269\u5c55\u7b97\u6cd5(p87)"},{"location":"ch03/key-point/key-point/#3-p103","text":"\u5bf9\u4e8e\u6bcf\u4e2a\u6784\u9020\u5f97\u5230\u7684 DFA \u72b6\u6001\uff0c\u6211\u4eec\u6700\u591a\u5fc5\u987b\u6784\u9020 4|r| \u4e2a\u65b0\u72b6\u6001","title":"3. \u5b57\u7b26\u4e32\u5904\u7406\u7b97\u6cd5\u7684\u6548\u7387(p103)"},{"location":"ch03/key-point/key-point/#4-dfa-p116","text":"\u56fe 3-66 \u8868\u793a\u7684\u7b97\u6cd5","title":"4. DFA \u6a21\u62df\u4e2d\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u7684\u6743\u8861(p116)"},{"location":"ch03/key-point/key-point/#5-dfa-p115","text":"\u6ce8\u610f\u56fe 3-64 \u7684\u7b2c 4 \u884c\uff1a\u201c\u72b6\u6001 s \u548c t \u5728 a \u4e0a\u7684\u8f6c\u6362\u90fd\u5230\u8fbe \u03a0 \u4e2d\u7684\u540c\u4e00\u7ec4\u201d\uff0c\u800c\u4e0d\u662f\u5230\u8fbe\u540c\u4e00\u4e2a\u72b6\u6001\u3002\u5982\u679c\u901a\u8fc7\u662f\u5426\u5230\u8fbe\u540c\u4e00\u4e2a\u72b6\u6001\u6765\u5224\u5b9a\uff0c\u90a3\u4e48\u5982\u679c s \u548c t \u5728 a \u4e0a\u7684\u8f6c\u6362\u5230\u4e86\u4e24\u4e2a\u4e0d\u540c\u4f46\u4e0d\u80fd\u533a\u5206\u7684\u72b6\u6001\u65f6\uff0c\u5c31\u4f1a\u8ba4\u4e3a s \u548c t \u662f\u53ef\u533a\u5206\u7684\u3002","title":"5. \u6700\u5c0f\u5316\u4e00\u4e2a DFA \u7684\u72b6\u6001\u6570\u91cf\uff08p115\uff09"},{"location":"ch04/4.2/4.2/","text":"Exercises for Section 4.2 4.2.1 Consider the context-free grammar: S -> S S + | S S * | a and the string aa + a*. Give a leftmost derivation for the string. Give a rightmost derivation for the string. Give a parse tree for the string. ! Is the grammar ambiguous or unambiguous? Justify your answer. ! Describe the language generated by this grammar. Answer S =lm=> SS* => SS+S* => aS+S* => aa+S* => aa+a* S =rm=> SS* => Sa* => SS+a* => Sa+a* => aa+a* 3. Unambiguous The set of all postfix expressions consist of addition and multiplication 4.2.2 Repeat Exercise 4 . 2 . 1 for each of the following grammars and strings: S -> 0 S 1 | 0 1 with string 00011l. S -> + S S | * S S | a with string + * aaa. ! S -> S (S) S | \u03b5 with string (()()) ! S -> S + S | S S | (S) | S * | a with string (a+a)*a ! S -> (L) | a \u4ee5\u53ca L -> L, S | S with string ((a,a),a,(a)) !! S -> a S b S | b S a S | \u03b5 with string aabbab The following grammar for boolean expressions: bexpr -> bexpr or bterm | bterm bterm -> bterm and bfactor | bfactor bfactor -> not bfactor | (bexpr) | true | false Answer S =lm=> 0S1 => 00S11 => 000111 S =rm=> 0S1 => 00S11 => 000111 Omit Unambiguous The set of all strings of 0s and followed by an equal number of 1s 2\u3001 S =lm=> +SS => +*SSS => +*aSS => +*aaS => +*aaa S =rm=> +SS => +Sa => +*SSa => +*Saa => +*aaa Omit Unambiguous The set of all prefix expressions consist of addition and multiplication. 3\u3001 S =lm=> S(S)S => (S)S => (S(S)S)S => ((S)S)S => (()S)S => (()S(S)S)S => (()(S)S)S => (()()S)S => (()())S => (()()) S =rm=> S(S)S => S(S) => S(S(S)S) => S(S(S)) => S(S()) => S(S(S)S()) => S(S(S)()) => S(S()()) => S(()()) => (()()) Omit Ambiguous The set of all strings of symmetrical parentheses 4\u3001 S =lm=> SS => S*S => (S)*S => (S+S)*S => (a+S)*S => (a+a)*S => (a+a)*a S =rm=> SS => Sa => S*a => (S)*a => (S+S)*a => (S+a)*a => (a+a)*a Omit Ambiguous The set of all string of plus, mupplication, 'a' and symmetrical parentheses, and plus is not the beginning and end of the position, multiplication is not the beginning of the position 5\u3001 S =lm=> (L) => (L, S) => (L, S, S) => ((S), S, S) => ((L), S, S) => ((L, S), S, S) => ((S, S), S, S) => ((a, S), S, S) => ((a, a), S, S) => ((a, a), a, S) => ((a, a), a, (L)) => ((a, a), a, (S)) => ((a, a), a, (a)) S =rm=> (L) => (L, S) => (L, (L)) => (L, (a)) => (L, S, (a)) => (L, a, (a)) => (S, a, (a)) => ((L), a, (a)) => ((L, S), a, (a)) => ((S, S), a, (a)) => ((S, a), a, (a)) => ((a, a), a, (a)) Omit Unambiguous Something like tuple in Python 6\u3001 S =lm=> aSbS => aaSbSbS => aabSbS => aabbS => aabbaSbS => aabbabS => aabbab S =rm=> aSbS => aSbaSbS => aSbaSb => aSbab => aaSbSbab => aaSbbab => aabbab Omit Ambiguous The set of all strings of 'a's and 'b's of the equal number of 'a's and 'b's 7\u3001 Unambiguous, boolean expression 4.2.3 Design grammars for the following languages: The set of all strings of 0s and 1s such that every 0 is immediately followed by at least one 1. ! The set of all strings of 0s and 1s that are palindromes; that is, the string reads the same backward as forward. ! The set of all strings of 0s and 1s with an equal number of 0s and 1s. !! The set of all strings of 0s and 1s with an unequal number of 0s and 1s. ! The set of all strings of 0s and as in which 011 does not appear as a substring. !! The set of all strings of 0s and 1s of the form xy, where x<>y and x and y are of the same length. Answer 1\u3001 S -> (0?1)* 2\u3001 S -> 0S0 | 1S1 | 0 | 1 | \u03b5 3\u3001 S -> 0S1S | 1S0S | \u03b5 5\u3001 S -> 1*(0+1?)* 4.2.4 There is an extended grammar notation in common use. In this notation, square and curly braces in production bodies are metasymbols (like -> or |) with the following meanings: Square braces around a grammar symbol or symbols denotes that these constructs are optional. Thus, production A -> X[Y]Z has the same effect as the two productions A -> XYZ and A -> XZ. Curly braces around a grammar symbol or symbols says that these sym\u00adbols may be repeated any number of times, including zero times. Thus, A -> X{YZ} has the same effect as the infinite sequence of productions A -> X, A -> XYZ, A -> XYZYZ, and so on. Show that these two extensions do not add power to grammars; that is, any language that can be generated by a grammar with these extensions can be generated by a grammar without the extensions. Proof extended grammar not extended grammar A -> X[Y]Z A -> XZ | XYZ A -> X{YZ} A -> XB B -> YZB | \u03b5 4.2.5 Use the braces described in Exercise 4.2.4 to simplify the following grammar for statement blocks and conditional statements: stmt -> if expr then stmt else stmt | if stmt them stmt | begin stmtList end stmtList -> stmt; stmtList | stmt Answer stmt -> if expr then stmt [else stmt] | begin stmtList end stmtList -> stmt [; stmtList] 4.2.6 Extend the idea of Exercise 4.2.4 to allow any regular expres\u00adsion of grammar symbols in the body of a production. Show that this extension does not allow grammars to define any new languages. Proof Every regular grammar has a corresponding not extended grammar 4.2.7 ! A grammar symbol X (terminal or nonterminal) is useless if there is no derivation of the form S =*=> wXy =*=> wxy. That is, X can never appear in the derivation of any sentence. Give an algorithm to eliminate from a grammar all productions containing useless symbols. Apply your algorithm to the grammar: ``` S -> 0 | A A -> AB B -> 1 ```` 4.2.8 The grammar in Fig. 4.7 generates declarations for a sin\u00adgle numerical identifier; these declarations involve four different, independent properties of numbers. stmt -> declare id optionList optionList -> optionList option | \u03b5 option -> mode | scale | precision | base mode -> real | complex scale -> fixed | floating precision -> single | double base -> binary | decimal Generalize the grammar of Fig. 4.7 by allowing n options Ai, for some fixed n and for i = 1,2... ,n, where Ai can be either ai or bi\u00b7 Your grammar should use only 0(n) grammar symbols and have a total length of productions that is O(n). ! The grammar of Fig. 4.7 and its generalization in part (a) allow declarations that are contradictory and/or redundant, such as declare foo real fixed real floating We could insist that the syntax of the language forbid such declarations; that is, every declaration generated by the grammar has exactly one value for each of the n options. If we do, then for any fixed n there is only a finite number of legal declarations. The language of legal declarations thus has a grammar (and also a regular expression), as any finite language does. The obvious grammar, in which the start symbol has a production for every legal declaration has n! productions and a total production length of O(n x n!). You must do better: a total production length that is O(n2^n) !! Show that any grammar for part (b) must have a total production length of at least 2n. What does part (c) say about the feasibility of enforcing nonredundancy and noncontradiction among options in declarations via the syntax of the programming language? Answer 1\u3001 stmt -> declare id optionList optionList -> optionList option | \u03b5 option -> A_1 | A_2 | \u2026 | A_n A_1 -> a_1 | b_1 A_2 -> a_2 | b_2 \u2026 A_n -> a_n | b_n","title":"Exercises for Section 4.2"},{"location":"ch04/4.2/4.2/#exercises-for-section-42","text":"","title":"Exercises for Section 4.2"},{"location":"ch04/4.2/4.2/#421","text":"Consider the context-free grammar: S -> S S + | S S * | a and the string aa + a*. Give a leftmost derivation for the string. Give a rightmost derivation for the string. Give a parse tree for the string. ! Is the grammar ambiguous or unambiguous? Justify your answer. ! Describe the language generated by this grammar.","title":"4.2.1"},{"location":"ch04/4.2/4.2/#answer","text":"S =lm=> SS* => SS+S* => aS+S* => aa+S* => aa+a* S =rm=> SS* => Sa* => SS+a* => Sa+a* => aa+a* 3. Unambiguous The set of all postfix expressions consist of addition and multiplication","title":"Answer"},{"location":"ch04/4.2/4.2/#422","text":"Repeat Exercise 4 . 2 . 1 for each of the following grammars and strings: S -> 0 S 1 | 0 1 with string 00011l. S -> + S S | * S S | a with string + * aaa. ! S -> S (S) S | \u03b5 with string (()()) ! S -> S + S | S S | (S) | S * | a with string (a+a)*a ! S -> (L) | a \u4ee5\u53ca L -> L, S | S with string ((a,a),a,(a)) !! S -> a S b S | b S a S | \u03b5 with string aabbab The following grammar for boolean expressions: bexpr -> bexpr or bterm | bterm bterm -> bterm and bfactor | bfactor bfactor -> not bfactor | (bexpr) | true | false","title":"4.2.2"},{"location":"ch04/4.2/4.2/#answer_1","text":"S =lm=> 0S1 => 00S11 => 000111 S =rm=> 0S1 => 00S11 => 000111 Omit Unambiguous The set of all strings of 0s and followed by an equal number of 1s 2\u3001 S =lm=> +SS => +*SSS => +*aSS => +*aaS => +*aaa S =rm=> +SS => +Sa => +*SSa => +*Saa => +*aaa Omit Unambiguous The set of all prefix expressions consist of addition and multiplication. 3\u3001 S =lm=> S(S)S => (S)S => (S(S)S)S => ((S)S)S => (()S)S => (()S(S)S)S => (()(S)S)S => (()()S)S => (()())S => (()()) S =rm=> S(S)S => S(S) => S(S(S)S) => S(S(S)) => S(S()) => S(S(S)S()) => S(S(S)()) => S(S()()) => S(()()) => (()()) Omit Ambiguous The set of all strings of symmetrical parentheses 4\u3001 S =lm=> SS => S*S => (S)*S => (S+S)*S => (a+S)*S => (a+a)*S => (a+a)*a S =rm=> SS => Sa => S*a => (S)*a => (S+S)*a => (S+a)*a => (a+a)*a Omit Ambiguous The set of all string of plus, mupplication, 'a' and symmetrical parentheses, and plus is not the beginning and end of the position, multiplication is not the beginning of the position 5\u3001 S =lm=> (L) => (L, S) => (L, S, S) => ((S), S, S) => ((L), S, S) => ((L, S), S, S) => ((S, S), S, S) => ((a, S), S, S) => ((a, a), S, S) => ((a, a), a, S) => ((a, a), a, (L)) => ((a, a), a, (S)) => ((a, a), a, (a)) S =rm=> (L) => (L, S) => (L, (L)) => (L, (a)) => (L, S, (a)) => (L, a, (a)) => (S, a, (a)) => ((L), a, (a)) => ((L, S), a, (a)) => ((S, S), a, (a)) => ((S, a), a, (a)) => ((a, a), a, (a)) Omit Unambiguous Something like tuple in Python 6\u3001 S =lm=> aSbS => aaSbSbS => aabSbS => aabbS => aabbaSbS => aabbabS => aabbab S =rm=> aSbS => aSbaSbS => aSbaSb => aSbab => aaSbSbab => aaSbbab => aabbab Omit Ambiguous The set of all strings of 'a's and 'b's of the equal number of 'a's and 'b's 7\u3001 Unambiguous, boolean expression","title":"Answer"},{"location":"ch04/4.2/4.2/#423","text":"Design grammars for the following languages: The set of all strings of 0s and 1s such that every 0 is immediately followed by at least one 1. ! The set of all strings of 0s and 1s that are palindromes; that is, the string reads the same backward as forward. ! The set of all strings of 0s and 1s with an equal number of 0s and 1s. !! The set of all strings of 0s and 1s with an unequal number of 0s and 1s. ! The set of all strings of 0s and as in which 011 does not appear as a substring. !! The set of all strings of 0s and 1s of the form xy, where x<>y and x and y are of the same length.","title":"4.2.3"},{"location":"ch04/4.2/4.2/#answer_2","text":"1\u3001 S -> (0?1)* 2\u3001 S -> 0S0 | 1S1 | 0 | 1 | \u03b5 3\u3001 S -> 0S1S | 1S0S | \u03b5 5\u3001 S -> 1*(0+1?)*","title":"Answer"},{"location":"ch04/4.2/4.2/#424","text":"There is an extended grammar notation in common use. In this notation, square and curly braces in production bodies are metasymbols (like -> or |) with the following meanings: Square braces around a grammar symbol or symbols denotes that these constructs are optional. Thus, production A -> X[Y]Z has the same effect as the two productions A -> XYZ and A -> XZ. Curly braces around a grammar symbol or symbols says that these sym\u00adbols may be repeated any number of times, including zero times. Thus, A -> X{YZ} has the same effect as the infinite sequence of productions A -> X, A -> XYZ, A -> XYZYZ, and so on. Show that these two extensions do not add power to grammars; that is, any language that can be generated by a grammar with these extensions can be generated by a grammar without the extensions.","title":"4.2.4"},{"location":"ch04/4.2/4.2/#proof","text":"extended grammar not extended grammar A -> X[Y]Z A -> XZ | XYZ A -> X{YZ} A -> XB B -> YZB | \u03b5","title":"Proof"},{"location":"ch04/4.2/4.2/#425","text":"Use the braces described in Exercise 4.2.4 to simplify the following grammar for statement blocks and conditional statements: stmt -> if expr then stmt else stmt | if stmt them stmt | begin stmtList end stmtList -> stmt; stmtList | stmt","title":"4.2.5"},{"location":"ch04/4.2/4.2/#answer_3","text":"stmt -> if expr then stmt [else stmt] | begin stmtList end stmtList -> stmt [; stmtList]","title":"Answer"},{"location":"ch04/4.2/4.2/#426","text":"Extend the idea of Exercise 4.2.4 to allow any regular expres\u00adsion of grammar symbols in the body of a production. Show that this extension does not allow grammars to define any new languages.","title":"4.2.6"},{"location":"ch04/4.2/4.2/#proof_1","text":"Every regular grammar has a corresponding not extended grammar","title":"Proof"},{"location":"ch04/4.2/4.2/#427","text":"A grammar symbol X (terminal or nonterminal) is useless if there is no derivation of the form S =*=> wXy =*=> wxy. That is, X can never appear in the derivation of any sentence. Give an algorithm to eliminate from a grammar all productions containing useless symbols. Apply your algorithm to the grammar: ``` S -> 0 | A A -> AB B -> 1 ````","title":"4.2.7 !"},{"location":"ch04/4.2/4.2/#428","text":"The grammar in Fig. 4.7 generates declarations for a sin\u00adgle numerical identifier; these declarations involve four different, independent properties of numbers. stmt -> declare id optionList optionList -> optionList option | \u03b5 option -> mode | scale | precision | base mode -> real | complex scale -> fixed | floating precision -> single | double base -> binary | decimal Generalize the grammar of Fig. 4.7 by allowing n options Ai, for some fixed n and for i = 1,2... ,n, where Ai can be either ai or bi\u00b7 Your grammar should use only 0(n) grammar symbols and have a total length of productions that is O(n). ! The grammar of Fig. 4.7 and its generalization in part (a) allow declarations that are contradictory and/or redundant, such as declare foo real fixed real floating We could insist that the syntax of the language forbid such declarations; that is, every declaration generated by the grammar has exactly one value for each of the n options. If we do, then for any fixed n there is only a finite number of legal declarations. The language of legal declarations thus has a grammar (and also a regular expression), as any finite language does. The obvious grammar, in which the start symbol has a production for every legal declaration has n! productions and a total production length of O(n x n!). You must do better: a total production length that is O(n2^n) !! Show that any grammar for part (b) must have a total production length of at least 2n. What does part (c) say about the feasibility of enforcing nonredundancy and noncontradiction among options in declarations via the syntax of the programming language?","title":"4.2.8"},{"location":"ch04/4.2/4.2/#answer_4","text":"1\u3001 stmt -> declare id optionList optionList -> optionList option | \u03b5 option -> A_1 | A_2 | \u2026 | A_n A_1 -> a_1 | b_1 A_2 -> a_2 | b_2 \u2026 A_n -> a_n | b_n","title":"Answer"},{"location":"ch04/4.3/4.3/","text":"4.3 \u8282\u7684\u7ec3\u4e60 4.3.1 \u4e0b\u9762\u662f\u4e00\u4e2a\u53ea\u5305\u542b\u7b26\u53f7 a \u548c b \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6587\u6cd5\u3002\u5b83\u4f7f\u7528 + \u66ff\u4ee3\u8868\u793a\u5e76\u8fd0\u7b97\u7684\u5b57\u7b26 | \uff0c\u4ee5\u907f\u514d\u548c\u6587\u6cd5\u4e2d\u4f5c\u4e3a\u5143\u7b26\u53f7\u4f7f\u7528\u7684\u7ad6\u7ebf\u76f8\u6df7\u6dc6\uff1a rexpr -> rexpr + rterm | rterm rterm -> rterm rfactor | rfactor rfactor -> rfactor * | rprimary rprimary -> a | b \u5bf9\u8fd9\u4e2a\u6587\u6cd5\u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u3002 \u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u7684\u53d8\u6362\u80fd\u4f7f\u8fd9\u4e2a\u6587\u6cd5\u9002\u7528\u4e8e\u81ea\u9876\u5411\u4e0b\u7684\u8bed\u6cd5\u5206\u6790\u6280\u672f\u5417\uff1f \u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u4e4b\u540e\uff0c\u4ece\u539f\u6587\u6cd5\u4e2d\u6d88\u9664\u5de6\u9012\u5f52\u3002 \u5f97\u5230\u7684\u6587\u6cd5\u9002\u7528\u4e8e\u81ea\u9876\u5411\u4e0b\u7684\u8bed\u6cd5\u5206\u6790\u5417\uff1f \u89e3\u7b54 \u65e0\u5de6\u516c\u56e0\u5b50 \u4e0d\u9002\u5408 \u6d88\u9664\u5de6\u9012\u5f52 rexpr -> rterm A A -> + rterm A | \u03b5 rterm -> rfactor B B -> rfactor B | \u03b5 rfactor -> rprimary C C -> * C | \u03b5 rprimary -> a | b \u9002\u5408\uff1f 4.3.2 \u5bf9\u4e0b\u9762\u7684\u6587\u6cd5\u91cd\u590d\u7ec3\u4e60 4.3.1 \u7ec3\u4e60 4.2.1 \u7684\u6587\u6cd5 \u7ec3\u4e60 4.2.2-1 \u7684\u6587\u6cd5 \u7ec3\u4e60 4.2.2-3 \u7684\u6587\u6cd5 \u7ec3\u4e60 4.2.2-5 \u7684\u6587\u6cd5 \u7ec3\u4e60 4.2.2-7 \u7684\u6587\u6cd5 \u89e3\u7b54 S -> S S + | S S * | a \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 S -> S S A | a A -> + | * \u4e0d\u9002\u5408 \u6d88\u9664\u5de6\u9012\u5f52 // initial status 1\uff09S -> S S A | a 2) A -> + | * // i = 1 1) S -> a B 2) B -> S A B | \u03b5 3) A -> + | * // i = 2, j = 1 1) S -> a B 2) B -> a B A B | \u03b5 3) A -> + | * // i = 3, j = 1 ~ 2 // nothing changed \u9002\u5408 S -> 0 S 1 | 0 1 \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 S -> 0 A A -> S 1 | 1 \u4e0d\u9002\u5408\uff0c\u6709\u95f4\u63a5\u5de6\u9012\u5f52 \u6d88\u9664\u5de6\u9012\u5f52 // initial status 1) S -> 0 A 2) A -> S 1 | 1 // i = 1 // nothing changed // i = 2, j = 1 1) S -> 0 A 2) A -> 0 A 1 | 1 \u5408\u9002 S -> S (S) S | \u03b5 \u65e0\u5de6\u516c\u56e0\u5b50 \u4e0d\u5408\u9002 \u6d88\u9664\u5de6\u9012\u5f52 // initial status 1) S -> S (S) S | \u03b5 // i = 1 1) S -> A 2) A -> (S) S A | \u03b5 // i = 2, j = 1 // nothing changed 4. \u5408\u9002 S -> (L) | a \u4ee5\u53ca L -> L, S | S \u65e0\u5de6\u516c\u56e0\u5b50 \u4e0d\u5408\u9002 \u6d88\u9664\u5de6\u9012\u5f52 // initial status 1) S -> (L) | a 2) L -> L, S | S // i = 1 // nothing changed // i = 2, j = 1 1) S -> (L) | a 2) L -> (L) A | a A 3) A -> , S A | \u03b5 // i = 3, j = 1~2 // nothing changed \u5408\u9002 4.3.3 \uff01 \u4e0b\u9762\u6587\u6cd5\u7684\u76ee\u7684\u662f\u6d88\u9664 4.3.2 \u8282\u4e2d\u8ba8\u8bba\u7684 \u201c\u60ac\u7a7a-else \u4e8c\u4e49\u6027\u201d\uff1a stmt -> if expr then stmt | matchedStmt matchedStmt -> if expr then matchedStmt else stmt | other \u8bf4\u660e\u8fd9\u4e2a\u6587\u6cd5\u4ecd\u7136\u662f\u4e8c\u4e49\u6027\u7684\u3002 \u89e3\u7b54 \u770b\u4e00\u6bb5\u793a\u8303\u4ee3\u7801\uff0c\u6211\u4eec\u901a\u8fc7\u7f29\u8fdb\u6765\u8868\u793a\u4ee3\u7801\u89e3\u6790\u7684\u5c42\u6b21\u7ed3\u6784 if expr then if expr then matchedStmt else if expr then matchedStmt else stmt \u8fd9\u6bb5\u4ee3\u7801\u8fd8\u53ef\u4ee5\u88ab\u89e3\u6790\u6210 if expr then if expr then matchedStmt else if expr then matchedStmt else stmt \u6240\u4ee5\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u4e8c\u4e49\u6027\u7684\u6587\u6cd5\u3002\u539f\u56e0\u5728\u4e8e matchedStmt -> if expr then matchedStmt else stmt \u4e2d\u7684\u6700\u540e\u4e00\u4e2a stmt \uff0c\u5982\u679c\u5305\u542b else \u8bed\u53e5\u7684\u8bdd\uff0c\u65e2\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5c5e\u4e8e\u8fd9\u4e2a stmt \u7684\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5c5e\u4e8e\u5305\u542b\u8fd9\u4e2a matchedStmt \u7684\u8bed\u53e5\u7684\u3002","title":"4.3 \u8282\u7684\u7ec3\u4e60"},{"location":"ch04/4.3/4.3/#43","text":"","title":"4.3 \u8282\u7684\u7ec3\u4e60"},{"location":"ch04/4.3/4.3/#431","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u53ea\u5305\u542b\u7b26\u53f7 a \u548c b \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6587\u6cd5\u3002\u5b83\u4f7f\u7528 + \u66ff\u4ee3\u8868\u793a\u5e76\u8fd0\u7b97\u7684\u5b57\u7b26 | \uff0c\u4ee5\u907f\u514d\u548c\u6587\u6cd5\u4e2d\u4f5c\u4e3a\u5143\u7b26\u53f7\u4f7f\u7528\u7684\u7ad6\u7ebf\u76f8\u6df7\u6dc6\uff1a rexpr -> rexpr + rterm | rterm rterm -> rterm rfactor | rfactor rfactor -> rfactor * | rprimary rprimary -> a | b \u5bf9\u8fd9\u4e2a\u6587\u6cd5\u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u3002 \u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u7684\u53d8\u6362\u80fd\u4f7f\u8fd9\u4e2a\u6587\u6cd5\u9002\u7528\u4e8e\u81ea\u9876\u5411\u4e0b\u7684\u8bed\u6cd5\u5206\u6790\u6280\u672f\u5417\uff1f \u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u4e4b\u540e\uff0c\u4ece\u539f\u6587\u6cd5\u4e2d\u6d88\u9664\u5de6\u9012\u5f52\u3002 \u5f97\u5230\u7684\u6587\u6cd5\u9002\u7528\u4e8e\u81ea\u9876\u5411\u4e0b\u7684\u8bed\u6cd5\u5206\u6790\u5417\uff1f","title":"4.3.1"},{"location":"ch04/4.3/4.3/#_1","text":"\u65e0\u5de6\u516c\u56e0\u5b50 \u4e0d\u9002\u5408 \u6d88\u9664\u5de6\u9012\u5f52 rexpr -> rterm A A -> + rterm A | \u03b5 rterm -> rfactor B B -> rfactor B | \u03b5 rfactor -> rprimary C C -> * C | \u03b5 rprimary -> a | b \u9002\u5408\uff1f","title":"\u89e3\u7b54"},{"location":"ch04/4.3/4.3/#432","text":"\u5bf9\u4e0b\u9762\u7684\u6587\u6cd5\u91cd\u590d\u7ec3\u4e60 4.3.1 \u7ec3\u4e60 4.2.1 \u7684\u6587\u6cd5 \u7ec3\u4e60 4.2.2-1 \u7684\u6587\u6cd5 \u7ec3\u4e60 4.2.2-3 \u7684\u6587\u6cd5 \u7ec3\u4e60 4.2.2-5 \u7684\u6587\u6cd5 \u7ec3\u4e60 4.2.2-7 \u7684\u6587\u6cd5","title":"4.3.2"},{"location":"ch04/4.3/4.3/#_2","text":"S -> S S + | S S * | a \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 S -> S S A | a A -> + | * \u4e0d\u9002\u5408 \u6d88\u9664\u5de6\u9012\u5f52 // initial status 1\uff09S -> S S A | a 2) A -> + | * // i = 1 1) S -> a B 2) B -> S A B | \u03b5 3) A -> + | * // i = 2, j = 1 1) S -> a B 2) B -> a B A B | \u03b5 3) A -> + | * // i = 3, j = 1 ~ 2 // nothing changed \u9002\u5408 S -> 0 S 1 | 0 1 \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 S -> 0 A A -> S 1 | 1 \u4e0d\u9002\u5408\uff0c\u6709\u95f4\u63a5\u5de6\u9012\u5f52 \u6d88\u9664\u5de6\u9012\u5f52 // initial status 1) S -> 0 A 2) A -> S 1 | 1 // i = 1 // nothing changed // i = 2, j = 1 1) S -> 0 A 2) A -> 0 A 1 | 1 \u5408\u9002 S -> S (S) S | \u03b5 \u65e0\u5de6\u516c\u56e0\u5b50 \u4e0d\u5408\u9002 \u6d88\u9664\u5de6\u9012\u5f52 // initial status 1) S -> S (S) S | \u03b5 // i = 1 1) S -> A 2) A -> (S) S A | \u03b5 // i = 2, j = 1 // nothing changed 4. \u5408\u9002 S -> (L) | a \u4ee5\u53ca L -> L, S | S \u65e0\u5de6\u516c\u56e0\u5b50 \u4e0d\u5408\u9002 \u6d88\u9664\u5de6\u9012\u5f52 // initial status 1) S -> (L) | a 2) L -> L, S | S // i = 1 // nothing changed // i = 2, j = 1 1) S -> (L) | a 2) L -> (L) A | a A 3) A -> , S A | \u03b5 // i = 3, j = 1~2 // nothing changed \u5408\u9002","title":"\u89e3\u7b54"},{"location":"ch04/4.3/4.3/#433","text":"\u4e0b\u9762\u6587\u6cd5\u7684\u76ee\u7684\u662f\u6d88\u9664 4.3.2 \u8282\u4e2d\u8ba8\u8bba\u7684 \u201c\u60ac\u7a7a-else \u4e8c\u4e49\u6027\u201d\uff1a stmt -> if expr then stmt | matchedStmt matchedStmt -> if expr then matchedStmt else stmt | other \u8bf4\u660e\u8fd9\u4e2a\u6587\u6cd5\u4ecd\u7136\u662f\u4e8c\u4e49\u6027\u7684\u3002","title":"4.3.3 \uff01"},{"location":"ch04/4.3/4.3/#_3","text":"\u770b\u4e00\u6bb5\u793a\u8303\u4ee3\u7801\uff0c\u6211\u4eec\u901a\u8fc7\u7f29\u8fdb\u6765\u8868\u793a\u4ee3\u7801\u89e3\u6790\u7684\u5c42\u6b21\u7ed3\u6784 if expr then if expr then matchedStmt else if expr then matchedStmt else stmt \u8fd9\u6bb5\u4ee3\u7801\u8fd8\u53ef\u4ee5\u88ab\u89e3\u6790\u6210 if expr then if expr then matchedStmt else if expr then matchedStmt else stmt \u6240\u4ee5\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u4e8c\u4e49\u6027\u7684\u6587\u6cd5\u3002\u539f\u56e0\u5728\u4e8e matchedStmt -> if expr then matchedStmt else stmt \u4e2d\u7684\u6700\u540e\u4e00\u4e2a stmt \uff0c\u5982\u679c\u5305\u542b else \u8bed\u53e5\u7684\u8bdd\uff0c\u65e2\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5c5e\u4e8e\u8fd9\u4e2a stmt \u7684\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5c5e\u4e8e\u5305\u542b\u8fd9\u4e2a matchedStmt \u7684\u8bed\u53e5\u7684\u3002","title":"\u89e3\u7b54"},{"location":"ch04/4.4/4.4/","text":"4.4 \u8282\u7684\u7ec3\u4e60 4.4.1 \u4e3a\u4e0b\u9762\u7684\u6bcf\u4e2a\u6587\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u9884\u6d4b\u5206\u6790\u5668\uff0c\u5e76\u7ed9\u51fa\u9884\u6d4b\u5206\u6790\u8868\u3002\u4f60\u53ef\u80fd\u5148\u8981\u5bf9\u6587\u6cd5\u8fdb\u884c\u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u6216\u8005\u6d88\u9664\u5de6\u9012\u5f52\u7684\u64cd\u4f5c\u3002 \u7ec3\u4e60 4.2.2 \u4e2d 1 - 7 \u4e2d\u7684\u6587\u6cd5\u3002 \u89e3\u7b54 S -> 0 S 1 | 0 1 step1. \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 S -> 0 A A -> S 1 | 1 step2. \u6d88\u9664\u5de6\u9012\u5f52 S -> 0 A A -> 0 A 1 | 1 step3. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 0 1 $ S S -> 0 A A A -> 0 A 1 A -> 1 S -> + S S | * S S | a step1. \u65e0\u5de6\u516c\u56e0\u5b50 step2. \u65e0\u5de6\u9012\u5f52 step3. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 + * a $ S S -> + S S S -> * S S S -> a ! S -> S (S) S | \u03b5 step1. \u65e0\u5de6\u516c\u56e0\u5b50 step2. \u6d88\u9664\u5de6\u9012\u5f52 S -> A A -> (S) S A | \u03b5 step3. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 ( ) $ S S -> A S -> A S -> A A A -> (S) S A A -> \u03b5 A -> \u03b5 A -> \u03b5 ! S -> S + S | S S | (S) | S * | a step1. \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 S -> SA | (S) | a A -> +S | S | * \u8fdb\u4e00\u6b65\u63d0\u53d6\u7ec8\u7ed3\u7b26 S -> SA | T A -> +S | S | * T -> (S) | a step2. \u6d88\u9664\u5de6\u9012\u5f52(\u6839\u636e p135 \u7684\u7b97\u6cd5 4.19) i = 1 S -> TB B -> AB | \u03b5 i = 2 j = 1 A -> +S | TB | * i = 3 j = 1 \u65e0\u9700\u5904\u7406 j = 2 \u65e0\u9700\u5904\u7406 \u5f97\u5230\u6700\u7ec8\u7684\u4ea7\u751f\u5f0f S -> TB B -> AB | \u03b5 A -> +S | TB | * T -> (S) | a step3. first && follow first(T) = [(, a] first(A) = [+, *] + first(T) =[+, *, (, a] first(B) = [\u03b5] + first(A) = [\u03b5, +, *, (, a] first(S) = first(T) = [(, a] follow(T) = [$, +, *, (, a] follow(A) = [$, +, *, (, ), a] follow(B) = [$] follow(S) = [$, +, *, (, ), a] step4. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 ( ) + * a $ S S -> TB S -> TB B B -> AB B -> AB B -> AB B -> AB B -> \u03b5 A A -> TB A -> +S A -> * A -> TB T T -> (S) T -> a S -> (L) | a \u4ee5\u53ca L -> L, S | S step1. \u65e0\u5de6\u516c\u56e0\u5b50 step2. \u6d88\u9664\u5de6\u9012\u5f52 S -> (L) | a L -> SA A -> ,SA | \u03b5 step3. \u9884\u6d4b\u5206\u6790\u8868 grammar for boolean expressions: bexpr -> bexpr or bterm | bterm bterm -> bterm and bfactor | bfactor bfactor -> not bfactor | ( bexpr ) | true | false step1. \u65e0\u5de6\u516c\u56e0\u5b50 step2. \u6d88\u9664\u5de6\u9012\u5f52 bexpr -> bterm bexpr' bexpr' -> or bterm bexpr' | \u03b5 bterm -> bfactor bterm' bterm' -> and bfactor bterm' | \u03b5 bfactor -> not bfactor | (bexpr) | true | false step3. first && follow ``` first(bexpr) = first(bterm) = first(bfactor) = [not, (, true, false] first(bexpr') = [or, \u03b5] first(bterm') = [and, \u03b5] follow(bexpr) = follow(bexpr') = [), $] follow(bterm) = follow(bterm') = [or, $] follow(bfactor) = [and, $] ```` step4. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 and or not ( ) true false $ bexpr bexpr -> bterm bexpr' bexpr -> bterm bexpr' bexpr -> bterm bexpr' bexpr -> bterm bexpr' bexpr' bexpr' -> or bterm bexpr' bexpr' -> \u03b5 bexpr' -> \u03b5 bterm bterm -> bfactor bterm' bterm -> bfactor bterm' bterm -> bfactor bterm' bterm -> bfactor bterm' bterm' bterm' -> and bfactor bterm' bterm' -> \u03b5 bterm' -> \u03b5 bfactor bfactor -> not bfactor bfactor -> (bexpr) bfactor -> true bfactor -> false 4.4.2 \uff01\uff01 \u6709\u6ca1\u6709\u53ef\u80fd\u901a\u8fc7\u67d0\u79cd\u65b9\u6cd5\u4fee\u6539\u7ec3\u4e60 4.2.1 \u4e2d\u7684\u6587\u6cd5\uff0c\u6784\u9020\u51fa\u4e00\u4e2a\u4e0e\u8be5\u7ec3\u4e60\u4e2d\u7684\u8bed\u8a00\uff08\u8fd0\u7b97\u5206\u91cf\u4e3a a \u7684\u540e\u7f00\u8868\u8fbe\u5f0f\uff09\u5bf9\u5e94\u7684\u9884\u6d4b\u5206\u6790\u5668\uff1f \u89e3\u7b54 S -> SS+ | SS* | a step1. \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 S -> SSA | a A -> + | * step2. \u6d88\u9664\u5de6\u9012\u5f52 i = 1 S -> aB B -> SAB | \u03b5 A -> + | * i = 2 j = 1 S -> aB B -> aBAB | \u03b5 A -> + | * step3. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 + * a $ S S -> aB A A -> + A -> * B B -> \u03b5 B -> \u03b5 B -> SAB B -> \u03b5 4.4.3 \u8ba1\u7b97\u7ec3\u4e60 4.2.1 \u7684\u6587\u6cd5\u7684 FIRST \u548c FOLLOW \u96c6\u5408\u3002 \u89e3\u7b54 first(S) = [a] follow(S) = [a, +, *] 4.4.4 \u8ba1\u7b97\u7ec3\u4e60 4.2.2 \u4e2d\u5404\u4e2a\u6587\u6cd5\u7684 FIRST \u548c FOLLOW \u96c6\u5408\u3002 \u89e3\u7b54 S -> 0 S 1 | 0 1 first(S) = [0] follow(S) = [1, $] S -> + S S | * S S | a first(S) = [+, *, a] follow(S) = [+, *, a, $] S -> S (S) S | \u03b5 first(S) = [(, \u03b5] followS(S) = [), $] S -> S + S | S S | (S) | S * | a first(S) = [(, a] follow(S) = [+, (, ), a, *, $] S -> (L) | a \u4ee5\u53ca L -> L, S | S first(S) = [(, a] follow(S) = [\",\", $] first(L) = first(S) = [(, a] follow(L) = [), \",\", $] S -> a S b S | b S a S | \u03b5 first(S) = [a, b, \u03b5] follow(S) = [a, b, $] \u4e0b\u9762\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684\u6587\u6cd5\uff1a bexpr -> bexpr or bterm | bterm bterm -> bterm and bfactor | bfactor bfactor -> not bfactor | (bexpr) | true | false 4.4.5 \u6587\u6cd5 S -> aSa | aa \u751f\u6210\u4e86\u6240\u6709\u7531 a \u7ec4\u6210\u7684\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u4e32\u3002\u6211\u4eec\u53ef\u4ee5\u4e3a\u8fd9\u4e2a\u6587\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5e26\u56de\u6eaf\u7684\u9012\u5f52\u4e0b\u964d\u5206\u6790\u5668\u3002\u5982\u679c\u6211\u4eec\u9009\u62e9\u5148\u7528\u4ea7\u751f\u5f0f S -> aa \u5c55\u5f00\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u8bc6\u522b\u4e32 aa\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u5408\u7406\u7684\u9012\u5f52\u4e0b\u964d\u5206\u6790\u5668\u5c06\u9996\u5148\u5c1d\u8bd5 S -> aSa\u3002 \uff01 \u8bf4\u660e\u8fd9\u4e2a\u9012\u5f52\u4e0b\u964d\u5206\u6790\u5668\u8bc6\u522b\u8f93\u5165 aa\uff0caaaa \u548c aaaaaaaa\uff0c\u4f46\u8bc6\u522b\u4e0d\u4e86 aaaaaa\u3002 \uff01\uff01 \u8fd9\u4e2a\u9012\u5f52\u4e0b\u964d\u5206\u6790\u5668\u8bc6\u522b\u4ec0\u4e48\u6837\u7684\u8bed\u8a00\uff1f \u6ce8\u610f \u4ee5\u4e0b\u9898\u76ee\u8bf7\u53c2\u8003 Aho \u672c\u4eba\u7684\u8bb2\u4e49\uff1a Aho: Properties of Context-Free Languages \uff0c \u672c\u5730\u526f\u672c \u6b64\u5916\u8fd8\u6709 \u53e6\u4e00\u7bc7\u5185\u5bb9\u76f8\u4f3c\u7684\u6587\u7ae0 \uff0c \u672c\u5730\u526f\u672c \u5173\u4e8e CNF \u548c CYK \u7b97\u6cd5\uff0c\u6709\u8f83\u591a\u76f8\u5173\u8d44\u6599\uff0c\u81ea\u884c\u641c\u7d22 4.4.6 ! \u5982\u679c\u4e00\u4e2a\u6587\u6cd5\u6ca1\u6709\u4ea7\u751f\u5f0f\u4f53\u4e3a \u03b5 \u7684\u4ea7\u751f\u5f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6587\u6cd5\u5c31\u662f\u65e0 \u03b5 \u4ea7\u751f\u5f0f\u7684\u3002 \u7ed9\u51fa\u4e00\u4e2a\u7b97\u6cd5\uff0c\u4ed6\u7684\u529f\u80fd\u662f\u628a\u4efb\u4f55\u6587\u6cd5\u8f6c\u53d8\u6210\u4e00\u4e2a\u65e0 \u03b5 \u4ea7\u751f\u5f0f\u7684\u751f\u6210\u76f8\u540c\u8bed\u8a00\u7684\u6587\u6cd5\uff08\u552f\u4e00\u53ef\u80fd\u7684\u4f8b\u5916\u662f\u7a7a\u4e32\u2014\u2014\u6ca1\u6709\u54ea\u4e2a\u65e0 \u03b5 \u4ea7\u751f\u5f0f\u7684\u6587\u6cd5\u80fd\u751f\u6210 \u03b5\uff09\u3002\u63d0\u793a\uff1a\u9996\u5148\u627e\u51fa\u6240\u6709\u53ef\u80fd\u4e3a\u7a7a\u7684\u975e\u7ec8\u7ed3\u7b26\u53f7\u3002\u975e\u7ec8\u7ed3\u7b26\u53f7\u53ef\u80fd\u4e3a\u7a7a\u662f\u6307\u5b83\uff08\u53ef\u80fd\u901a\u8fc7\u5f88\u957f\u7684\u63a8\u5bfc\uff09\u751f\u6210 \u03b5\u3002 \u5c06\u4f60\u7684\u7b97\u6cd5\u5e94\u7528\u4e8e\u6587\u6cd5 S -> aSbS | bSaS | \u03b5 4.4.7 \uff01 \u5355\u4ea7\u751f\u5f0f\u662f\u6307\u5176\u4ea7\u751f\u5f0f\u4f53\u4e3a\u5355\u4e2a\u975e\u7ec8\u7ed3\u7b26\u53f7\u7684\u4ea7\u751f\u5f0f\uff0c\u5373\u5f62\u5982 A -> B \u7684\u4ea7\u751f\u5f0f\u3002 \u7ed9\u51fa\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5b83\u53ef\u4ee5\u628a\u4efb\u4f55\u6587\u6cd5\u8f6c\u53d8\u6210\u4e00\u4e2a\u751f\u6210\u76f8\u540c\u8bed\u8a00\uff08\u552f\u4e00\u53ef\u80fd\u7684\u4f8b\u5916\u662f\u7a7a\u4e32\uff09\u7684\u3001\u65e0 \u03b5 \u4ea7\u751f\u5f0f\u3001\u65e0\u5355\u4ea7\u751f\u5f0f\u7684\u6587\u6cd5\u3002\u63d0\u793a\uff1a\u9996\u5148\u6d88\u9664 \u03b5 \u4ea7\u751f\u5f0f\uff0c\u7136\u540e\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u7684\u975e\u7ec8\u7ed3\u7b26\u53f7\u5bf9 A \u548c B\uff1a\u5b58\u5728 A =*=> B\u3002 \u5c06\u4f60\u7684\u7b97\u6cd5\u5e94\u7528\u4e8e 4.1.2 \u8282\u7684\u7b97\u6cd5\u3002 \u8bf4\u660e\u4f5c\u4e3a \uff081\uff09 \u7684\u4e00\u4e2a\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u6587\u6cd5\u8f6c\u6362\u6210\u4e00\u4e2a\u6ca1\u6709\u73af\u7684\u7b49\u4ef7\u6587\u6cd5\u3002 4.4.8 \uff01\uff01 \u5982\u679c\u4e00\u4e2a\u6587\u6cd5\u7684\u6bcf\u4e2a\u4ea7\u751f\u5f0f\u8981\u4e48\u5f62\u5982 A -> BC\uff0c\u8981\u4e48\u5f62\u5982 A -> a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6587\u6cd5\u5c31\u6210\u4e3a Chomsky \u8303\u5f0f\uff08Chomsky Normal Form\uff0c CNF\uff09\u3002\u8bf4\u660e\u5982\u4f55\u5c06\u4efb\u610f\u6587\u6cd5\u8f6c\u53d8\u6210\u4e00\u4e2a\u751f\u6210\u76f8\u540c\u8bed\u8a00\uff08\u552f\u4e00\u53ef\u80fd\u7684\u4f8b\u5916\u662f\u7a7a\u4e32\u2014\u2014\u6ca1\u6709 CNF \u6587\u6cd5\u53ef\u4ee5\u751f\u6210 \u03b5\uff09\u7684 CNF \u6587\u6cd5\u3002 4.4.9 \uff01 \u5bf9\u4e8e\u6bcf\u4e2a\u5177\u6709\u4e0a\u4e0b\u6587\u65e0\u5173\u7684\u8bed\u6cd5\uff0c\u5176\u957f\u5ea6\u4e3a n \u7684\u4e32\u53ef\u4ee5\u5728 O(n^3) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u8bc6\u522b\u3002\u5b8c\u6210\u8fd9\u79cd\u8bc6\u522b\u5de5\u4f5c\u7684\u4e00\u4e2a\u7b80\u5355\u65b9\u6cd5\u79f0\u4e3a Cocke-Younger-Kasami\uff08CYK\uff09\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u57fa\u4e8e\u52a8\u6001\u89c4\u5212\u6280\u672f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4e32 a_1a_2\u2026a_n\uff0c\u6211\u4eec\u6784\u9020\u51fa\u4e00\u4e2a nxn \u7684\u8868 T \u4f7f\u5f97 T_ij \u662f\u53ef\u4ee5\u751f\u6210\u5b50\u4e32 a_ia_i+1\u2026aj \u7684\u975e\u7ec8\u7ed3\u7b26\u53f7\u7684\u96c6\u5408\u3002\u5982\u679c\u57fa\u7840\u6587\u6cd5\u662f CNF \u7684\uff0c\u90a3\u4e48\u53ea\u8981\u6211\u4eec\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\u6765\u586b\u8868\uff1a\u5148\u586b j-i \u503c\u6700\u5c0f\u7684\u6761\u76ee\uff0c\u5219\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6761\u76ee\u90fd\u53ef\u4ee5\u5728 O(n) \u65f6\u95f4\u5185\u586b\u5199\u5b8c\u6bd5\u3002\u7ed9\u51fa\u4e00\u4e2a\u80fd\u591f\u6b63\u786e\u586b\u5199\u8fd9\u4e2a\u8868\u7684\u6761\u76ee\u7684\u7b97\u6cd5\uff0c\u5e76\u8bf4\u660e\u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3)\u3002\u586b\u5b8c\u8fd9\u4e2a\u8868\u4e4b\u540e\uff0c\u4f60\u5982\u4f55\u5224\u65ad a_1a_2\u2026a_n \u662f\u5426\u5728\u8fd9\u4e2a\u8bed\u8a00\u4e2d\uff1f 4.4.10 \uff01 \u8bf4\u660e\u6211\u4eec\u5982\u4f55\u80fd\u591f\u5728\u586b\u597d\u7ec3\u4e60 4.4.9 \u4e2d\u7684\u8868\u4e4b\u540e\uff0c\u5728 O(n) \u7684\u65f6\u95f4\u5185\u83b7\u5f97 a_1a_2\u2026a_n \u5bf9\u5e94\u7684\u4e00\u9897\u8bed\u6cd5\u5206\u6790\u6811\uff1f\u63d0\u793a\uff1a\u4fee\u6539\u7ec3\u4e60 4.4.9 \u4e2d\u7684\u8868 T\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u8868\u7684\u6bcf\u4e2a\u6761\u76ee T_ij \u4e2d\u7684\u6bcf\u4e2a\u975e\u7ec8\u7ed3\u7b26\u53f7 A\uff0c\u8fd9\u4e2a\u8868\u540c\u65f6\u8bb0\u5f55\u4e86\u5176\u4ed6\u6761\u76ee\u4e2d\u7684\u54ea\u4e24\u4e2a\u975e\u7ec8\u7ed3\u7b26\u53f7\u7ec4\u6210\u7684\u5bf9\u5076\u4f7f\u5f97\u6211\u4eec\u5c06 A \u653e\u5230 T_ij \u4e2d\u3002 4.4.11 \uff01 \u4fee\u6539\u7ec3\u4e60 4.4.9 \u4e2d\u7684\u7b97\u6cd5\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u7b26\u53f7\u4e32\uff0c\u4ed6\u53ef\u4ee5\u627e\u51fa\u81f3\u5c11\u9700\u8981\u6267\u884c\u591a\u5c11\u6b21\u63d2\u5165\u3001\u5220\u9664\u548c\u4fee\u6539\u9519\u8bef\uff08\u6bcf\u4e2a\u9519\u8bef\u662f\u4e00\u4e2a\u5b57\u7b26\uff09\u7684\u64cd\u4f5c\u624d\u80fd\u5c06\u8fd9\u4e2a\u4e32\u53d8\u6210\u57fa\u7840\u6587\u6cd5\u7684\u8bed\u8a00\u7684\u53e5\u5b50\u3002 4.4.12 \uff01 stmt -> if e then stmt stmtTail | while e do stmt | begin list end | s stmtTail -> else stmt | \u03b5 list -> stmt listTail listTail -> ; list | \u03b5 \u4e0a\u9762\u7684\u4ee3\u7801\u7ed9\u51fa\u4e86\u5bf9\u5e94\u4e8e\u67d0\u4e9b\u8bed\u53e5\u7684\u6587\u6cd5\u3002\u4f60\u53ef\u4ee5\u5c06 e \u548c s \u5f53\u505a\u5206\u522b\u4ee3\u8868\u6761\u4ef6\u8868\u8fbe\u5f0f\u548c\u201c\u5176\u4ed6\u8bed\u53e5\u201d\u7684\u7ec8\u7ed3\u7b26\u53f7\u3002\u5982\u679c\u6211\u4eec\u6309\u7167\u4e0b\u5217\u65b9\u6cd5\u6765\u89e3\u51b3\u56e0\u4e3a\u5c55\u5f00\u53ef\u9009\u201celse\u201d\uff08\u975e\u7ec8\u7ed3\u7b26\u53f7 stmtTail\uff09\u800c\u5f15\u8d77\u7684\u51b2\u7a81\uff1a\u5f53\u6211\u4eec\u4ece\u8f93\u5165\u4e2d\u770b\u5230\u4e00\u4e2a else \u65f6\u5c31\u9009\u62e9\u6d88\u8017\u6389\u8fd9\u4e2a else\u3002\u4f7f\u7528 4.4.5 \u8282\u4e2d\u63cf\u8ff0\u7684\u540c\u6b65\u7b26\u53f7\u7684\u601d\u60f3\uff1a \u4e3a\u8fd9\u4e2a\u6587\u6cd5\u6784\u9020\u4e00\u4e2a\u5e26\u6709\u9519\u8bef\u7ea0\u6b63\u4fe1\u606f\u7684\u9884\u6d4b\u5206\u6790\u8868\u3002 \u7ed9\u51fa\u4f60\u7684\u8bed\u6cd5\u5206\u6790\u5668\u5728\u5904\u7406\u4e0b\u5217\u8f93\u5165\u65f6\u7684\u884c\u4e3a\uff1a if e then s; if e then s end while e do begin s; if e then e; end","title":"4.4 \u8282\u7684\u7ec3\u4e60"},{"location":"ch04/4.4/4.4/#44","text":"","title":"4.4 \u8282\u7684\u7ec3\u4e60"},{"location":"ch04/4.4/4.4/#441","text":"\u4e3a\u4e0b\u9762\u7684\u6bcf\u4e2a\u6587\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u9884\u6d4b\u5206\u6790\u5668\uff0c\u5e76\u7ed9\u51fa\u9884\u6d4b\u5206\u6790\u8868\u3002\u4f60\u53ef\u80fd\u5148\u8981\u5bf9\u6587\u6cd5\u8fdb\u884c\u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u6216\u8005\u6d88\u9664\u5de6\u9012\u5f52\u7684\u64cd\u4f5c\u3002 \u7ec3\u4e60 4.2.2 \u4e2d 1 - 7 \u4e2d\u7684\u6587\u6cd5\u3002","title":"4.4.1"},{"location":"ch04/4.4/4.4/#_1","text":"S -> 0 S 1 | 0 1 step1. \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 S -> 0 A A -> S 1 | 1 step2. \u6d88\u9664\u5de6\u9012\u5f52 S -> 0 A A -> 0 A 1 | 1 step3. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 0 1 $ S S -> 0 A A A -> 0 A 1 A -> 1 S -> + S S | * S S | a step1. \u65e0\u5de6\u516c\u56e0\u5b50 step2. \u65e0\u5de6\u9012\u5f52 step3. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 + * a $ S S -> + S S S -> * S S S -> a ! S -> S (S) S | \u03b5 step1. \u65e0\u5de6\u516c\u56e0\u5b50 step2. \u6d88\u9664\u5de6\u9012\u5f52 S -> A A -> (S) S A | \u03b5 step3. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 ( ) $ S S -> A S -> A S -> A A A -> (S) S A A -> \u03b5 A -> \u03b5 A -> \u03b5 ! S -> S + S | S S | (S) | S * | a step1. \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 S -> SA | (S) | a A -> +S | S | * \u8fdb\u4e00\u6b65\u63d0\u53d6\u7ec8\u7ed3\u7b26 S -> SA | T A -> +S | S | * T -> (S) | a step2. \u6d88\u9664\u5de6\u9012\u5f52(\u6839\u636e p135 \u7684\u7b97\u6cd5 4.19) i = 1 S -> TB B -> AB | \u03b5 i = 2 j = 1 A -> +S | TB | * i = 3 j = 1 \u65e0\u9700\u5904\u7406 j = 2 \u65e0\u9700\u5904\u7406 \u5f97\u5230\u6700\u7ec8\u7684\u4ea7\u751f\u5f0f S -> TB B -> AB | \u03b5 A -> +S | TB | * T -> (S) | a step3. first && follow first(T) = [(, a] first(A) = [+, *] + first(T) =[+, *, (, a] first(B) = [\u03b5] + first(A) = [\u03b5, +, *, (, a] first(S) = first(T) = [(, a] follow(T) = [$, +, *, (, a] follow(A) = [$, +, *, (, ), a] follow(B) = [$] follow(S) = [$, +, *, (, ), a] step4. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 ( ) + * a $ S S -> TB S -> TB B B -> AB B -> AB B -> AB B -> AB B -> \u03b5 A A -> TB A -> +S A -> * A -> TB T T -> (S) T -> a S -> (L) | a \u4ee5\u53ca L -> L, S | S step1. \u65e0\u5de6\u516c\u56e0\u5b50 step2. \u6d88\u9664\u5de6\u9012\u5f52 S -> (L) | a L -> SA A -> ,SA | \u03b5 step3. \u9884\u6d4b\u5206\u6790\u8868 grammar for boolean expressions: bexpr -> bexpr or bterm | bterm bterm -> bterm and bfactor | bfactor bfactor -> not bfactor | ( bexpr ) | true | false step1. \u65e0\u5de6\u516c\u56e0\u5b50 step2. \u6d88\u9664\u5de6\u9012\u5f52 bexpr -> bterm bexpr' bexpr' -> or bterm bexpr' | \u03b5 bterm -> bfactor bterm' bterm' -> and bfactor bterm' | \u03b5 bfactor -> not bfactor | (bexpr) | true | false step3. first && follow ``` first(bexpr) = first(bterm) = first(bfactor) = [not, (, true, false] first(bexpr') = [or, \u03b5] first(bterm') = [and, \u03b5] follow(bexpr) = follow(bexpr') = [), $] follow(bterm) = follow(bterm') = [or, $] follow(bfactor) = [and, $] ```` step4. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 and or not ( ) true false $ bexpr bexpr -> bterm bexpr' bexpr -> bterm bexpr' bexpr -> bterm bexpr' bexpr -> bterm bexpr' bexpr' bexpr' -> or bterm bexpr' bexpr' -> \u03b5 bexpr' -> \u03b5 bterm bterm -> bfactor bterm' bterm -> bfactor bterm' bterm -> bfactor bterm' bterm -> bfactor bterm' bterm' bterm' -> and bfactor bterm' bterm' -> \u03b5 bterm' -> \u03b5 bfactor bfactor -> not bfactor bfactor -> (bexpr) bfactor -> true bfactor -> false","title":"\u89e3\u7b54"},{"location":"ch04/4.4/4.4/#442","text":"\u6709\u6ca1\u6709\u53ef\u80fd\u901a\u8fc7\u67d0\u79cd\u65b9\u6cd5\u4fee\u6539\u7ec3\u4e60 4.2.1 \u4e2d\u7684\u6587\u6cd5\uff0c\u6784\u9020\u51fa\u4e00\u4e2a\u4e0e\u8be5\u7ec3\u4e60\u4e2d\u7684\u8bed\u8a00\uff08\u8fd0\u7b97\u5206\u91cf\u4e3a a \u7684\u540e\u7f00\u8868\u8fbe\u5f0f\uff09\u5bf9\u5e94\u7684\u9884\u6d4b\u5206\u6790\u5668\uff1f","title":"4.4.2 \uff01\uff01"},{"location":"ch04/4.4/4.4/#_2","text":"S -> SS+ | SS* | a step1. \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 S -> SSA | a A -> + | * step2. \u6d88\u9664\u5de6\u9012\u5f52 i = 1 S -> aB B -> SAB | \u03b5 A -> + | * i = 2 j = 1 S -> aB B -> aBAB | \u03b5 A -> + | * step3. \u9884\u6d4b\u5206\u6790\u8868 \u975e\u7ec8\u7ed3\u7b26\u53f7 \u8f93\u5165\u7b26\u53f7 + * a $ S S -> aB A A -> + A -> * B B -> \u03b5 B -> \u03b5 B -> SAB B -> \u03b5","title":"\u89e3\u7b54"},{"location":"ch04/4.4/4.4/#443","text":"\u8ba1\u7b97\u7ec3\u4e60 4.2.1 \u7684\u6587\u6cd5\u7684 FIRST \u548c FOLLOW \u96c6\u5408\u3002","title":"4.4.3"},{"location":"ch04/4.4/4.4/#_3","text":"first(S) = [a] follow(S) = [a, +, *]","title":"\u89e3\u7b54"},{"location":"ch04/4.4/4.4/#444","text":"\u8ba1\u7b97\u7ec3\u4e60 4.2.2 \u4e2d\u5404\u4e2a\u6587\u6cd5\u7684 FIRST \u548c FOLLOW \u96c6\u5408\u3002","title":"4.4.4"},{"location":"ch04/4.4/4.4/#_4","text":"S -> 0 S 1 | 0 1 first(S) = [0] follow(S) = [1, $] S -> + S S | * S S | a first(S) = [+, *, a] follow(S) = [+, *, a, $] S -> S (S) S | \u03b5 first(S) = [(, \u03b5] followS(S) = [), $] S -> S + S | S S | (S) | S * | a first(S) = [(, a] follow(S) = [+, (, ), a, *, $] S -> (L) | a \u4ee5\u53ca L -> L, S | S first(S) = [(, a] follow(S) = [\",\", $] first(L) = first(S) = [(, a] follow(L) = [), \",\", $] S -> a S b S | b S a S | \u03b5 first(S) = [a, b, \u03b5] follow(S) = [a, b, $] \u4e0b\u9762\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684\u6587\u6cd5\uff1a bexpr -> bexpr or bterm | bterm bterm -> bterm and bfactor | bfactor bfactor -> not bfactor | (bexpr) | true | false","title":"\u89e3\u7b54"},{"location":"ch04/4.4/4.4/#445","text":"\u6587\u6cd5 S -> aSa | aa \u751f\u6210\u4e86\u6240\u6709\u7531 a \u7ec4\u6210\u7684\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u4e32\u3002\u6211\u4eec\u53ef\u4ee5\u4e3a\u8fd9\u4e2a\u6587\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u5e26\u56de\u6eaf\u7684\u9012\u5f52\u4e0b\u964d\u5206\u6790\u5668\u3002\u5982\u679c\u6211\u4eec\u9009\u62e9\u5148\u7528\u4ea7\u751f\u5f0f S -> aa \u5c55\u5f00\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u8bc6\u522b\u4e32 aa\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u5408\u7406\u7684\u9012\u5f52\u4e0b\u964d\u5206\u6790\u5668\u5c06\u9996\u5148\u5c1d\u8bd5 S -> aSa\u3002 \uff01 \u8bf4\u660e\u8fd9\u4e2a\u9012\u5f52\u4e0b\u964d\u5206\u6790\u5668\u8bc6\u522b\u8f93\u5165 aa\uff0caaaa \u548c aaaaaaaa\uff0c\u4f46\u8bc6\u522b\u4e0d\u4e86 aaaaaa\u3002 \uff01\uff01 \u8fd9\u4e2a\u9012\u5f52\u4e0b\u964d\u5206\u6790\u5668\u8bc6\u522b\u4ec0\u4e48\u6837\u7684\u8bed\u8a00\uff1f","title":"4.4.5"},{"location":"ch04/4.4/4.4/#_5","text":"\u4ee5\u4e0b\u9898\u76ee\u8bf7\u53c2\u8003 Aho \u672c\u4eba\u7684\u8bb2\u4e49\uff1a Aho: Properties of Context-Free Languages \uff0c \u672c\u5730\u526f\u672c \u6b64\u5916\u8fd8\u6709 \u53e6\u4e00\u7bc7\u5185\u5bb9\u76f8\u4f3c\u7684\u6587\u7ae0 \uff0c \u672c\u5730\u526f\u672c \u5173\u4e8e CNF \u548c CYK \u7b97\u6cd5\uff0c\u6709\u8f83\u591a\u76f8\u5173\u8d44\u6599\uff0c\u81ea\u884c\u641c\u7d22","title":"\u6ce8\u610f"},{"location":"ch04/4.4/4.4/#446","text":"\u5982\u679c\u4e00\u4e2a\u6587\u6cd5\u6ca1\u6709\u4ea7\u751f\u5f0f\u4f53\u4e3a \u03b5 \u7684\u4ea7\u751f\u5f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6587\u6cd5\u5c31\u662f\u65e0 \u03b5 \u4ea7\u751f\u5f0f\u7684\u3002 \u7ed9\u51fa\u4e00\u4e2a\u7b97\u6cd5\uff0c\u4ed6\u7684\u529f\u80fd\u662f\u628a\u4efb\u4f55\u6587\u6cd5\u8f6c\u53d8\u6210\u4e00\u4e2a\u65e0 \u03b5 \u4ea7\u751f\u5f0f\u7684\u751f\u6210\u76f8\u540c\u8bed\u8a00\u7684\u6587\u6cd5\uff08\u552f\u4e00\u53ef\u80fd\u7684\u4f8b\u5916\u662f\u7a7a\u4e32\u2014\u2014\u6ca1\u6709\u54ea\u4e2a\u65e0 \u03b5 \u4ea7\u751f\u5f0f\u7684\u6587\u6cd5\u80fd\u751f\u6210 \u03b5\uff09\u3002\u63d0\u793a\uff1a\u9996\u5148\u627e\u51fa\u6240\u6709\u53ef\u80fd\u4e3a\u7a7a\u7684\u975e\u7ec8\u7ed3\u7b26\u53f7\u3002\u975e\u7ec8\u7ed3\u7b26\u53f7\u53ef\u80fd\u4e3a\u7a7a\u662f\u6307\u5b83\uff08\u53ef\u80fd\u901a\u8fc7\u5f88\u957f\u7684\u63a8\u5bfc\uff09\u751f\u6210 \u03b5\u3002 \u5c06\u4f60\u7684\u7b97\u6cd5\u5e94\u7528\u4e8e\u6587\u6cd5 S -> aSbS | bSaS | \u03b5","title":"4.4.6 !"},{"location":"ch04/4.4/4.4/#447","text":"\u5355\u4ea7\u751f\u5f0f\u662f\u6307\u5176\u4ea7\u751f\u5f0f\u4f53\u4e3a\u5355\u4e2a\u975e\u7ec8\u7ed3\u7b26\u53f7\u7684\u4ea7\u751f\u5f0f\uff0c\u5373\u5f62\u5982 A -> B \u7684\u4ea7\u751f\u5f0f\u3002 \u7ed9\u51fa\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5b83\u53ef\u4ee5\u628a\u4efb\u4f55\u6587\u6cd5\u8f6c\u53d8\u6210\u4e00\u4e2a\u751f\u6210\u76f8\u540c\u8bed\u8a00\uff08\u552f\u4e00\u53ef\u80fd\u7684\u4f8b\u5916\u662f\u7a7a\u4e32\uff09\u7684\u3001\u65e0 \u03b5 \u4ea7\u751f\u5f0f\u3001\u65e0\u5355\u4ea7\u751f\u5f0f\u7684\u6587\u6cd5\u3002\u63d0\u793a\uff1a\u9996\u5148\u6d88\u9664 \u03b5 \u4ea7\u751f\u5f0f\uff0c\u7136\u540e\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u7684\u975e\u7ec8\u7ed3\u7b26\u53f7\u5bf9 A \u548c B\uff1a\u5b58\u5728 A =*=> B\u3002 \u5c06\u4f60\u7684\u7b97\u6cd5\u5e94\u7528\u4e8e 4.1.2 \u8282\u7684\u7b97\u6cd5\u3002 \u8bf4\u660e\u4f5c\u4e3a \uff081\uff09 \u7684\u4e00\u4e2a\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u6587\u6cd5\u8f6c\u6362\u6210\u4e00\u4e2a\u6ca1\u6709\u73af\u7684\u7b49\u4ef7\u6587\u6cd5\u3002","title":"4.4.7 \uff01"},{"location":"ch04/4.4/4.4/#448","text":"\u5982\u679c\u4e00\u4e2a\u6587\u6cd5\u7684\u6bcf\u4e2a\u4ea7\u751f\u5f0f\u8981\u4e48\u5f62\u5982 A -> BC\uff0c\u8981\u4e48\u5f62\u5982 A -> a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6587\u6cd5\u5c31\u6210\u4e3a Chomsky \u8303\u5f0f\uff08Chomsky Normal Form\uff0c CNF\uff09\u3002\u8bf4\u660e\u5982\u4f55\u5c06\u4efb\u610f\u6587\u6cd5\u8f6c\u53d8\u6210\u4e00\u4e2a\u751f\u6210\u76f8\u540c\u8bed\u8a00\uff08\u552f\u4e00\u53ef\u80fd\u7684\u4f8b\u5916\u662f\u7a7a\u4e32\u2014\u2014\u6ca1\u6709 CNF \u6587\u6cd5\u53ef\u4ee5\u751f\u6210 \u03b5\uff09\u7684 CNF \u6587\u6cd5\u3002","title":"4.4.8 \uff01\uff01"},{"location":"ch04/4.4/4.4/#449","text":"\u5bf9\u4e8e\u6bcf\u4e2a\u5177\u6709\u4e0a\u4e0b\u6587\u65e0\u5173\u7684\u8bed\u6cd5\uff0c\u5176\u957f\u5ea6\u4e3a n \u7684\u4e32\u53ef\u4ee5\u5728 O(n^3) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u8bc6\u522b\u3002\u5b8c\u6210\u8fd9\u79cd\u8bc6\u522b\u5de5\u4f5c\u7684\u4e00\u4e2a\u7b80\u5355\u65b9\u6cd5\u79f0\u4e3a Cocke-Younger-Kasami\uff08CYK\uff09\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u57fa\u4e8e\u52a8\u6001\u89c4\u5212\u6280\u672f\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4e32 a_1a_2\u2026a_n\uff0c\u6211\u4eec\u6784\u9020\u51fa\u4e00\u4e2a nxn \u7684\u8868 T \u4f7f\u5f97 T_ij \u662f\u53ef\u4ee5\u751f\u6210\u5b50\u4e32 a_ia_i+1\u2026aj \u7684\u975e\u7ec8\u7ed3\u7b26\u53f7\u7684\u96c6\u5408\u3002\u5982\u679c\u57fa\u7840\u6587\u6cd5\u662f CNF \u7684\uff0c\u90a3\u4e48\u53ea\u8981\u6211\u4eec\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\u6765\u586b\u8868\uff1a\u5148\u586b j-i \u503c\u6700\u5c0f\u7684\u6761\u76ee\uff0c\u5219\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6761\u76ee\u90fd\u53ef\u4ee5\u5728 O(n) \u65f6\u95f4\u5185\u586b\u5199\u5b8c\u6bd5\u3002\u7ed9\u51fa\u4e00\u4e2a\u80fd\u591f\u6b63\u786e\u586b\u5199\u8fd9\u4e2a\u8868\u7684\u6761\u76ee\u7684\u7b97\u6cd5\uff0c\u5e76\u8bf4\u660e\u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3)\u3002\u586b\u5b8c\u8fd9\u4e2a\u8868\u4e4b\u540e\uff0c\u4f60\u5982\u4f55\u5224\u65ad a_1a_2\u2026a_n \u662f\u5426\u5728\u8fd9\u4e2a\u8bed\u8a00\u4e2d\uff1f","title":"4.4.9 \uff01"},{"location":"ch04/4.4/4.4/#4410","text":"\u8bf4\u660e\u6211\u4eec\u5982\u4f55\u80fd\u591f\u5728\u586b\u597d\u7ec3\u4e60 4.4.9 \u4e2d\u7684\u8868\u4e4b\u540e\uff0c\u5728 O(n) \u7684\u65f6\u95f4\u5185\u83b7\u5f97 a_1a_2\u2026a_n \u5bf9\u5e94\u7684\u4e00\u9897\u8bed\u6cd5\u5206\u6790\u6811\uff1f\u63d0\u793a\uff1a\u4fee\u6539\u7ec3\u4e60 4.4.9 \u4e2d\u7684\u8868 T\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u8868\u7684\u6bcf\u4e2a\u6761\u76ee T_ij \u4e2d\u7684\u6bcf\u4e2a\u975e\u7ec8\u7ed3\u7b26\u53f7 A\uff0c\u8fd9\u4e2a\u8868\u540c\u65f6\u8bb0\u5f55\u4e86\u5176\u4ed6\u6761\u76ee\u4e2d\u7684\u54ea\u4e24\u4e2a\u975e\u7ec8\u7ed3\u7b26\u53f7\u7ec4\u6210\u7684\u5bf9\u5076\u4f7f\u5f97\u6211\u4eec\u5c06 A \u653e\u5230 T_ij \u4e2d\u3002","title":"4.4.10 \uff01"},{"location":"ch04/4.4/4.4/#4411","text":"\u4fee\u6539\u7ec3\u4e60 4.4.9 \u4e2d\u7684\u7b97\u6cd5\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u7b26\u53f7\u4e32\uff0c\u4ed6\u53ef\u4ee5\u627e\u51fa\u81f3\u5c11\u9700\u8981\u6267\u884c\u591a\u5c11\u6b21\u63d2\u5165\u3001\u5220\u9664\u548c\u4fee\u6539\u9519\u8bef\uff08\u6bcf\u4e2a\u9519\u8bef\u662f\u4e00\u4e2a\u5b57\u7b26\uff09\u7684\u64cd\u4f5c\u624d\u80fd\u5c06\u8fd9\u4e2a\u4e32\u53d8\u6210\u57fa\u7840\u6587\u6cd5\u7684\u8bed\u8a00\u7684\u53e5\u5b50\u3002","title":"4.4.11 \uff01"},{"location":"ch04/4.4/4.4/#4412","text":"stmt -> if e then stmt stmtTail | while e do stmt | begin list end | s stmtTail -> else stmt | \u03b5 list -> stmt listTail listTail -> ; list | \u03b5 \u4e0a\u9762\u7684\u4ee3\u7801\u7ed9\u51fa\u4e86\u5bf9\u5e94\u4e8e\u67d0\u4e9b\u8bed\u53e5\u7684\u6587\u6cd5\u3002\u4f60\u53ef\u4ee5\u5c06 e \u548c s \u5f53\u505a\u5206\u522b\u4ee3\u8868\u6761\u4ef6\u8868\u8fbe\u5f0f\u548c\u201c\u5176\u4ed6\u8bed\u53e5\u201d\u7684\u7ec8\u7ed3\u7b26\u53f7\u3002\u5982\u679c\u6211\u4eec\u6309\u7167\u4e0b\u5217\u65b9\u6cd5\u6765\u89e3\u51b3\u56e0\u4e3a\u5c55\u5f00\u53ef\u9009\u201celse\u201d\uff08\u975e\u7ec8\u7ed3\u7b26\u53f7 stmtTail\uff09\u800c\u5f15\u8d77\u7684\u51b2\u7a81\uff1a\u5f53\u6211\u4eec\u4ece\u8f93\u5165\u4e2d\u770b\u5230\u4e00\u4e2a else \u65f6\u5c31\u9009\u62e9\u6d88\u8017\u6389\u8fd9\u4e2a else\u3002\u4f7f\u7528 4.4.5 \u8282\u4e2d\u63cf\u8ff0\u7684\u540c\u6b65\u7b26\u53f7\u7684\u601d\u60f3\uff1a \u4e3a\u8fd9\u4e2a\u6587\u6cd5\u6784\u9020\u4e00\u4e2a\u5e26\u6709\u9519\u8bef\u7ea0\u6b63\u4fe1\u606f\u7684\u9884\u6d4b\u5206\u6790\u8868\u3002 \u7ed9\u51fa\u4f60\u7684\u8bed\u6cd5\u5206\u6790\u5668\u5728\u5904\u7406\u4e0b\u5217\u8f93\u5165\u65f6\u7684\u884c\u4e3a\uff1a if e then s; if e then s end while e do begin s; if e then e; end","title":"4.4.12 \uff01"},{"location":"ch04/4.5/4.5/","text":"4.5 \u8282\u7684\u7ec3\u4e60 4.5.1 \u5bf9\u4e8e\u7ec3\u4e60 4.2.2\uff08a\uff09\u4e2d\u7684\u6587\u6cd5 S -> 0 S 1 | 0 1\uff0c\u6307\u51fa\u4e0b\u9762\u5404\u4e2a\u6700\u53f3\u53e5\u578b\u7684\u53e5\u67c4\u3002 000111 00S11 \u89e3\u7b54 01 0S1 4.5.2 \u5bf9\u4e8e\u7ec3\u4e60 4.2.1 \u7684\u6587\u6cd5 S -> S S + | S S * | a \u548c\u4e0b\u9762\u5404\u4e2a\u6700\u53f3\u53e5\u578b\uff0c\u91cd\u590d\u7ec3\u4e60 4.5.1 \u3002 SSS+a*+ SS+a*a+ aaa*a++ \u89e3\u7b54 SS+ SS+ a 4.5.3 \u5bf9\u4e8e\u4e0b\u9762\u7684\u8f93\u5165\u7b26\u53f7\u4e32\u548c\u6587\u6cd5\uff0c\u8bf4\u660e\u76f8\u5e94\u7684\u81ea\u5e95\u5411\u4e0a\u8bed\u6cd5\u5206\u6790\u8fc7\u7a0b\u3002 \u7ec3\u4e60 4.5.1 \u7684\u6587\u6cd5\u7684\u4e32 000111 \u3002 \u7ec3\u4e60 4.5.2 \u7684\u6587\u6cd5\u7684\u4e32 aaa*a++ \u3002 \u89e3\u7b54 1\u3001 000111 \u6808 \u8f93\u5165 \u53e5\u67c4 \u52a8\u4f5c $ 000111$ \u79fb\u5165 $0 00111$ \u79fb\u5165 $00 0111$ \u79fb\u5165 $000 111$ \u79fb\u5165 $0001 11$ 01 \u89c4\u7ea6\uff1aS -> 01 $00S 11$ \u79fb\u5165 $00S1 1$ 0S1 \u89c4\u7ea6\uff1aS -> 0S1 $0S 1$ \u79fb\u5165 $0S1 $ 0S1 \u89c4\u7ea6\uff1aS -> 0S1 $S $ \u63a5\u53d7 2\u3001 aaa*a++ \u6808 \u8f93\u5165 \u53e5\u67c4 \u52a8\u4f5c $ aaa*a++$ \u79fb\u5165 $a aa*a++$ a \u89c4\u7ea6: S -> a $S aa*a++$ \u79fb\u5165 $Sa a*a++$ a \u89c4\u7ea6: S -> a $SS a*a++$ \u79fb\u5165 $SSa *a++$ a \u89c4\u7ea6: S -> a $SSS *a++$ \u79fb\u5165 $SSS* a++$ SS* \u89c4\u7ea6: S -> SS* $SS a++$ \u79fb\u5165 $SSa ++$ a \u89c4\u7ea6: S -> a $SSS ++$ \u79fb\u5165 $SSS+ +$ SS+ \u89c4\u7ea6: S -> SS+ $SS +$ \u79fb\u5165 $SS+ $ SS+ \u89c4\u7ea6: S -> SS+ $S $ \u63a5\u53d7","title":"4.5 \u8282\u7684\u7ec3\u4e60"},{"location":"ch04/4.5/4.5/#45","text":"","title":"4.5 \u8282\u7684\u7ec3\u4e60"},{"location":"ch04/4.5/4.5/#451","text":"\u5bf9\u4e8e\u7ec3\u4e60 4.2.2\uff08a\uff09\u4e2d\u7684\u6587\u6cd5 S -> 0 S 1 | 0 1\uff0c\u6307\u51fa\u4e0b\u9762\u5404\u4e2a\u6700\u53f3\u53e5\u578b\u7684\u53e5\u67c4\u3002 000111 00S11","title":"4.5.1"},{"location":"ch04/4.5/4.5/#_1","text":"01 0S1","title":"\u89e3\u7b54"},{"location":"ch04/4.5/4.5/#452","text":"\u5bf9\u4e8e\u7ec3\u4e60 4.2.1 \u7684\u6587\u6cd5 S -> S S + | S S * | a \u548c\u4e0b\u9762\u5404\u4e2a\u6700\u53f3\u53e5\u578b\uff0c\u91cd\u590d\u7ec3\u4e60 4.5.1 \u3002 SSS+a*+ SS+a*a+ aaa*a++","title":"4.5.2"},{"location":"ch04/4.5/4.5/#_2","text":"SS+ SS+ a","title":"\u89e3\u7b54"},{"location":"ch04/4.5/4.5/#453","text":"\u5bf9\u4e8e\u4e0b\u9762\u7684\u8f93\u5165\u7b26\u53f7\u4e32\u548c\u6587\u6cd5\uff0c\u8bf4\u660e\u76f8\u5e94\u7684\u81ea\u5e95\u5411\u4e0a\u8bed\u6cd5\u5206\u6790\u8fc7\u7a0b\u3002 \u7ec3\u4e60 4.5.1 \u7684\u6587\u6cd5\u7684\u4e32 000111 \u3002 \u7ec3\u4e60 4.5.2 \u7684\u6587\u6cd5\u7684\u4e32 aaa*a++ \u3002","title":"4.5.3"},{"location":"ch04/4.5/4.5/#_3","text":"1\u3001 000111 \u6808 \u8f93\u5165 \u53e5\u67c4 \u52a8\u4f5c $ 000111$ \u79fb\u5165 $0 00111$ \u79fb\u5165 $00 0111$ \u79fb\u5165 $000 111$ \u79fb\u5165 $0001 11$ 01 \u89c4\u7ea6\uff1aS -> 01 $00S 11$ \u79fb\u5165 $00S1 1$ 0S1 \u89c4\u7ea6\uff1aS -> 0S1 $0S 1$ \u79fb\u5165 $0S1 $ 0S1 \u89c4\u7ea6\uff1aS -> 0S1 $S $ \u63a5\u53d7 2\u3001 aaa*a++ \u6808 \u8f93\u5165 \u53e5\u67c4 \u52a8\u4f5c $ aaa*a++$ \u79fb\u5165 $a aa*a++$ a \u89c4\u7ea6: S -> a $S aa*a++$ \u79fb\u5165 $Sa a*a++$ a \u89c4\u7ea6: S -> a $SS a*a++$ \u79fb\u5165 $SSa *a++$ a \u89c4\u7ea6: S -> a $SSS *a++$ \u79fb\u5165 $SSS* a++$ SS* \u89c4\u7ea6: S -> SS* $SS a++$ \u79fb\u5165 $SSa ++$ a \u89c4\u7ea6: S -> a $SSS ++$ \u79fb\u5165 $SSS+ +$ SS+ \u89c4\u7ea6: S -> SS+ $SS +$ \u79fb\u5165 $SS+ $ SS+ \u89c4\u7ea6: S -> SS+ $S $ \u63a5\u53d7","title":"\u89e3\u7b54"},{"location":"ch04/4.6/4.6/","text":"4.6 \u8282\u7684\u7ec3\u4e60 4.6.1 \u63cf\u8ff0\u4e0b\u5217\u6587\u6cd5\u7684\u6240\u6709\u53ef\u884c\u524d\u7f00 \u7ec3\u4e604.2.2-1\u7684\u6587\u6cd5 S->0S1|01 \uff01 \u7ec3\u4e604.2.1\u7684\u6587\u6cd5 S->SS+|SS*|a \uff01 \u7ec3\u4e604.2.2-3\u7684\u6587\u6cd5 S->S(S)S|\u03b5 \u89e3\u7b54 \u4ee5\u4e0b\u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u548c\u6d88\u9664\u5de6\u9012\u5f52\u540e\u7684\u6587\u6cd5\u5747\u7531\u7ec3\u4e60 4.3.2 \u5f97\u5230 \u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u548c\u6d88\u9664\u5de6\u9012\u5f52\u540e\u7684\u589e\u5e7f\u6587\u6cd5 0) S' -> S 1) S -> 0 A 2) A -> 0 A 1 3) A -> 1 LR(0) \u81ea\u52a8\u673a \u53ef\u884c\u524d\u7f00\u4e3a 0+A?1? \u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u548c\u6d88\u9664\u5de6\u9012\u5f52\u540e\u7684\u589e\u5e7f\u6587\u6cd5 0) S' -> S 1) S -> a B 2) B -> a B A B 3) B -> \u03b5 4) A -> + 5) A -> * LR(0) \u81ea\u52a8\u673a \u53ef\u884c\u524d\u7f00\u4e3a aB?|a{2,\u221e}(BAa+)*(B|B+|B*|BA|BAB)? \u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u548c\u6d88\u9664\u5de6\u9012\u5f52\u540e\u7684\u589e\u5e7f\u6587\u6cd5 0) S' -> S 1) S -> A 2) A -> (S) S A 3) A -> \u03b5 LR(0) \u81ea\u52a8\u673a \u7bad\u5934\u592a\u590d\u6742\uff0c\u61d2\u5f97\u5f52\u7eb3\u4e86 4.6.2 \u4e3a\u7ec3\u4e604.2.1\u4e2d\u7684\uff08\u589e\u5e7f\uff09\u6587\u6cd5\u6784\u9020SLR\u9879\u96c6\u3002\u8ba1\u7b97\u8fd9\u4e9b\u9879\u96c6\u7684GOTO\u51fd\u6570\u3002\u7ed9\u51fa\u8fd9\u4e2a\u51fd\u6570\u7684\u8bed\u6cd5\u5206\u6790\u8868\u3002\u8fd9\u4e2a\u6587\u6cd5\u662fSLR\u6587\u6cd5\u5417\uff1f \u89e3\u7b54 \u8be5\u6587\u6cd5\u7684\u9879\u96c6\u548c GOTO \u51fd\u6570\u89c1 4.6.1-2 FOLLOW \u51fd\u6570\u5982\u4e0b\uff1a FOLLOW(S) = [$] FOLLOW(A) = [a, $] FOLLOW(B) = [+, * ,$] \u8bed\u6cd5\u5206\u6790\u8868\u5982\u4e0b\uff1a \u72b6\u6001 ACTION GOTO a + * $ S A B 0 s2 s1 1 acc 2 s4 r3 r3 r3 s3 3 r1 4 s4 r3 r3 r3 s5 5 s7 s8 s6 6 s4 r3 r3 r3 s9 7 r4 r4 8 r5 r5 9 r2 r2 r2 \u65e0\u51b2\u7a81\uff0c\u8fd9\u663e\u7136\u662f\u4e00\u4e2a SLR \u6587\u6cd5 4.6.3 \u5229\u7528\u7ec3\u4e604.6.2\u5f97\u5230\u7684\u8bed\u6cd5\u5206\u6790\u8868\uff0c\u7ed9\u51fa\u5904\u7406\u8f93\u5165aa*a+\u65f6\u7684\u5404\u4e2a\u52a8\u4f5c\u3002 \u89e3\u7b54 \u6808 \u7b26\u53f7 \u8f93\u5165 \u52a8\u4f5c 1) 0 aa*a+$ \u79fb\u5165 2) 02 a a*a+$ \u79fb\u5165 3) 024 aa *a+$ \u6839\u636e B -> \u03b5 \u89c4\u7ea6 4) 0245 aaB *a+$ \u79fb\u5165 5) 02458 aaB* a+$ \u6839\u636e A -> * \u89c4\u7ea6 6) 02456 aaBA a+$ \u79fb\u5165 7) 024564 aaBAa +$ \u6839\u636e B -> \u03b5 \u89c4\u7ea6 8) 0245645 aaBAaB +$ \u79fb\u5165 9) 02456457 aaBAaB+ $ \u6839\u636e A -> + \u89c4\u7ea6 9) 02456456 aaBAaBA $ \u6839\u636e B -> \u03b5 \u89c4\u7ea6 10) 024564569 aaBAaBAB $ \u6839\u636e B -> aBAB \u89c4\u7ea6 11) 024569 aaBAB $ \u6839\u636e B -> aBAB \u89c4\u7ea6 12) 023 aB $ \u6839\u636e S -> aB \u89c4\u7ea6 13) 01 S $ \u63a5\u53d7 4.6.4 \u5bf9\u4e8e\u7ec3\u4e604.2.2-1~4.2.2-7\u4e2d\u7684\u5404\u4e2a\uff08\u589e\u5e7f\uff09\u6587\u6cd5\uff1a \u6784\u9020SLR\u9879\u96c6\u548c\u4ed6\u4eec\u7684GOTO\u51fd\u6570 \u6307\u51fa\u4f60\u7684\u9879\u96c6\u4e2d\u7684\u6240\u6709\u52a8\u4f5c\u51b2\u7a81 \u5982\u679c\u5b58\u5728SLR\u8bed\u6cd5\u5206\u6790\u8868\uff0c\u6784\u9020\u51fa\u8fd9\u4e2a\u8bed\u6cd5\u5206\u6790\u8868 4.6.5 \u8bf4\u660e\u4e0b\u9762\u7684\u6587\u6cd5 S->AaAb|BbBa A->\u03b5 B->\u03b5 \u662fLL(1)\u7684\uff0c\u4f46\u4e0d\u662fSLR(1)\u7684\u3002 \u89e3\u7b54 \u8be5\u6587\u6cd5\u662f LL(1) \u7684 \u89c1 4.4.3 \u8282\uff0cp142 \u7684\u5224\u5b9a\u6807\u51c6 \u8be5\u6587\u6cd5\u4e0d\u662f SLR(1) \u7684 I_0 S' -> .S S -> .AaAb S -> .BbBa A -> . B -> . \u7531\u4e8e FOLLOW(A) = FOLLOW(B) = [a, b]\uff0c\u6240\u4ee5\u5f53 I_0 \u540e\u8f93\u5165\u4e3a a \u6216 b \u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u89c4\u7ea6\u51b2\u7a81\u3002 4.6.6 \u8bf4\u660e\u4e0b\u9762\u7684\u6587\u6cd5 S->SA|A A->a \u662fSLR(1)\u7684\uff0c\u4f46\u4e0d\u662fLL(1)\u7684 \u89e3\u7b54 \u8be5\u6587\u6cd5\u4e0d\u662f LL(1) \u7684 S -> SA \u548c S -> A \u5747\u80fd\u63a8\u5bfc\u51fa\u4ee5 a \u5f00\u5934\u7684\u4e32\uff0c\u6240\u4ee5\u4e0d\u662f LL(1) \u7684 \u8be5\u6587\u6cd5\u662f SLR(1) \u7684 \u8be5\u6587\u6cd5\u751f\u6210\u7684\u8bed\u6cd5\u5206\u6790\u8868\u662f\u6ca1\u6709\u51b2\u7a81\u7684 4.6.7!! \u8003\u8651\u6309\u7167\u4e0b\u9762\u7684\u65b9\u5f0f\u5b9a\u4e49\u7684\u6587\u6cd5\u65cf G_n\uff1a S -> A_i b_i \u5176\u4e2d1<=i<=n A_i-> a_j A_j | a_j \u5176\u4e2d1<=i,j<=n \u4e14i<>n \u8bf4\u660e\uff1a G_n\u6709 2n^2-n \u4e2a\u4ea7\u751f\u5f0f G_n\u6709 2^n+n^2+n \u4e2a LR(0) \u9879\u96c6 G_n\u662f SLR(1) \u7684 \u5173\u4e8eLR\u8bed\u6cd5\u5206\u6790\u5668\u7684\u5927\u5c0f\uff0c\u8fd9\u4e2a\u5206\u6790\u7ed3\u679c\u8bf4\u660e\u4e86\u4ec0\u4e48\uff1f 4.6.8! \u6211\u4eec\u8bf4\u5355\u4e2a\u9879\u53ef\u4ee5\u770b\u505a\u4e00\u4e2a NFA \u7684\u72b6\u6001\uff0c\u800c\u6709\u6548\u9879\u7684\u96c6\u5408\u5c31\u662f\u4e00\u4e2a DFA \u7684\u72b6\u6001\u3002\u5bf9\u4e8e\u7ec3\u4e604.2.1\u7684\u6587\u6cd5 S->SS+|SS*|a \u6839\u636e\u201c\u5c06\u9879\u770b\u4f5c\u4e00\u4e2aNFA\u7684\u72b6\u6001\u201d\u90e8\u5206\u4e2d\u7684\u89c4\u5219\uff0c\u753b\u51fa\u8fd9\u4e2a\u6587\u6cd5\u7684\u6709\u6548\u7684\u8f6c\u6362\u56fe\uff08NFA\uff09 \u5c06\u5b50\u96c6\u6784\u9020\u7b97\u6cd5\uff08\u7b97\u6cd53.20\uff09\u5e94\u7528\u4e8e\u5728\uff081\uff09\u90e8\u5206\u6784\u9020\u5f97\u5230\u7684NFA\u3002\u5f97\u5230\u7684DFA\u548c\u8fd9\u4e2a\u6587\u6cd5\u7684LR(0)\u9879\u96c6\u6bd4\u6709\u4ec0\u4e48\u5173\u7cfb \uff01\uff01 \u8bf4\u660e\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u5c06\u5b50\u96c6\u6784\u9020\u7b97\u6cd5\u5e94\u7528\u4e8e\u4e00\u4e2a\u6587\u6cd5\u7684\u6709\u6548\u9879\u7684NFA\u6240\u5f97\u5230\u7684\u5c31\u662f\u8be5\u6587\u6cd5\u7684 LR(0) \u9879\u96c6 4.6.9! \u4e0b\u9762\u662f\u4e00\u4e2a\u4e8c\u4e49\u6027\u7684\u6587\u6cd5 S->AS|b A->SA|a \u6784\u9020\u51fa\u8fd9\u4e2a\u6587\u6cd5\u7684\u89c4\u8303LR(0)\u9879\u96c6\u65cf\u3002\u5982\u679c\u6211\u4eec\u8bd5\u56fe\u4e3a\u8fd9\u4e2a\u6587\u6cd5\u6784\u9020\u51fa\u4e00\u4e2aLR\u8bed\u6cd5\u5206\u6790\u8868\uff0c\u5fc5\u7136\u4f1a\u5b58\u5728\u67d0\u4e9b\u51b2\u7a81\u52a8\u4f5c\u3002\u90fd\u6709\u54ea\u4e9b\u51b2\u7a81\u52a8\u4f5c\uff1f\u5047\u8bbe\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u8bed\u6cd5\u5206\u6790\u8868\uff0c\u5e76\u4e14\u5728\u51fa\u73b0\u51b2\u7a81\u65f6\u4e0d\u786e\u5b9a\u5730\u9009\u62e9\u4e00\u4e2a\u52a8\u4f5c\u3002\u7ed9\u51fa\u8f93\u5165abab\u65f6\u6240\u6709\u53ef\u80fd\u7684\u52a8\u4f5c\u5e8f\u5217","title":"4.6 \u8282\u7684\u7ec3\u4e60"},{"location":"ch04/4.6/4.6/#46","text":"","title":"4.6 \u8282\u7684\u7ec3\u4e60"},{"location":"ch04/4.6/4.6/#461","text":"\u63cf\u8ff0\u4e0b\u5217\u6587\u6cd5\u7684\u6240\u6709\u53ef\u884c\u524d\u7f00 \u7ec3\u4e604.2.2-1\u7684\u6587\u6cd5 S->0S1|01 \uff01 \u7ec3\u4e604.2.1\u7684\u6587\u6cd5 S->SS+|SS*|a \uff01 \u7ec3\u4e604.2.2-3\u7684\u6587\u6cd5 S->S(S)S|\u03b5","title":"4.6.1"},{"location":"ch04/4.6/4.6/#_1","text":"\u4ee5\u4e0b\u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u548c\u6d88\u9664\u5de6\u9012\u5f52\u540e\u7684\u6587\u6cd5\u5747\u7531\u7ec3\u4e60 4.3.2 \u5f97\u5230 \u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u548c\u6d88\u9664\u5de6\u9012\u5f52\u540e\u7684\u589e\u5e7f\u6587\u6cd5 0) S' -> S 1) S -> 0 A 2) A -> 0 A 1 3) A -> 1 LR(0) \u81ea\u52a8\u673a \u53ef\u884c\u524d\u7f00\u4e3a 0+A?1? \u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u548c\u6d88\u9664\u5de6\u9012\u5f52\u540e\u7684\u589e\u5e7f\u6587\u6cd5 0) S' -> S 1) S -> a B 2) B -> a B A B 3) B -> \u03b5 4) A -> + 5) A -> * LR(0) \u81ea\u52a8\u673a \u53ef\u884c\u524d\u7f00\u4e3a aB?|a{2,\u221e}(BAa+)*(B|B+|B*|BA|BAB)? \u63d0\u53d6\u5de6\u516c\u56e0\u5b50\u548c\u6d88\u9664\u5de6\u9012\u5f52\u540e\u7684\u589e\u5e7f\u6587\u6cd5 0) S' -> S 1) S -> A 2) A -> (S) S A 3) A -> \u03b5 LR(0) \u81ea\u52a8\u673a \u7bad\u5934\u592a\u590d\u6742\uff0c\u61d2\u5f97\u5f52\u7eb3\u4e86","title":"\u89e3\u7b54"},{"location":"ch04/4.6/4.6/#462","text":"\u4e3a\u7ec3\u4e604.2.1\u4e2d\u7684\uff08\u589e\u5e7f\uff09\u6587\u6cd5\u6784\u9020SLR\u9879\u96c6\u3002\u8ba1\u7b97\u8fd9\u4e9b\u9879\u96c6\u7684GOTO\u51fd\u6570\u3002\u7ed9\u51fa\u8fd9\u4e2a\u51fd\u6570\u7684\u8bed\u6cd5\u5206\u6790\u8868\u3002\u8fd9\u4e2a\u6587\u6cd5\u662fSLR\u6587\u6cd5\u5417\uff1f","title":"4.6.2"},{"location":"ch04/4.6/4.6/#_2","text":"\u8be5\u6587\u6cd5\u7684\u9879\u96c6\u548c GOTO \u51fd\u6570\u89c1 4.6.1-2 FOLLOW \u51fd\u6570\u5982\u4e0b\uff1a FOLLOW(S) = [$] FOLLOW(A) = [a, $] FOLLOW(B) = [+, * ,$] \u8bed\u6cd5\u5206\u6790\u8868\u5982\u4e0b\uff1a \u72b6\u6001 ACTION GOTO a + * $ S A B 0 s2 s1 1 acc 2 s4 r3 r3 r3 s3 3 r1 4 s4 r3 r3 r3 s5 5 s7 s8 s6 6 s4 r3 r3 r3 s9 7 r4 r4 8 r5 r5 9 r2 r2 r2 \u65e0\u51b2\u7a81\uff0c\u8fd9\u663e\u7136\u662f\u4e00\u4e2a SLR \u6587\u6cd5","title":"\u89e3\u7b54"},{"location":"ch04/4.6/4.6/#463","text":"\u5229\u7528\u7ec3\u4e604.6.2\u5f97\u5230\u7684\u8bed\u6cd5\u5206\u6790\u8868\uff0c\u7ed9\u51fa\u5904\u7406\u8f93\u5165aa*a+\u65f6\u7684\u5404\u4e2a\u52a8\u4f5c\u3002","title":"4.6.3"},{"location":"ch04/4.6/4.6/#_3","text":"\u6808 \u7b26\u53f7 \u8f93\u5165 \u52a8\u4f5c 1) 0 aa*a+$ \u79fb\u5165 2) 02 a a*a+$ \u79fb\u5165 3) 024 aa *a+$ \u6839\u636e B -> \u03b5 \u89c4\u7ea6 4) 0245 aaB *a+$ \u79fb\u5165 5) 02458 aaB* a+$ \u6839\u636e A -> * \u89c4\u7ea6 6) 02456 aaBA a+$ \u79fb\u5165 7) 024564 aaBAa +$ \u6839\u636e B -> \u03b5 \u89c4\u7ea6 8) 0245645 aaBAaB +$ \u79fb\u5165 9) 02456457 aaBAaB+ $ \u6839\u636e A -> + \u89c4\u7ea6 9) 02456456 aaBAaBA $ \u6839\u636e B -> \u03b5 \u89c4\u7ea6 10) 024564569 aaBAaBAB $ \u6839\u636e B -> aBAB \u89c4\u7ea6 11) 024569 aaBAB $ \u6839\u636e B -> aBAB \u89c4\u7ea6 12) 023 aB $ \u6839\u636e S -> aB \u89c4\u7ea6 13) 01 S $ \u63a5\u53d7","title":"\u89e3\u7b54"},{"location":"ch04/4.6/4.6/#464","text":"\u5bf9\u4e8e\u7ec3\u4e604.2.2-1~4.2.2-7\u4e2d\u7684\u5404\u4e2a\uff08\u589e\u5e7f\uff09\u6587\u6cd5\uff1a \u6784\u9020SLR\u9879\u96c6\u548c\u4ed6\u4eec\u7684GOTO\u51fd\u6570 \u6307\u51fa\u4f60\u7684\u9879\u96c6\u4e2d\u7684\u6240\u6709\u52a8\u4f5c\u51b2\u7a81 \u5982\u679c\u5b58\u5728SLR\u8bed\u6cd5\u5206\u6790\u8868\uff0c\u6784\u9020\u51fa\u8fd9\u4e2a\u8bed\u6cd5\u5206\u6790\u8868","title":"4.6.4"},{"location":"ch04/4.6/4.6/#465","text":"\u8bf4\u660e\u4e0b\u9762\u7684\u6587\u6cd5 S->AaAb|BbBa A->\u03b5 B->\u03b5 \u662fLL(1)\u7684\uff0c\u4f46\u4e0d\u662fSLR(1)\u7684\u3002","title":"4.6.5"},{"location":"ch04/4.6/4.6/#_4","text":"\u8be5\u6587\u6cd5\u662f LL(1) \u7684 \u89c1 4.4.3 \u8282\uff0cp142 \u7684\u5224\u5b9a\u6807\u51c6 \u8be5\u6587\u6cd5\u4e0d\u662f SLR(1) \u7684 I_0 S' -> .S S -> .AaAb S -> .BbBa A -> . B -> . \u7531\u4e8e FOLLOW(A) = FOLLOW(B) = [a, b]\uff0c\u6240\u4ee5\u5f53 I_0 \u540e\u8f93\u5165\u4e3a a \u6216 b \u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u89c4\u7ea6\u51b2\u7a81\u3002","title":"\u89e3\u7b54"},{"location":"ch04/4.6/4.6/#466","text":"\u8bf4\u660e\u4e0b\u9762\u7684\u6587\u6cd5 S->SA|A A->a \u662fSLR(1)\u7684\uff0c\u4f46\u4e0d\u662fLL(1)\u7684","title":"4.6.6"},{"location":"ch04/4.6/4.6/#_5","text":"\u8be5\u6587\u6cd5\u4e0d\u662f LL(1) \u7684 S -> SA \u548c S -> A \u5747\u80fd\u63a8\u5bfc\u51fa\u4ee5 a \u5f00\u5934\u7684\u4e32\uff0c\u6240\u4ee5\u4e0d\u662f LL(1) \u7684 \u8be5\u6587\u6cd5\u662f SLR(1) \u7684 \u8be5\u6587\u6cd5\u751f\u6210\u7684\u8bed\u6cd5\u5206\u6790\u8868\u662f\u6ca1\u6709\u51b2\u7a81\u7684","title":"\u89e3\u7b54"},{"location":"ch04/4.6/4.6/#467","text":"\u8003\u8651\u6309\u7167\u4e0b\u9762\u7684\u65b9\u5f0f\u5b9a\u4e49\u7684\u6587\u6cd5\u65cf G_n\uff1a S -> A_i b_i \u5176\u4e2d1<=i<=n A_i-> a_j A_j | a_j \u5176\u4e2d1<=i,j<=n \u4e14i<>n \u8bf4\u660e\uff1a G_n\u6709 2n^2-n \u4e2a\u4ea7\u751f\u5f0f G_n\u6709 2^n+n^2+n \u4e2a LR(0) \u9879\u96c6 G_n\u662f SLR(1) \u7684 \u5173\u4e8eLR\u8bed\u6cd5\u5206\u6790\u5668\u7684\u5927\u5c0f\uff0c\u8fd9\u4e2a\u5206\u6790\u7ed3\u679c\u8bf4\u660e\u4e86\u4ec0\u4e48\uff1f","title":"4.6.7!!"},{"location":"ch04/4.6/4.6/#468","text":"\u6211\u4eec\u8bf4\u5355\u4e2a\u9879\u53ef\u4ee5\u770b\u505a\u4e00\u4e2a NFA \u7684\u72b6\u6001\uff0c\u800c\u6709\u6548\u9879\u7684\u96c6\u5408\u5c31\u662f\u4e00\u4e2a DFA \u7684\u72b6\u6001\u3002\u5bf9\u4e8e\u7ec3\u4e604.2.1\u7684\u6587\u6cd5 S->SS+|SS*|a \u6839\u636e\u201c\u5c06\u9879\u770b\u4f5c\u4e00\u4e2aNFA\u7684\u72b6\u6001\u201d\u90e8\u5206\u4e2d\u7684\u89c4\u5219\uff0c\u753b\u51fa\u8fd9\u4e2a\u6587\u6cd5\u7684\u6709\u6548\u7684\u8f6c\u6362\u56fe\uff08NFA\uff09 \u5c06\u5b50\u96c6\u6784\u9020\u7b97\u6cd5\uff08\u7b97\u6cd53.20\uff09\u5e94\u7528\u4e8e\u5728\uff081\uff09\u90e8\u5206\u6784\u9020\u5f97\u5230\u7684NFA\u3002\u5f97\u5230\u7684DFA\u548c\u8fd9\u4e2a\u6587\u6cd5\u7684LR(0)\u9879\u96c6\u6bd4\u6709\u4ec0\u4e48\u5173\u7cfb \uff01\uff01 \u8bf4\u660e\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u5c06\u5b50\u96c6\u6784\u9020\u7b97\u6cd5\u5e94\u7528\u4e8e\u4e00\u4e2a\u6587\u6cd5\u7684\u6709\u6548\u9879\u7684NFA\u6240\u5f97\u5230\u7684\u5c31\u662f\u8be5\u6587\u6cd5\u7684 LR(0) \u9879\u96c6","title":"4.6.8!"},{"location":"ch04/4.6/4.6/#469","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u4e8c\u4e49\u6027\u7684\u6587\u6cd5 S->AS|b A->SA|a \u6784\u9020\u51fa\u8fd9\u4e2a\u6587\u6cd5\u7684\u89c4\u8303LR(0)\u9879\u96c6\u65cf\u3002\u5982\u679c\u6211\u4eec\u8bd5\u56fe\u4e3a\u8fd9\u4e2a\u6587\u6cd5\u6784\u9020\u51fa\u4e00\u4e2aLR\u8bed\u6cd5\u5206\u6790\u8868\uff0c\u5fc5\u7136\u4f1a\u5b58\u5728\u67d0\u4e9b\u51b2\u7a81\u52a8\u4f5c\u3002\u90fd\u6709\u54ea\u4e9b\u51b2\u7a81\u52a8\u4f5c\uff1f\u5047\u8bbe\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a\u8bed\u6cd5\u5206\u6790\u8868\uff0c\u5e76\u4e14\u5728\u51fa\u73b0\u51b2\u7a81\u65f6\u4e0d\u786e\u5b9a\u5730\u9009\u62e9\u4e00\u4e2a\u52a8\u4f5c\u3002\u7ed9\u51fa\u8f93\u5165abab\u65f6\u6240\u6709\u53ef\u80fd\u7684\u52a8\u4f5c\u5e8f\u5217","title":"4.6.9!"},{"location":"ch04/4.7/4.7/","text":"4.7 \u8282\u7684\u7ec3\u4e60 4.7.1 \u4e3a\u7ec3\u4e60 4.2.1 \u7684\u6587\u6cd5 S -> S S + | S S * | a \u6784\u9020 \u89c4\u8303 LR \u9879\u96c6\u65cf LALR \u9879\u96c6\u65cf 4.7.2 \u5bf9\u7ec3\u4e60 4.2.2-1 ~ 4.4.2-7 \u7684\u5404\u4e2a\u6587\u6cd5\u91cd\u590d\u7ec3\u4e60 4.7.1 ! 4.7.3 \u5bf9\u7ec3\u4e60 4.7.1 \u7684\u6587\u6cd5\uff0c\u4f7f\u7528\u7b97\u6cd5 4.63\uff0c\u6839\u636e\u8be5\u6587\u6cd5\u7684 LR(0) \u9879\u96c6\u7684\u5185\u6838\u6784\u9020\u51fa\u5b83\u7684 LALR \u9879\u96c6\u65cf ! 4.7.4 \u8bf4\u660e\u4e0b\u9762\u7684\u6587\u6cd5 S -> A a | b A c | d c | b d a A -> d \u662f LALR(1) \u7684\uff0c\u4f46\u4e0d\u662f SLR(1) \u7684 ! 4.7.5 \u8bf4\u660e\u4e0b\u9762\u7684\u6587\u6cd5 S -> A a | b A c | B c | b B a A -> d B -> d \u662f LR(1) \u7684\uff0c\u4f46\u4e0d\u662f LALR(1) \u7684","title":"4.7 \u8282\u7684\u7ec3\u4e60"},{"location":"ch04/4.7/4.7/#47","text":"","title":"4.7 \u8282\u7684\u7ec3\u4e60"},{"location":"ch04/4.7/4.7/#471","text":"\u4e3a\u7ec3\u4e60 4.2.1 \u7684\u6587\u6cd5 S -> S S + | S S * | a \u6784\u9020 \u89c4\u8303 LR \u9879\u96c6\u65cf LALR \u9879\u96c6\u65cf","title":"4.7.1"},{"location":"ch04/4.7/4.7/#472","text":"\u5bf9\u7ec3\u4e60 4.2.2-1 ~ 4.4.2-7 \u7684\u5404\u4e2a\u6587\u6cd5\u91cd\u590d\u7ec3\u4e60 4.7.1","title":"4.7.2"},{"location":"ch04/4.7/4.7/#473","text":"\u5bf9\u7ec3\u4e60 4.7.1 \u7684\u6587\u6cd5\uff0c\u4f7f\u7528\u7b97\u6cd5 4.63\uff0c\u6839\u636e\u8be5\u6587\u6cd5\u7684 LR(0) \u9879\u96c6\u7684\u5185\u6838\u6784\u9020\u51fa\u5b83\u7684 LALR \u9879\u96c6\u65cf","title":"! 4.7.3"},{"location":"ch04/4.7/4.7/#474","text":"\u8bf4\u660e\u4e0b\u9762\u7684\u6587\u6cd5 S -> A a | b A c | d c | b d a A -> d \u662f LALR(1) \u7684\uff0c\u4f46\u4e0d\u662f SLR(1) \u7684","title":"! 4.7.4"},{"location":"ch04/4.7/4.7/#475","text":"\u8bf4\u660e\u4e0b\u9762\u7684\u6587\u6cd5 S -> A a | b A c | B c | b B a A -> d B -> d \u662f LR(1) \u7684\uff0c\u4f46\u4e0d\u662f LALR(1) \u7684","title":"! 4.7.5"},{"location":"ch04/key-point/key-point/","text":"\u7b2c4\u7ae0\u8981\u70b9 \uff01LR(0), SLR, LR, LALR \u4e4b\u95f4\u7684\u533a\u522b p157: LR(0) \u81ea\u52a8\u673a\u662f\u5982\u4f55\u505a\u51fa\u79fb\u5165-\u89c4\u7ea6\u51b3\u5b9a\u7684\uff1f\u5047\u8bbe\u6587\u6cd5\u7b26\u53f7\u4e32 \u03b3 \u4f7f\u5f97 LR(0) \u81ea\u52a8\u673a\u4ece\u5f00\u59cb\u72b6\u6001 0 \u8fd0\u884c\u5230\u67d0\u4e2a\u72b6\u6001 j\uff0c\u90a3\u4e48\u5982\u679c\u4e0b\u4e00\u4e2a\u8f93\u5165\u7b26\u53f7\u4e3a a \u4e14\u72b6\u6001 j \u6709\u4e00\u4e2a\u5728 a \u4e0a\u7684\u8f6c\u6362\uff0c\u5c31\u79fb\u5165 a\uff0c\u5426\u5219\u5c31\u8fdb\u884c\u89c4\u7ea6\u3002 \u8fd9\u79cd\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u9519\u8bef\u7684\u89c4\u7ea6\uff0c\u5047\u5b9a\u89c4\u7ea6\u540e\u7684\u7b26\u53f7\u4e3a X\uff0c\u4f46 a \u5e76\u4e0d\u5728 FOLLOW(X) \u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u4f1a\u6709\u95ee\u9898\u3002\u6240\u4ee5 SLR \u5728\u8fd9\u65b9\u9762\u8fdb\u884c\u4e86\u6539\u8fdb\u3002 p161\uff1a\u6784\u9020\u4e00\u4e2a SLR \u5206\u6790\u8868\u65f6\uff0c\u5982\u679c [A -> \u03b1.] \u5728 I_i \u4e2d\uff0c\u90a3\u4e48\u5bf9\u4e8e FOLLOW(A) \u4e2d\u7684\u6240\u6709 a\uff0c\u5c06 ACTION[i, a] \u8bbe\u7f6e\u4e3a \u201c\u89c4\u7ea6 A -> \u03b1\u201d SLR \u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u89e3\u51b3\u4e86\u9519\u8bef\u89c4\u7ea6\u7684\u95ee\u9898\uff0c\u4f46\u6ca1\u6709\u5b8c\u5168\u89e3\u51b3\u3002\u56e0\u4e3a\u867d\u7136 a \u5728 FOLLOW(A) \u4e2d\u624d\u4f1a\u9009\u62e9\u89c4\u7ea6\uff0c\u4f46\u662f\u5c31\u5f53\u524d\u6240\u5904\u7684\u72b6\u6001 I_i \u800c\u8a00\uff0c\u5e76\u4e0d\u662f\u6bcf\u4e2a FOLLOW(A) \u4e2d\u7684\u7ec8\u7ed3\u7b26\u90fd\u53ef\u4ee5\u51fa\u73b0\u5728\u72b6\u6001 I_i \u4e2d\u7684 A \u540e\u9762\u3002 p166: \u7528\u66f4\u6b63\u5f0f\u4e00\u70b9\u7684\u8bed\u8a00\u6765\u8bb2\uff0c\u5fc5\u987b\u8981\u4e3a I_i \u7cbe\u786e\u5f97\u6307\u660e\u54ea\u4e9b\u8f93\u5165\u7b26\u53f7\u53ef\u4ee5\u66f4\u5728\u53e5\u67c4 \u03b1 \u540e\u9762\uff0c\u4ece\u800c\u4f7f \u03b1 \u53ef\u4ee5\u88ab\u89c4\u7ea6\u4e3a A\u3002 LR \u901a\u8fc7\u5728\u9879\u4e2d\u52a0\u5165\u7b2c\u4e8c\u4e2a\u5206\u91cf\uff0c\u5373\u5411\u524d\u770b\u7b26\u53f7\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u65b0\u7684\u95ee\u9898\u662f LR \u4f1a\u4f7f\u5f97\u72b6\u6001\u8868\u53ca\u5176\u5e9e\u5927\uff0c\u800c LALR \u5c31\u662f\u4e00\u79cd\u6bd4\u8f83\u7ecf\u6d4e\u7684\u505a\u6cd5\uff0c\u5b83\u5177\u6709\u548c SLR \u4e00\u6837\u591a\u7684\u72b6\u6001\u3002 p170\uff1a\u4e00\u822c\u5730\u8bf4\uff0c\u901a\u8fc7\u5c06\u5177\u6709\u76f8\u540c\u6838\u5fc3\u9879\u96c6\u7684 LR \u9879\u96c6\u5408\u5e76\uff0c\u53ef\u4ee5\u5f97\u5230 LALR \u9879\u96c6\u3002\u867d\u7136 LALR \u53ef\u80fd\u4f1a\u8fdb\u884c\u4e00\u4e9b\u9519\u8bef\u7684\u89c4\u7ea6\uff0c\u4f46\u6700\u7ec8\u4f1a\u5728\u8f93\u5165\u4efb\u4f55\u65b0\u7684\u7b26\u53f7\u4e4b\u524d\u53d1\u73b0\u8fd9\u4e2a\u9519\u8bef\u3002 \u6d88\u9664\u4e8c\u4e49\u6027 \uff08p134\uff09 \u56fe 4-10\uff0c\u5982\u4f55\u5f97\u51fa\u8fd9\u4e2a\u6d88\u9664\u65b9\u6cd5\u7684\uff1f \u6d88\u9664\u5de6\u9012\u5f52 \uff08p135\uff09 \u4e3a\u4ec0\u4e48\u56fe 4-11 \u7684\u7b97\u6cd5\u80fd\u6d88\u9664\u6587\u6cd5\u4e2d\u7684\u5de6\u9012\u5f52\uff1f \u6d88\u9664\u9012\u5f52\u9700\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a \u4e0d\u5b58\u5728\u7acb\u5373\u5de6\u9012\u5f52\uff0c\u5373\u4e0d\u5b58\u5728\u5f62\u4f3c\u8fd9\u6837\u7684\u4ea7\u751f\u5f0f A -> A\u03b1 \u3002 \u4e0d\u5b58\u5728\u7531\u591a\u6b65\u63a8\u5bfc\u53ef\u4ea7\u751f\u7684\u5de6\u9012\u5f52\u3002 \u7b97\u6cd5 3~5 \u884c\u5faa\u73af\u7684\u7ed3\u679c\u4f7f\u5f97\u5f62\u5982 A_i -> A_m \u03b1 \u7684\u4ea7\u751f\u5f0f\u4e00\u5b9a\u6ee1\u8db3 m >= i \uff0c\u5c31\u6d88\u9664\u4e86\u5f62\u5982 S => Aa => Sda \u8fd9\u6837\u7684\u8f6c\u6362\u53ef\u80fd\uff0c\u4e5f\u5c31\u662f\u8bf4\u7531 A_m \u4e00\u5b9a\u63a8\u5bfc\u4e0d\u51fa\u4ee5 A_i \u5f00\u5934\u7684\u4ea7\u751f\u5f0f\uff0cA_m \u03b1 \u5c31\u4e0d\u5b58\u5728\u4ea7\u751f A-i \u5de6\u9012\u5f52\u7684\u53ef\u80fd\u3002 \u540c\u65f6\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a \u53ea\u9700\u8981\u5904\u7406 A_i -> A_j \u03b1 \u8fd9\u6837\u7684\u4ea7\u751f\u5f0f\uff0c\u800c\u4e0d\u9700\u8981\u5904\u7406\u5f62\u5982 A_i -> \u03b1 A_j \u03b2 \u8fd9\u6837\u7684\u4ea7\u751f\u5f0f \u5faa\u73af\u5b8c\u6210\u540e\uff0c\u7b2c 6 \u884c\u6d88\u9664\u4e86\u66ff\u6362\u540e\u7684\u4ea7\u751f\u5f0f\u4e2d\u7684\u7acb\u5373\u5de6\u9012\u5f52\u3002 \u4f7f\u7528 LR(0) \u521b\u5efa\u51fa LALR(1) \u9879\u96c6\u7684\u5185\u6838 \uff08p173\uff09 \u81ea\u53d1\u751f\u6210\u7684\u548c\u4f20\u64ad\u7684\u5411\u524d\u770b\u7b26\u53f7 CNF \u548c BNF Chomsky normal form Backus Naur Form","title":"\u7b2c4\u7ae0\u8981\u70b9"},{"location":"ch04/key-point/key-point/#4","text":"","title":"\u7b2c4\u7ae0\u8981\u70b9"},{"location":"ch04/key-point/key-point/#lr0-slr-lr-lalr","text":"p157: LR(0) \u81ea\u52a8\u673a\u662f\u5982\u4f55\u505a\u51fa\u79fb\u5165-\u89c4\u7ea6\u51b3\u5b9a\u7684\uff1f\u5047\u8bbe\u6587\u6cd5\u7b26\u53f7\u4e32 \u03b3 \u4f7f\u5f97 LR(0) \u81ea\u52a8\u673a\u4ece\u5f00\u59cb\u72b6\u6001 0 \u8fd0\u884c\u5230\u67d0\u4e2a\u72b6\u6001 j\uff0c\u90a3\u4e48\u5982\u679c\u4e0b\u4e00\u4e2a\u8f93\u5165\u7b26\u53f7\u4e3a a \u4e14\u72b6\u6001 j \u6709\u4e00\u4e2a\u5728 a \u4e0a\u7684\u8f6c\u6362\uff0c\u5c31\u79fb\u5165 a\uff0c\u5426\u5219\u5c31\u8fdb\u884c\u89c4\u7ea6\u3002 \u8fd9\u79cd\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u9519\u8bef\u7684\u89c4\u7ea6\uff0c\u5047\u5b9a\u89c4\u7ea6\u540e\u7684\u7b26\u53f7\u4e3a X\uff0c\u4f46 a \u5e76\u4e0d\u5728 FOLLOW(X) \u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u4f1a\u6709\u95ee\u9898\u3002\u6240\u4ee5 SLR \u5728\u8fd9\u65b9\u9762\u8fdb\u884c\u4e86\u6539\u8fdb\u3002 p161\uff1a\u6784\u9020\u4e00\u4e2a SLR \u5206\u6790\u8868\u65f6\uff0c\u5982\u679c [A -> \u03b1.] \u5728 I_i \u4e2d\uff0c\u90a3\u4e48\u5bf9\u4e8e FOLLOW(A) \u4e2d\u7684\u6240\u6709 a\uff0c\u5c06 ACTION[i, a] \u8bbe\u7f6e\u4e3a \u201c\u89c4\u7ea6 A -> \u03b1\u201d SLR \u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u89e3\u51b3\u4e86\u9519\u8bef\u89c4\u7ea6\u7684\u95ee\u9898\uff0c\u4f46\u6ca1\u6709\u5b8c\u5168\u89e3\u51b3\u3002\u56e0\u4e3a\u867d\u7136 a \u5728 FOLLOW(A) \u4e2d\u624d\u4f1a\u9009\u62e9\u89c4\u7ea6\uff0c\u4f46\u662f\u5c31\u5f53\u524d\u6240\u5904\u7684\u72b6\u6001 I_i \u800c\u8a00\uff0c\u5e76\u4e0d\u662f\u6bcf\u4e2a FOLLOW(A) \u4e2d\u7684\u7ec8\u7ed3\u7b26\u90fd\u53ef\u4ee5\u51fa\u73b0\u5728\u72b6\u6001 I_i \u4e2d\u7684 A \u540e\u9762\u3002 p166: \u7528\u66f4\u6b63\u5f0f\u4e00\u70b9\u7684\u8bed\u8a00\u6765\u8bb2\uff0c\u5fc5\u987b\u8981\u4e3a I_i \u7cbe\u786e\u5f97\u6307\u660e\u54ea\u4e9b\u8f93\u5165\u7b26\u53f7\u53ef\u4ee5\u66f4\u5728\u53e5\u67c4 \u03b1 \u540e\u9762\uff0c\u4ece\u800c\u4f7f \u03b1 \u53ef\u4ee5\u88ab\u89c4\u7ea6\u4e3a A\u3002 LR \u901a\u8fc7\u5728\u9879\u4e2d\u52a0\u5165\u7b2c\u4e8c\u4e2a\u5206\u91cf\uff0c\u5373\u5411\u524d\u770b\u7b26\u53f7\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u65b0\u7684\u95ee\u9898\u662f LR \u4f1a\u4f7f\u5f97\u72b6\u6001\u8868\u53ca\u5176\u5e9e\u5927\uff0c\u800c LALR \u5c31\u662f\u4e00\u79cd\u6bd4\u8f83\u7ecf\u6d4e\u7684\u505a\u6cd5\uff0c\u5b83\u5177\u6709\u548c SLR \u4e00\u6837\u591a\u7684\u72b6\u6001\u3002 p170\uff1a\u4e00\u822c\u5730\u8bf4\uff0c\u901a\u8fc7\u5c06\u5177\u6709\u76f8\u540c\u6838\u5fc3\u9879\u96c6\u7684 LR \u9879\u96c6\u5408\u5e76\uff0c\u53ef\u4ee5\u5f97\u5230 LALR \u9879\u96c6\u3002\u867d\u7136 LALR \u53ef\u80fd\u4f1a\u8fdb\u884c\u4e00\u4e9b\u9519\u8bef\u7684\u89c4\u7ea6\uff0c\u4f46\u6700\u7ec8\u4f1a\u5728\u8f93\u5165\u4efb\u4f55\u65b0\u7684\u7b26\u53f7\u4e4b\u524d\u53d1\u73b0\u8fd9\u4e2a\u9519\u8bef\u3002","title":"\uff01LR(0), SLR, LR, LALR \u4e4b\u95f4\u7684\u533a\u522b"},{"location":"ch04/key-point/key-point/#p134","text":"\u56fe 4-10\uff0c\u5982\u4f55\u5f97\u51fa\u8fd9\u4e2a\u6d88\u9664\u65b9\u6cd5\u7684\uff1f","title":"\u6d88\u9664\u4e8c\u4e49\u6027 \uff08p134\uff09"},{"location":"ch04/key-point/key-point/#p135","text":"\u4e3a\u4ec0\u4e48\u56fe 4-11 \u7684\u7b97\u6cd5\u80fd\u6d88\u9664\u6587\u6cd5\u4e2d\u7684\u5de6\u9012\u5f52\uff1f \u6d88\u9664\u9012\u5f52\u9700\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a \u4e0d\u5b58\u5728\u7acb\u5373\u5de6\u9012\u5f52\uff0c\u5373\u4e0d\u5b58\u5728\u5f62\u4f3c\u8fd9\u6837\u7684\u4ea7\u751f\u5f0f A -> A\u03b1 \u3002 \u4e0d\u5b58\u5728\u7531\u591a\u6b65\u63a8\u5bfc\u53ef\u4ea7\u751f\u7684\u5de6\u9012\u5f52\u3002 \u7b97\u6cd5 3~5 \u884c\u5faa\u73af\u7684\u7ed3\u679c\u4f7f\u5f97\u5f62\u5982 A_i -> A_m \u03b1 \u7684\u4ea7\u751f\u5f0f\u4e00\u5b9a\u6ee1\u8db3 m >= i \uff0c\u5c31\u6d88\u9664\u4e86\u5f62\u5982 S => Aa => Sda \u8fd9\u6837\u7684\u8f6c\u6362\u53ef\u80fd\uff0c\u4e5f\u5c31\u662f\u8bf4\u7531 A_m \u4e00\u5b9a\u63a8\u5bfc\u4e0d\u51fa\u4ee5 A_i \u5f00\u5934\u7684\u4ea7\u751f\u5f0f\uff0cA_m \u03b1 \u5c31\u4e0d\u5b58\u5728\u4ea7\u751f A-i \u5de6\u9012\u5f52\u7684\u53ef\u80fd\u3002 \u540c\u65f6\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a \u53ea\u9700\u8981\u5904\u7406 A_i -> A_j \u03b1 \u8fd9\u6837\u7684\u4ea7\u751f\u5f0f\uff0c\u800c\u4e0d\u9700\u8981\u5904\u7406\u5f62\u5982 A_i -> \u03b1 A_j \u03b2 \u8fd9\u6837\u7684\u4ea7\u751f\u5f0f \u5faa\u73af\u5b8c\u6210\u540e\uff0c\u7b2c 6 \u884c\u6d88\u9664\u4e86\u66ff\u6362\u540e\u7684\u4ea7\u751f\u5f0f\u4e2d\u7684\u7acb\u5373\u5de6\u9012\u5f52\u3002","title":"\u6d88\u9664\u5de6\u9012\u5f52 \uff08p135\uff09"},{"location":"ch04/key-point/key-point/#lr0-lalr1-p173","text":"\u81ea\u53d1\u751f\u6210\u7684\u548c\u4f20\u64ad\u7684\u5411\u524d\u770b\u7b26\u53f7","title":"\u4f7f\u7528 LR(0) \u521b\u5efa\u51fa LALR(1) \u9879\u96c6\u7684\u5185\u6838 \uff08p173\uff09"},{"location":"ch04/key-point/key-point/#cnf-bnf","text":"Chomsky normal form Backus Naur Form","title":"CNF \u548c BNF"},{"location":"ch05/5.1/5.1/","text":"5.1 \u8282\u7684\u7ec3\u4e60 5.1.1 \u5bf9\u4e8e\u56fe 5-1 \u4e2d\u7684 SDD\uff0c\u7ed9\u51fa\u4e0b\u5217\u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684\u6ce8\u91ca\u8bed\u6cd5\u5206\u6790\u6811 (3+4)*(5+6)n 1*2*3*(4+5)n (9+8*(7+6)+5)*4n \u89e3\u7b54 (3+4)*(5+6)n 1*2*3*(4+5)n 5.1.2 \u6269\u5c55\u56fe 5-4 \u4e2d\u7684 SDD\uff0c\u4f7f\u5b83\u53ef\u4ee5\u50cf\u56fe 5-1 \u6240\u793a\u7684\u90a3\u6837\u5904\u7406\u8868\u8fbe\u5f0f \u89e3\u7b54 \u4ea7\u751f\u5f0f \u8bed\u6cd5\u89c4\u5219 1) L -> En L.val = E.val 2) E -> TE' E'.inh = T.val E.val = E'.syn 3) E' -> +TE_1' E_1'.inh = E'.inh + T.val E'.syn = E_1'.syn 4) E' -> \u03b5 E'.syn = E'.inh 5) T -> FT' T'.inh = F.val T.val = T'.syn 6) T' -> *FT_1' T_1'.inh = T'.inh * F.val T'.syn = T_1'.syn 7) T' -> \u03b5 T'.syn = T'.inh 8) F -> (E) F.val = E.val 9) F -> digit F.val = digit.lexval 5.1.3 \u4f7f\u7528\u4f60\u5728\u7ec3\u4e60 5.1.2 \u4e2d\u5f97\u5230\u7684 SDD\uff0c\u91cd\u590d\u7ec3\u4e60 5.1.1 \u89e3\u7b54 (3+4)*(5+6)n 1*2*3*(4+5)n","title":"5.1 \u8282\u7684\u7ec3\u4e60"},{"location":"ch05/5.1/5.1/#51","text":"","title":"5.1 \u8282\u7684\u7ec3\u4e60"},{"location":"ch05/5.1/5.1/#511","text":"\u5bf9\u4e8e\u56fe 5-1 \u4e2d\u7684 SDD\uff0c\u7ed9\u51fa\u4e0b\u5217\u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684\u6ce8\u91ca\u8bed\u6cd5\u5206\u6790\u6811 (3+4)*(5+6)n 1*2*3*(4+5)n (9+8*(7+6)+5)*4n","title":"5.1.1"},{"location":"ch05/5.1/5.1/#_1","text":"(3+4)*(5+6)n 1*2*3*(4+5)n","title":"\u89e3\u7b54"},{"location":"ch05/5.1/5.1/#512","text":"\u6269\u5c55\u56fe 5-4 \u4e2d\u7684 SDD\uff0c\u4f7f\u5b83\u53ef\u4ee5\u50cf\u56fe 5-1 \u6240\u793a\u7684\u90a3\u6837\u5904\u7406\u8868\u8fbe\u5f0f","title":"5.1.2"},{"location":"ch05/5.1/5.1/#_2","text":"\u4ea7\u751f\u5f0f \u8bed\u6cd5\u89c4\u5219 1) L -> En L.val = E.val 2) E -> TE' E'.inh = T.val E.val = E'.syn 3) E' -> +TE_1' E_1'.inh = E'.inh + T.val E'.syn = E_1'.syn 4) E' -> \u03b5 E'.syn = E'.inh 5) T -> FT' T'.inh = F.val T.val = T'.syn 6) T' -> *FT_1' T_1'.inh = T'.inh * F.val T'.syn = T_1'.syn 7) T' -> \u03b5 T'.syn = T'.inh 8) F -> (E) F.val = E.val 9) F -> digit F.val = digit.lexval","title":"\u89e3\u7b54"},{"location":"ch05/5.1/5.1/#513","text":"\u4f7f\u7528\u4f60\u5728\u7ec3\u4e60 5.1.2 \u4e2d\u5f97\u5230\u7684 SDD\uff0c\u91cd\u590d\u7ec3\u4e60 5.1.1","title":"5.1.3"},{"location":"ch05/5.1/5.1/#_3","text":"(3+4)*(5+6)n 1*2*3*(4+5)n","title":"\u89e3\u7b54"},{"location":"ch05/5.2/5.2/","text":"5.2 \u8282\u7684\u7ec3\u4e60 5.2.1 \u56fe 5-7 \u4e2d\u7684\u4f9d\u8d56\u56fe\u7684\u5168\u90e8\u62d3\u6251\u987a\u5e8f\u6709\u54ea\u4e9b \u89e3\u7b54 [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [ 1, 2, 3, 5, 4, 6, 7, 8, 9 ], [ 1, 2, 4, 3, 5, 6, 7, 8, 9 ], [ 1, 3, 2, 4, 5, 6, 7, 8, 9 ], [ 1, 3, 2, 5, 4, 6, 7, 8, 9 ], [ 1, 3, 5, 2, 4, 6, 7, 8, 9 ], [ 2, 1, 3, 4, 5, 6, 7, 8, 9 ], [ 2, 1, 3, 5, 4, 6, 7, 8, 9 ], [ 2, 1, 4, 3, 5, 6, 7, 8, 9 ], [ 2, 4, 1, 3, 5, 6, 7, 8, 9 ] \u7b97\u6cd5\u89c1 5.2.1.js 5.2.2 \u5bf9\u4e8e\u56fe 5-8 \u4e2d\u7684 SDD\uff0c\u7ed9\u51fa\u4e0b\u5217\u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684\u6ce8\u91ca\u8bed\u6cd5\u5206\u6790\u6811\uff1a int a, b , c float w, x, y, z \u89e3\u7b54 int a, b, c 5.2.3 \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4ea7\u751f\u5f0f A -> BCD\u3002A, B, C, D \u8fd9\u56db\u4e2a\u975e\u7ec8\u7ed3\u7b26\u53f7\u90fd\u6709\u4e24\u4e2a\u5c5e\u6027\uff0c\u7efc\u5408\u5c5e\u6027 s \u548c\u7ee7\u627f\u5c5e\u6027 i\u3002\u5bf9\u4e8e\u4e0b\u9762\u7684\u6bcf\u7ec4\u89c4\u5219\uff0c\u6307\u51fa\uff081\uff09\u8fd9\u4e9b\u89c4\u5219\u662f\u5426\u6ee1\u8db3 S \u5c5e\u6027\u5b9a\u4e49\u7684\u8981\u6c42\uff082\uff09\u8fd9\u4e9b\u89c4\u5219\u662f\u5426\u6ee1\u8db3 L \u5c5e\u6027\u5b9a\u4e49\u7684\u8981\u6c42\uff083\uff09\u662f\u5426\u5b58\u5728\u548c\u8fd9\u4e9b\u89c4\u5219\u4e00\u81f4\u7684\u6c42\u503c\u8fc7\u7a0b\uff1f A.s = B.i + C.s A.s = B.i + C.s , D.i = A.i + B.s A.s = B.s + D.s ! A.s = D.i , B.i = A.s + C.s , C.i = B.s , D.i = B.i + C.i \u89e3\u7b54 \u5426\uff0c \uff1f \u5426\uff0c \u662f \u662f\uff0c \u662f \u5426\uff0c \u5426 5.2.4 \uff01 \u8fd9\u4e2a\u6587\u6cd5\u751f\u6210\u4e86\u542b\u201c\u5c0f\u6570\u70b9\u201d\u7684\u4e8c\u8fdb\u5236\u6570\uff1a S -> L.L|L L -> LB|B B -> 0|1 \u8bbe\u8ba1\u4e00\u4e2a L \u5c5e\u6027\u7684 SDD \u6765\u8ba1\u7b97 S.val\uff0c\u5373\u8f93\u5165\u4e32\u7684\u5341\u8fdb\u5236\u6570\u503c\u3002\u6bd4\u5982\uff0c\u4e32 101.101 \u5e94\u8be5\u88ab\u7ffb\u8bd1\u4e3a\u5341\u8fdb\u5236\u6570 5.625\u3002 \u89e3\u7b54 \u4ea7\u751f\u5f0f \u8bed\u6cd5\u89c4\u5219 1) S -> L_1.L_2 L_1.isLeft = true L_2.isLeft = false S.val = L_1.val + L_2.val 2) S -> L L.isLeft = true S.val = L.val 3) L -> L_1B L_1.isLeft = L.isLeft L.len = L_1.len + 1 L.val = L.isLeft ? L_1.val * 2 + B.val : L_1.val + B.val * 2^(-L.len) 4) L -> B L.len = 1 L.val = L.isLeft ? B.val : B.val/2 5) B -> 0 B.val = 0 6) B -> 1 B.val = 1 \u5176\u4e2d\uff1a isLeft \u4e3a\u7ee7\u627f\u5c5e\u6027\uff0c\u8868\u793a\u8282\u70b9\u662f\u5426\u5728\u5c0f\u6570\u70b9\u7684\u5de6\u8fb9 len \u4e3a\u7efc\u5408\u5c5e\u6027\uff0c\u8868\u793a\u8282\u70b9\u5305\u542b\u7684\u4e8c\u8fdb\u5236\u4e32\u7684\u957f\u5ea6 val \u4e3a\u7efc\u5408\u5c5e\u6027 5.2.5 \uff01\uff01 \u4e3a\u7ec3\u4e60 5.2.4 \u4e2d\u63cf\u8ff0\u7684\u6587\u6cd5\u548c\u7ffb\u8bd1\u8bbe\u8ba1\u4e00\u4e2a S \u5c5e\u6027\u7684 SDD\u3002 \u89e3\u7b54 \u4ea7\u751f\u5f0f \u8bed\u6cd5\u89c4\u5219 1) S -> L_1.L_2 S.val = L_1.val +\u3000L_2.val/L_2.f 2) S -> L S.val = L.val 3) L -> L_1B L.val = L_1.val*2 + B.val L.f = L_1.f * 2 4) L -> B L.val = B.val L.f = 2 5) B -> 0 B.val = 0 6) B -> 1 B.val = 1 5.2.6 \uff01\uff01 \u4f7f\u7528\u4e00\u4e2a\u81ea\u9876\u5411\u4e0b\u7684\u8bed\u6cd5\u5206\u6790\u6587\u6cd5\u4e0a\u7684 L \u5c5e\u6027 SDD \u6765\u5b9e\u73b0\u7b97\u6cd5 3.23\u3002\u8fd9\u4e2a\u7b97\u6cd5\u628a\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u4e00\u4e2a NFA\u3002\u5047\u8bbe\u6709\u4e00\u4e2a\u8868\u793a\u4efb\u610f\u5b57\u7b26\u7684\u8bcd\u6cd5\u5355\u5143 char\uff0c\u5e76\u4e14 char.lexval \u662f\u5b83\u6240\u8868\u793a\u7684\u5b57\u7b26\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u51fd\u6570 new()\uff0c\u8be5\u51fd\u6570\u8303\u56f4\u4e00\u4e2a\u65b0\u7684\u72b6\u6001\u9875\u5c31\u662f\u4e00\u4e2a\u4e4b\u524d\u5c1a\u672a\u88ab\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u72b6\u6001\u3002\u4f7f\u7528\u4efb\u4f55\u65b9\u4fbf\u7684\u8868\u793a\u6765\u63cf\u8ff0\u8fd9\u4e2a NFA \u7684\u7ffb\u8bd1\u3002","title":"5.2 \u8282\u7684\u7ec3\u4e60"},{"location":"ch05/5.2/5.2/#52","text":"","title":"5.2 \u8282\u7684\u7ec3\u4e60"},{"location":"ch05/5.2/5.2/#521","text":"\u56fe 5-7 \u4e2d\u7684\u4f9d\u8d56\u56fe\u7684\u5168\u90e8\u62d3\u6251\u987a\u5e8f\u6709\u54ea\u4e9b","title":"5.2.1"},{"location":"ch05/5.2/5.2/#_1","text":"[ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [ 1, 2, 3, 5, 4, 6, 7, 8, 9 ], [ 1, 2, 4, 3, 5, 6, 7, 8, 9 ], [ 1, 3, 2, 4, 5, 6, 7, 8, 9 ], [ 1, 3, 2, 5, 4, 6, 7, 8, 9 ], [ 1, 3, 5, 2, 4, 6, 7, 8, 9 ], [ 2, 1, 3, 4, 5, 6, 7, 8, 9 ], [ 2, 1, 3, 5, 4, 6, 7, 8, 9 ], [ 2, 1, 4, 3, 5, 6, 7, 8, 9 ], [ 2, 4, 1, 3, 5, 6, 7, 8, 9 ] \u7b97\u6cd5\u89c1 5.2.1.js","title":"\u89e3\u7b54"},{"location":"ch05/5.2/5.2/#522","text":"\u5bf9\u4e8e\u56fe 5-8 \u4e2d\u7684 SDD\uff0c\u7ed9\u51fa\u4e0b\u5217\u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684\u6ce8\u91ca\u8bed\u6cd5\u5206\u6790\u6811\uff1a int a, b , c float w, x, y, z","title":"5.2.2"},{"location":"ch05/5.2/5.2/#_2","text":"int a, b, c","title":"\u89e3\u7b54"},{"location":"ch05/5.2/5.2/#523","text":"\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4ea7\u751f\u5f0f A -> BCD\u3002A, B, C, D \u8fd9\u56db\u4e2a\u975e\u7ec8\u7ed3\u7b26\u53f7\u90fd\u6709\u4e24\u4e2a\u5c5e\u6027\uff0c\u7efc\u5408\u5c5e\u6027 s \u548c\u7ee7\u627f\u5c5e\u6027 i\u3002\u5bf9\u4e8e\u4e0b\u9762\u7684\u6bcf\u7ec4\u89c4\u5219\uff0c\u6307\u51fa\uff081\uff09\u8fd9\u4e9b\u89c4\u5219\u662f\u5426\u6ee1\u8db3 S \u5c5e\u6027\u5b9a\u4e49\u7684\u8981\u6c42\uff082\uff09\u8fd9\u4e9b\u89c4\u5219\u662f\u5426\u6ee1\u8db3 L \u5c5e\u6027\u5b9a\u4e49\u7684\u8981\u6c42\uff083\uff09\u662f\u5426\u5b58\u5728\u548c\u8fd9\u4e9b\u89c4\u5219\u4e00\u81f4\u7684\u6c42\u503c\u8fc7\u7a0b\uff1f A.s = B.i + C.s A.s = B.i + C.s , D.i = A.i + B.s A.s = B.s + D.s ! A.s = D.i , B.i = A.s + C.s , C.i = B.s , D.i = B.i + C.i","title":"5.2.3"},{"location":"ch05/5.2/5.2/#_3","text":"\u5426\uff0c \uff1f \u5426\uff0c \u662f \u662f\uff0c \u662f \u5426\uff0c \u5426","title":"\u89e3\u7b54"},{"location":"ch05/5.2/5.2/#524","text":"\u8fd9\u4e2a\u6587\u6cd5\u751f\u6210\u4e86\u542b\u201c\u5c0f\u6570\u70b9\u201d\u7684\u4e8c\u8fdb\u5236\u6570\uff1a S -> L.L|L L -> LB|B B -> 0|1 \u8bbe\u8ba1\u4e00\u4e2a L \u5c5e\u6027\u7684 SDD \u6765\u8ba1\u7b97 S.val\uff0c\u5373\u8f93\u5165\u4e32\u7684\u5341\u8fdb\u5236\u6570\u503c\u3002\u6bd4\u5982\uff0c\u4e32 101.101 \u5e94\u8be5\u88ab\u7ffb\u8bd1\u4e3a\u5341\u8fdb\u5236\u6570 5.625\u3002","title":"5.2.4 \uff01"},{"location":"ch05/5.2/5.2/#_4","text":"\u4ea7\u751f\u5f0f \u8bed\u6cd5\u89c4\u5219 1) S -> L_1.L_2 L_1.isLeft = true L_2.isLeft = false S.val = L_1.val + L_2.val 2) S -> L L.isLeft = true S.val = L.val 3) L -> L_1B L_1.isLeft = L.isLeft L.len = L_1.len + 1 L.val = L.isLeft ? L_1.val * 2 + B.val : L_1.val + B.val * 2^(-L.len) 4) L -> B L.len = 1 L.val = L.isLeft ? B.val : B.val/2 5) B -> 0 B.val = 0 6) B -> 1 B.val = 1 \u5176\u4e2d\uff1a isLeft \u4e3a\u7ee7\u627f\u5c5e\u6027\uff0c\u8868\u793a\u8282\u70b9\u662f\u5426\u5728\u5c0f\u6570\u70b9\u7684\u5de6\u8fb9 len \u4e3a\u7efc\u5408\u5c5e\u6027\uff0c\u8868\u793a\u8282\u70b9\u5305\u542b\u7684\u4e8c\u8fdb\u5236\u4e32\u7684\u957f\u5ea6 val \u4e3a\u7efc\u5408\u5c5e\u6027","title":"\u89e3\u7b54"},{"location":"ch05/5.2/5.2/#525","text":"\u4e3a\u7ec3\u4e60 5.2.4 \u4e2d\u63cf\u8ff0\u7684\u6587\u6cd5\u548c\u7ffb\u8bd1\u8bbe\u8ba1\u4e00\u4e2a S \u5c5e\u6027\u7684 SDD\u3002","title":"5.2.5 \uff01\uff01"},{"location":"ch05/5.2/5.2/#_5","text":"\u4ea7\u751f\u5f0f \u8bed\u6cd5\u89c4\u5219 1) S -> L_1.L_2 S.val = L_1.val +\u3000L_2.val/L_2.f 2) S -> L S.val = L.val 3) L -> L_1B L.val = L_1.val*2 + B.val L.f = L_1.f * 2 4) L -> B L.val = B.val L.f = 2 5) B -> 0 B.val = 0 6) B -> 1 B.val = 1","title":"\u89e3\u7b54"},{"location":"ch05/5.2/5.2/#526","text":"\u4f7f\u7528\u4e00\u4e2a\u81ea\u9876\u5411\u4e0b\u7684\u8bed\u6cd5\u5206\u6790\u6587\u6cd5\u4e0a\u7684 L \u5c5e\u6027 SDD \u6765\u5b9e\u73b0\u7b97\u6cd5 3.23\u3002\u8fd9\u4e2a\u7b97\u6cd5\u628a\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u4e00\u4e2a NFA\u3002\u5047\u8bbe\u6709\u4e00\u4e2a\u8868\u793a\u4efb\u610f\u5b57\u7b26\u7684\u8bcd\u6cd5\u5355\u5143 char\uff0c\u5e76\u4e14 char.lexval \u662f\u5b83\u6240\u8868\u793a\u7684\u5b57\u7b26\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u51fd\u6570 new()\uff0c\u8be5\u51fd\u6570\u8303\u56f4\u4e00\u4e2a\u65b0\u7684\u72b6\u6001\u9875\u5c31\u662f\u4e00\u4e2a\u4e4b\u524d\u5c1a\u672a\u88ab\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u7684\u72b6\u6001\u3002\u4f7f\u7528\u4efb\u4f55\u65b9\u4fbf\u7684\u8868\u793a\u6765\u63cf\u8ff0\u8fd9\u4e2a NFA \u7684\u7ffb\u8bd1\u3002","title":"5.2.6 \uff01\uff01"},{"location":"ch05/5.3/5.3/","text":"5.3 \u8282\u7684\u7ec3\u4e60 5.3.1 \u4e0b\u9762\u662f\u6d89\u53ca\u8fd0\u7b97\u7b26 + \u548c\u6574\u6570\u6216\u6d6e\u70b9\u8fd0\u7b97\u5206\u91cf\u7684\u8868\u8fbe\u5f0f\u7684\u6587\u6cd5\u3002\u533a\u5206\u6d6e\u70b9\u6570\u7684\u65b9\u6cd5\u662f\u770b\u5b83\u6709\u65e0\u5c0f\u6570\u70b9\u3002 E -> E + T | T T -> num.num | num \u7ed9\u51fa\u4e00\u4e2a SDD \u6765\u786e\u5b9a\u6bcf\u4e2a\u9879 T \u548c\u8868\u8fbe\u5f0f E \u7684\u7c7b\u578b \u6269\u5c55\u8fd9\u4e2a\u5f97\u5230\u7684 SDD\uff0c\u4f7f\u5f97\u5b83\u53ef\u4ee5\u628a\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\u3002\u4f7f\u7528\u4e00\u4e2a\u5355\u76ee\u8fd0\u7b97\u7b26 intToFloat \u628a\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u76f8\u7b49\u7684\u6d6e\u70b9\u6570\u3002 \u89e3\u7b54 \u4ea7\u751f\u5f0f \u8bed\u6cd5\u89c4\u5219 1) E -> E_1 + T E.type = E_1.type === float || T.type === float ? float : int 2) E -> T E.type = T.type 3) T -> num.num T.type = float 4) T -> num T.type = int 5.3.2 ! \u7ed9\u51fa\u4e00\u4e2a SDD\uff0c\u5c06\u4e00\u4e2a\u5e26\u6709 + \u548c * \u7684\u4e2d\u7f00\u8868\u8fbe\u5f0f\u7ffb\u8bd1\u6210\u6ca1\u6709\u5197\u4f59\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\u3002\u6bd4\u5982\u56e0\u4e3a\u4e24\u4e2a\u8fd0\u7b97\u7b26\u90fd\u662f\u5de6\u7ed3\u5408\u7684\uff0c\u5e76\u4e14 * \u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e +\uff0c\u6240\u4ee5 ((a*(b+c))*(d)) \u53ef\u7ffb\u8bd1\u4e3a a*(b+c)*d \u89e3\u7b54 \u51e0\u4e2a\u5c5e\u6027\u8bbe\u7f6e\uff1a wrapped: \u8868\u8fbe\u5f0f\u6700\u5916\u5c42\u662f\u5426\u6709\u62ec\u53f7\u3002 precedence: \u4ee4 +\uff0c*\uff0c() \u548c\u5355 digit \u7684\u4f18\u5148\u7ea7\u5206\u522b\u4e3a 0\uff0c1\uff0c2\uff0c3\u3002 \u5982\u679c\u8868\u8fbe\u5f0f\u6700\u5916\u5c42\u6709\u62ec\u53f7\uff0c\u5219\u4e3a\u53bb\u6389\u62ec\u53f7\u540e\u6700\u540e\u88ab\u8ba1\u7b97\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u5426\u5219\u4e3a\u8868\u8fbe\u5f0f\u6700\u540e\u88ab\u8ba1\u7b97\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u3002 expr: \u8868\u8fbe\u5f0f\u3002 cleanExpr: \u53bb\u9664\u4e86\u5197\u4f59\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\u3002 \u4ea7\u751f\u5f0f \u8bed\u6cd5\u89c4\u5219 1) L -> En L.cleanExpr = E.wrapped ? E.cleanExpr : E.expr 2) E -> E_1 + T E.wrapped = false E.precedence = 0 E.expr = E_1.expr || \"+\" || T.expr E.cleanExpr = (E_1.wrapped ? E_1.cleanExpr : E_1.expr) || \"+\" || (T.wrapped ? T.cleanExpr : T.expr) 3) E -> T E.wrapped = T.wrapped E.precedence = T.precedence E.expr = T.expr E.cleanExpr = T.cleanExpr 4) T -> T_1 * F T.wrapped = false T.precedence = 1 T.expr = T_1.expr || \"*\" || F.expr T.cleanExpr = (T_1.wrapped && T_1.precedence >= 1 ? T_1.cleanExpr : T_1) || * || (F.wrapped && F.precedence >= 1 ? F.cleanExpr : F.expr) 5) T -> F T.wrapped = F.wrapped T.precedence = F.precedence T.expr = F.expr T.cleanExpr = F.cleanExpr 6) F -> (E) F.wrapped = true F.precedence = E.precedence F.expr = \"(\" || E.expr || \")\" F.cleanExpr = E.expr 7) F -> digit F.wrapped = false F.precedence = 3 F.expr = digit F.cleanExpr = digit 5.3.3 ! \u7ed9\u51fa\u4e00\u4e2a SDD \u5bf9 x*(3*x+x*x) \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u6c42\u5fae\u5206\u3002\u8868\u8fbe\u5f0f\u4e2d\u6d89\u53ca\u8fd0\u7b97\u7b26 + \u548c * \u3001\u53d8\u91cf x \u548c\u5e38\u91cf\u3002\u5047\u8bbe\u4e0d\u8fdb\u884c\u4efb\u4f55\u7b80\u5316\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bd4\u5982 3*x \u5c06\u88ab\u7ffb\u8bd1\u4e3a 3*1+0*x\u3002","title":"5.3 \u8282\u7684\u7ec3\u4e60"},{"location":"ch05/5.3/5.3/#53","text":"","title":"5.3 \u8282\u7684\u7ec3\u4e60"},{"location":"ch05/5.3/5.3/#531","text":"\u4e0b\u9762\u662f\u6d89\u53ca\u8fd0\u7b97\u7b26 + \u548c\u6574\u6570\u6216\u6d6e\u70b9\u8fd0\u7b97\u5206\u91cf\u7684\u8868\u8fbe\u5f0f\u7684\u6587\u6cd5\u3002\u533a\u5206\u6d6e\u70b9\u6570\u7684\u65b9\u6cd5\u662f\u770b\u5b83\u6709\u65e0\u5c0f\u6570\u70b9\u3002 E -> E + T | T T -> num.num | num \u7ed9\u51fa\u4e00\u4e2a SDD \u6765\u786e\u5b9a\u6bcf\u4e2a\u9879 T \u548c\u8868\u8fbe\u5f0f E \u7684\u7c7b\u578b \u6269\u5c55\u8fd9\u4e2a\u5f97\u5230\u7684 SDD\uff0c\u4f7f\u5f97\u5b83\u53ef\u4ee5\u628a\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\u3002\u4f7f\u7528\u4e00\u4e2a\u5355\u76ee\u8fd0\u7b97\u7b26 intToFloat \u628a\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u76f8\u7b49\u7684\u6d6e\u70b9\u6570\u3002","title":"5.3.1"},{"location":"ch05/5.3/5.3/#_1","text":"\u4ea7\u751f\u5f0f \u8bed\u6cd5\u89c4\u5219 1) E -> E_1 + T E.type = E_1.type === float || T.type === float ? float : int 2) E -> T E.type = T.type 3) T -> num.num T.type = float 4) T -> num T.type = int","title":"\u89e3\u7b54"},{"location":"ch05/5.3/5.3/#532","text":"\u7ed9\u51fa\u4e00\u4e2a SDD\uff0c\u5c06\u4e00\u4e2a\u5e26\u6709 + \u548c * \u7684\u4e2d\u7f00\u8868\u8fbe\u5f0f\u7ffb\u8bd1\u6210\u6ca1\u6709\u5197\u4f59\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\u3002\u6bd4\u5982\u56e0\u4e3a\u4e24\u4e2a\u8fd0\u7b97\u7b26\u90fd\u662f\u5de6\u7ed3\u5408\u7684\uff0c\u5e76\u4e14 * \u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e +\uff0c\u6240\u4ee5 ((a*(b+c))*(d)) \u53ef\u7ffb\u8bd1\u4e3a a*(b+c)*d","title":"5.3.2 !"},{"location":"ch05/5.3/5.3/#_2","text":"\u51e0\u4e2a\u5c5e\u6027\u8bbe\u7f6e\uff1a wrapped: \u8868\u8fbe\u5f0f\u6700\u5916\u5c42\u662f\u5426\u6709\u62ec\u53f7\u3002 precedence: \u4ee4 +\uff0c*\uff0c() \u548c\u5355 digit \u7684\u4f18\u5148\u7ea7\u5206\u522b\u4e3a 0\uff0c1\uff0c2\uff0c3\u3002 \u5982\u679c\u8868\u8fbe\u5f0f\u6700\u5916\u5c42\u6709\u62ec\u53f7\uff0c\u5219\u4e3a\u53bb\u6389\u62ec\u53f7\u540e\u6700\u540e\u88ab\u8ba1\u7b97\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u5426\u5219\u4e3a\u8868\u8fbe\u5f0f\u6700\u540e\u88ab\u8ba1\u7b97\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u3002 expr: \u8868\u8fbe\u5f0f\u3002 cleanExpr: \u53bb\u9664\u4e86\u5197\u4f59\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\u3002 \u4ea7\u751f\u5f0f \u8bed\u6cd5\u89c4\u5219 1) L -> En L.cleanExpr = E.wrapped ? E.cleanExpr : E.expr 2) E -> E_1 + T E.wrapped = false E.precedence = 0 E.expr = E_1.expr || \"+\" || T.expr E.cleanExpr = (E_1.wrapped ? E_1.cleanExpr : E_1.expr) || \"+\" || (T.wrapped ? T.cleanExpr : T.expr) 3) E -> T E.wrapped = T.wrapped E.precedence = T.precedence E.expr = T.expr E.cleanExpr = T.cleanExpr 4) T -> T_1 * F T.wrapped = false T.precedence = 1 T.expr = T_1.expr || \"*\" || F.expr T.cleanExpr = (T_1.wrapped && T_1.precedence >= 1 ? T_1.cleanExpr : T_1) || * || (F.wrapped && F.precedence >= 1 ? F.cleanExpr : F.expr) 5) T -> F T.wrapped = F.wrapped T.precedence = F.precedence T.expr = F.expr T.cleanExpr = F.cleanExpr 6) F -> (E) F.wrapped = true F.precedence = E.precedence F.expr = \"(\" || E.expr || \")\" F.cleanExpr = E.expr 7) F -> digit F.wrapped = false F.precedence = 3 F.expr = digit F.cleanExpr = digit","title":"\u89e3\u7b54"},{"location":"ch05/5.3/5.3/#533","text":"\u7ed9\u51fa\u4e00\u4e2a SDD \u5bf9 x*(3*x+x*x) \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u6c42\u5fae\u5206\u3002\u8868\u8fbe\u5f0f\u4e2d\u6d89\u53ca\u8fd0\u7b97\u7b26 + \u548c * \u3001\u53d8\u91cf x \u548c\u5e38\u91cf\u3002\u5047\u8bbe\u4e0d\u8fdb\u884c\u4efb\u4f55\u7b80\u5316\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bd4\u5982 3*x \u5c06\u88ab\u7ffb\u8bd1\u4e3a 3*1+0*x\u3002","title":"5.3.3 !"},{"location":"ch05/5.4/5.4/","text":"5.4 \u8282\u7684\u7ec3\u4e60 5.4.1 \u6211\u4eec\u5728 5.4.2 \u8282\u4e2d\u63d0\u5230\u53ef\u80fd\u6839\u636e\u8bed\u6cd5\u5206\u6790\u6808\u4e2d\u7684 LR \u72b6\u6001\u6765\u63a8\u5bfc\u51fa\u8fd9\u4e2a\u72b6\u6001\u8868\u793a\u4e86\u4ec0\u4e48\u6587\u6cd5\u7b26\u53f7\u3002\u6211\u4eec\u5982\u4f55\u63a8\u5bfc\u8fd9\u4e2a\u4fe1\u606f\uff1f \u89e3\u7b54 \u89c1\u7b97\u6cd5 4.44 5.4.2 \u6539\u5199\u4e0b\u9762\u7684 SDT: A -> A {a} B | A B {b} | 0 B -> B {c} A | B A {d} | 1 \u4f7f\u5f97\u57fa\u7840\u6587\u6cd5\u53d8\u6210\u975e\u5de6\u9012\u5f52\u7684\u3002 5.4.3 \uff01 \u4e0b\u9762\u7684 SDT \u8ba1\u7b97\u4e86\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u4e32\u7684\u503c\u3002\u5b83\u628a\u8f93\u5165\u7684\u7b26\u53f7\u4e32\u5f53\u505a\u6b63\u4e8c\u8fdb\u5236\u6570\u6765\u89e3\u91ca\u3002 B -> B_1 0 {B.val = 2 * B_1.val} | B_1 1 {B.val = 2 * B_1.val + 1} | 1 {B.val = 1} \u6539\u5199\u8fd9\u4e2a SDT\uff0c\u4f7f\u5f97\u57fa\u7840\u6587\u6cd5\u4e0d\u518d\u662f\u5de6\u9012\u5f52\u7684\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6574\u4e2a\u8f93\u5165\u4e32\u7684\u76f8\u540c\u7684 B.val \u7684\u503c\u3002 \u89e3\u7b54 \u63d0\u53d6\u5de6\u516c\u56e0\u5b50 B -> B_1 digit {B.val = 2 * B_1.val + digit.val} | 1 {B.val = 1} digit -> 0 {digit.val = 0} | 1 {digit.val = 1} \u5728\u5f62\u5982 A = A a | b \u7684\u5de6\u9012\u5f52\u4ea7\u751f\u5f0f\u4e2d\uff0c a \u4e3a digit {B.val = 2 * B_1.val + digit.val} \uff0c b \u4e3a 1 \u6d88\u9664\u5de6\u9012\u5f52\u540e\u5f97 B -> 1 {A.i = 1} A A -> digit {A_1.i = 2 * A.i + digit.val} A_1 {A.val = A_1.val} | \u03b5 {A.val = A.i} digit -> 0 {digit.val = 0} | 1 {digit.val = 1} 5.4.4 \uff01 \u4e3a\u4e0b\u9762\u7684\u4ea7\u751f\u5f0f\u5199\u51fa\u4e00\u4e2a\u548c\u4f8b 5.19 \u7c7b\u4f3c\u7684 L \u5c5e\u6027 SDD\u3002\u8fd9\u91cc\u7684\u6bcf\u4e2a\u4ea7\u751f\u5f0f\u8868\u793a\u4e00\u4e2a\u5e38\u89c1\u7684 C \u8bed\u8a00\u90a3\u6837\u7684\u63a7\u5236\u6d41\u7ed3\u6784\u3002\u4f60\u53ef\u80fd\u9700\u8981\u751f\u6210\u4e00\u4e2a\u4e09\u5730\u5740\u8bed\u53e5\u6765\u8df3\u8f6c\u5230\u67d0\u4e2a\u6807\u53f7 L\uff0c\u6b64\u65f6\u4f60\u53ef\u4ee5\u751f\u6210\u8bed\u53e5 goto L\u3002 S -> if ( C ) S_1 else S_2 S -> do S_1 while ( C ) S -> '{' L '}'; L -> L S | \u03b5 \u8bf7\u6ce8\u610f\uff0c\u5217\u8868\u4e2d\u7684\u4efb\u4f55\u8bed\u53e5\u90fd\u53ef\u80fd\u5305\u542b\u4e00\u6761\u4ece\u5b83\u7684\u5185\u90e8\u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u8bed\u53e5\u7684\u8df3\u8f6c\u6307\u4ee4\uff0c\u56e0\u6b64\u7b80\u5355\u5730\u4e3a\u5404\u4e2a\u8bed\u53e5\u6309\u987a\u5e8f\u751f\u6210\u4ee3\u7801\u662f\u4e0d\u591f\u7684\u3002 \u89e3\u7b54 S -> if ( C ) S_1 else S_2 L_1 = new() C.false = L_1 S_1.next = S.next S.code = C.code || S_1.code || label || L_1 || S_2.code S -> do S_1 while ( C ) L_1 = new() C.true = L_1 S.code = label || L_1 || S_1.code || C.code 5.4.5 \u6309\u7167\u4f8b 5.19 \u7684\u65b9\u6cd5\uff0c\u628a\u5728\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u5404\u4e2a SDD \u8f6c\u6362\u6210\u4e00\u4e2a SDT\u3002 \u89e3\u7b54 S -> if ( C ) S_1 else S_2 S -> if ( {new L_1; C.false = L_1} C ) {S_1.next = S.next} S_1 else S_2 {S.code = C.code || S_1.code || label || L_1 || S_2.code} S -> do S_1 while ( C ) S -> do {new L_1} S_1 while ( {C.true = L_1} C ) {S.code = label || L_1 || S_1.code || C.code} 5.4.6 \u4fee\u6539\u56fe 5.25 \u4e2d\u7684 SDD\uff0c\u4f7f\u5b83\u5305\u542b\u4e00\u4e2a\u7efc\u5408\u5c5e\u6027 B.le\uff0c\u5373\u4e00\u4e2a\u65b9\u6846\u7684\u957f\u5ea6\u3002\u4e24\u4e2a\u65b9\u6846\u5e76\u5217\u540e\u5f97\u5230\u7684\u65b9\u6846\u7684\u957f\u5ea6\u662f\u8fd9\u4e24\u4e2a\u65b9\u6846\u7684\u957f\u5ea6\u548c\u3002\u7136\u540e\u628a\u4f60\u7684\u65b0\u89c4\u5219\u52a0\u5165\u5230\u56fe 5.26 \u4e2d SDT \u7684\u5408\u9002\u4f4d\u7f6e\u4e0a\u3002 5.4.7 \u4fee\u6539\u56fe 5.25 \u4e2d\u7684 SDD\uff0c\u4f7f\u5b83\u5305\u542b\u4e0a\u6807\uff0c\u7528\u65b9\u6846\u4e4b\u95f4\u7684\u8fd0\u7b97\u7b26 sup \u8868\u793a\u3002\u5982\u679c\u65b9\u6846 B_2 \u662f\u65b9\u6846 B_1 \u7684\u4e00\u4e2a\u4e0a\u6807\uff0c\u90a3\u4e48\u5c06 B_2 \u7684\u57fa\u7ebf\u653e\u5728 B_1 \u7684\u57fa\u7ebf\u4e0a\u65b9\uff0c\u4e24\u6761\u57fa\u7ebf\u7684\u8ddd\u79bb\u662f 0.6 \u4e58\u4ee5 B_1 \u7684\u5927\u5c0f\u3002\u628a\u65b0\u7684\u4ea7\u751f\u5f0f\u548c\u89c4\u5219\u52a0\u5165\u5230\u56fe 5.26 \u7684 SDT \u4e2d\u53bb\u3002 5.4.6 \u548c 5.4.7 \u7684\u89e3\u7b54 1) S -> B B.ps = 10 B.wd = 2) S -> B_1 B_2 B_1.ps = B.ps B_2.ps = B.ps B.wd = B_1.wd + B_2.wd B.ht = max(B_1.ht, B_2.ht) B.dp = max(B_1.dp, B_2.dp) 3) B -> B_1 sub B_2 B_1.ps = B.ps B_2.ps = 0.7 * B.ps B.wd = B_1.wd + B_2.wd B.ht = max(B_1.ht, B_2.ht - 0.25 * B.ps) B.dp = max(B_1.dp, B_2.dp + 0.25 * B.ps) 4) B -> B_1 sup B_2 B_1.ps = B.ps B_2.ps = 0.6 * B.ps B.wd = B_1.wd + B_2.wd B.ht = max(B_1.ht, B_2.ht + 0.6 * B.ps) B.dp = max(B_1.dp, B_2.dp - 0.6 * B.ps) 5) B -> ( B_1 ) B_1.ps = B.ps B.wd = B_1.wd B.ht = B_1.ht B.dp = B_1.dp 6) B -> text B.wd = getWd(B.ps, text.lexval) B.ht = getHt(B.ps, text.lexval) B.dp = getDp(B.ps, text.lexval)","title":"5.4 \u8282\u7684\u7ec3\u4e60"},{"location":"ch05/5.4/5.4/#54","text":"","title":"5.4 \u8282\u7684\u7ec3\u4e60"},{"location":"ch05/5.4/5.4/#541","text":"\u6211\u4eec\u5728 5.4.2 \u8282\u4e2d\u63d0\u5230\u53ef\u80fd\u6839\u636e\u8bed\u6cd5\u5206\u6790\u6808\u4e2d\u7684 LR \u72b6\u6001\u6765\u63a8\u5bfc\u51fa\u8fd9\u4e2a\u72b6\u6001\u8868\u793a\u4e86\u4ec0\u4e48\u6587\u6cd5\u7b26\u53f7\u3002\u6211\u4eec\u5982\u4f55\u63a8\u5bfc\u8fd9\u4e2a\u4fe1\u606f\uff1f","title":"5.4.1"},{"location":"ch05/5.4/5.4/#_1","text":"\u89c1\u7b97\u6cd5 4.44","title":"\u89e3\u7b54"},{"location":"ch05/5.4/5.4/#542","text":"\u6539\u5199\u4e0b\u9762\u7684 SDT: A -> A {a} B | A B {b} | 0 B -> B {c} A | B A {d} | 1 \u4f7f\u5f97\u57fa\u7840\u6587\u6cd5\u53d8\u6210\u975e\u5de6\u9012\u5f52\u7684\u3002","title":"5.4.2"},{"location":"ch05/5.4/5.4/#543","text":"\u4e0b\u9762\u7684 SDT \u8ba1\u7b97\u4e86\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u4e32\u7684\u503c\u3002\u5b83\u628a\u8f93\u5165\u7684\u7b26\u53f7\u4e32\u5f53\u505a\u6b63\u4e8c\u8fdb\u5236\u6570\u6765\u89e3\u91ca\u3002 B -> B_1 0 {B.val = 2 * B_1.val} | B_1 1 {B.val = 2 * B_1.val + 1} | 1 {B.val = 1} \u6539\u5199\u8fd9\u4e2a SDT\uff0c\u4f7f\u5f97\u57fa\u7840\u6587\u6cd5\u4e0d\u518d\u662f\u5de6\u9012\u5f52\u7684\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6574\u4e2a\u8f93\u5165\u4e32\u7684\u76f8\u540c\u7684 B.val \u7684\u503c\u3002","title":"5.4.3 \uff01"},{"location":"ch05/5.4/5.4/#_2","text":"\u63d0\u53d6\u5de6\u516c\u56e0\u5b50 B -> B_1 digit {B.val = 2 * B_1.val + digit.val} | 1 {B.val = 1} digit -> 0 {digit.val = 0} | 1 {digit.val = 1} \u5728\u5f62\u5982 A = A a | b \u7684\u5de6\u9012\u5f52\u4ea7\u751f\u5f0f\u4e2d\uff0c a \u4e3a digit {B.val = 2 * B_1.val + digit.val} \uff0c b \u4e3a 1 \u6d88\u9664\u5de6\u9012\u5f52\u540e\u5f97 B -> 1 {A.i = 1} A A -> digit {A_1.i = 2 * A.i + digit.val} A_1 {A.val = A_1.val} | \u03b5 {A.val = A.i} digit -> 0 {digit.val = 0} | 1 {digit.val = 1}","title":"\u89e3\u7b54"},{"location":"ch05/5.4/5.4/#544","text":"\u4e3a\u4e0b\u9762\u7684\u4ea7\u751f\u5f0f\u5199\u51fa\u4e00\u4e2a\u548c\u4f8b 5.19 \u7c7b\u4f3c\u7684 L \u5c5e\u6027 SDD\u3002\u8fd9\u91cc\u7684\u6bcf\u4e2a\u4ea7\u751f\u5f0f\u8868\u793a\u4e00\u4e2a\u5e38\u89c1\u7684 C \u8bed\u8a00\u90a3\u6837\u7684\u63a7\u5236\u6d41\u7ed3\u6784\u3002\u4f60\u53ef\u80fd\u9700\u8981\u751f\u6210\u4e00\u4e2a\u4e09\u5730\u5740\u8bed\u53e5\u6765\u8df3\u8f6c\u5230\u67d0\u4e2a\u6807\u53f7 L\uff0c\u6b64\u65f6\u4f60\u53ef\u4ee5\u751f\u6210\u8bed\u53e5 goto L\u3002 S -> if ( C ) S_1 else S_2 S -> do S_1 while ( C ) S -> '{' L '}'; L -> L S | \u03b5 \u8bf7\u6ce8\u610f\uff0c\u5217\u8868\u4e2d\u7684\u4efb\u4f55\u8bed\u53e5\u90fd\u53ef\u80fd\u5305\u542b\u4e00\u6761\u4ece\u5b83\u7684\u5185\u90e8\u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u8bed\u53e5\u7684\u8df3\u8f6c\u6307\u4ee4\uff0c\u56e0\u6b64\u7b80\u5355\u5730\u4e3a\u5404\u4e2a\u8bed\u53e5\u6309\u987a\u5e8f\u751f\u6210\u4ee3\u7801\u662f\u4e0d\u591f\u7684\u3002","title":"5.4.4 \uff01"},{"location":"ch05/5.4/5.4/#_3","text":"S -> if ( C ) S_1 else S_2 L_1 = new() C.false = L_1 S_1.next = S.next S.code = C.code || S_1.code || label || L_1 || S_2.code S -> do S_1 while ( C ) L_1 = new() C.true = L_1 S.code = label || L_1 || S_1.code || C.code","title":"\u89e3\u7b54"},{"location":"ch05/5.4/5.4/#545","text":"\u6309\u7167\u4f8b 5.19 \u7684\u65b9\u6cd5\uff0c\u628a\u5728\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u5404\u4e2a SDD \u8f6c\u6362\u6210\u4e00\u4e2a SDT\u3002","title":"5.4.5"},{"location":"ch05/5.4/5.4/#_4","text":"S -> if ( C ) S_1 else S_2 S -> if ( {new L_1; C.false = L_1} C ) {S_1.next = S.next} S_1 else S_2 {S.code = C.code || S_1.code || label || L_1 || S_2.code} S -> do S_1 while ( C ) S -> do {new L_1} S_1 while ( {C.true = L_1} C ) {S.code = label || L_1 || S_1.code || C.code}","title":"\u89e3\u7b54"},{"location":"ch05/5.4/5.4/#546","text":"\u4fee\u6539\u56fe 5.25 \u4e2d\u7684 SDD\uff0c\u4f7f\u5b83\u5305\u542b\u4e00\u4e2a\u7efc\u5408\u5c5e\u6027 B.le\uff0c\u5373\u4e00\u4e2a\u65b9\u6846\u7684\u957f\u5ea6\u3002\u4e24\u4e2a\u65b9\u6846\u5e76\u5217\u540e\u5f97\u5230\u7684\u65b9\u6846\u7684\u957f\u5ea6\u662f\u8fd9\u4e24\u4e2a\u65b9\u6846\u7684\u957f\u5ea6\u548c\u3002\u7136\u540e\u628a\u4f60\u7684\u65b0\u89c4\u5219\u52a0\u5165\u5230\u56fe 5.26 \u4e2d SDT \u7684\u5408\u9002\u4f4d\u7f6e\u4e0a\u3002","title":"5.4.6"},{"location":"ch05/5.4/5.4/#547","text":"\u4fee\u6539\u56fe 5.25 \u4e2d\u7684 SDD\uff0c\u4f7f\u5b83\u5305\u542b\u4e0a\u6807\uff0c\u7528\u65b9\u6846\u4e4b\u95f4\u7684\u8fd0\u7b97\u7b26 sup \u8868\u793a\u3002\u5982\u679c\u65b9\u6846 B_2 \u662f\u65b9\u6846 B_1 \u7684\u4e00\u4e2a\u4e0a\u6807\uff0c\u90a3\u4e48\u5c06 B_2 \u7684\u57fa\u7ebf\u653e\u5728 B_1 \u7684\u57fa\u7ebf\u4e0a\u65b9\uff0c\u4e24\u6761\u57fa\u7ebf\u7684\u8ddd\u79bb\u662f 0.6 \u4e58\u4ee5 B_1 \u7684\u5927\u5c0f\u3002\u628a\u65b0\u7684\u4ea7\u751f\u5f0f\u548c\u89c4\u5219\u52a0\u5165\u5230\u56fe 5.26 \u7684 SDT \u4e2d\u53bb\u3002","title":"5.4.7"},{"location":"ch05/5.4/5.4/#546-547","text":"1) S -> B B.ps = 10 B.wd = 2) S -> B_1 B_2 B_1.ps = B.ps B_2.ps = B.ps B.wd = B_1.wd + B_2.wd B.ht = max(B_1.ht, B_2.ht) B.dp = max(B_1.dp, B_2.dp) 3) B -> B_1 sub B_2 B_1.ps = B.ps B_2.ps = 0.7 * B.ps B.wd = B_1.wd + B_2.wd B.ht = max(B_1.ht, B_2.ht - 0.25 * B.ps) B.dp = max(B_1.dp, B_2.dp + 0.25 * B.ps) 4) B -> B_1 sup B_2 B_1.ps = B.ps B_2.ps = 0.6 * B.ps B.wd = B_1.wd + B_2.wd B.ht = max(B_1.ht, B_2.ht + 0.6 * B.ps) B.dp = max(B_1.dp, B_2.dp - 0.6 * B.ps) 5) B -> ( B_1 ) B_1.ps = B.ps B.wd = B_1.wd B.ht = B_1.ht B.dp = B_1.dp 6) B -> text B.wd = getWd(B.ps, text.lexval) B.ht = getHt(B.ps, text.lexval) B.dp = getDp(B.ps, text.lexval)","title":"5.4.6 \u548c 5.4.7 \u7684\u89e3\u7b54"},{"location":"ch05/5.5/5.5/","text":"5.5 \u8282\u7684\u7ec3\u4e60 5.5.1 \u6309\u7167 5.5.1 \u8282\u7684\u98ce\u683c\uff0c\u5c06\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u6bcf\u4e2a SDD \u5b9e\u73b0\u4e3a\u9012\u5f52\u4e0b\u964d\u7684\u8bed\u6cd5\u5206\u6790\u5668\u3002 5.5.2 \u6309\u7167 5.5.2 \u8282\u7684\u98ce\u683c\uff0c\u5c06\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u6bcf\u4e2a SDD \u5b9e\u73b0\u4e3a\u9012\u5f52\u4e0b\u964d\u7684\u8bed\u6cd5\u5206\u6790\u5668\u3002 5.5.3 \u6309\u7167 5.5.3 \u8282\u7684\u98ce\u683c\uff0c\u5c06\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u6bcf\u4e2a SDD \u548c\u4e00\u4e2a LL \u8bed\u6cd5\u5206\u6790\u5668\u4e00\u8d77\u5b9e\u73b0\u3002\u5b83\u4eec\u5e94\u8be5\u8fb9\u626b\u63cf\u8f93\u5165\u8fb9\u751f\u6210\u4ee3\u7801\u3002 5.5.4 \u6309\u7167 5.5.3 \u8282\u7684\u98ce\u683c\uff0c\u5c06\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u6bcf\u4e2a SDD \u548c\u4e00\u4e2a LL \u8bed\u6cd5\u5206\u6790\u5668\u4e00\u8d77\u5b9e\u73b0\uff0c\u4f46\u662f\u4ee3\u7801\uff08\u6216\u8005\u6307\u5411\u4ee3\u7801\u7684\u6307\u9488\uff09\u5b58\u653e\u5728\u6808\u4e2d\u3002 5.5.5 \u6309\u7167 5.5.4 \u8282\u7684\u98ce\u683c\uff0c\u5c06\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u6bcf\u4e2a SDD \u548c\u4e00\u4e2a LR \u8bed\u6cd5\u5206\u6790\u5668\u4e00\u8d77\u5b9e\u73b0\u3002 5.5.6 \u6309\u7167 5.5.1 \u8282 \u7684\u98ce\u683c\u5b9e\u73b0\u7ec3\u4e60 5.2.4 \u4e2d\u5f97\u5230\u7684 SDD\u3002\u6309\u7167 5.5.2 \u8282\u7684\u98ce\u683c\u5f97\u5230\u7684\u5b9e\u73b0\u548c\u8fd9\u4e2a\u5b9e\u73b0\u76f8\u6bd4\u6709\u4ec0\u4e48\u4e0d\u540c\u5417\uff1f","title":"5.5 \u8282\u7684\u7ec3\u4e60"},{"location":"ch05/5.5/5.5/#55","text":"","title":"5.5 \u8282\u7684\u7ec3\u4e60"},{"location":"ch05/5.5/5.5/#551","text":"\u6309\u7167 5.5.1 \u8282\u7684\u98ce\u683c\uff0c\u5c06\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u6bcf\u4e2a SDD \u5b9e\u73b0\u4e3a\u9012\u5f52\u4e0b\u964d\u7684\u8bed\u6cd5\u5206\u6790\u5668\u3002","title":"5.5.1"},{"location":"ch05/5.5/5.5/#552","text":"\u6309\u7167 5.5.2 \u8282\u7684\u98ce\u683c\uff0c\u5c06\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u6bcf\u4e2a SDD \u5b9e\u73b0\u4e3a\u9012\u5f52\u4e0b\u964d\u7684\u8bed\u6cd5\u5206\u6790\u5668\u3002","title":"5.5.2"},{"location":"ch05/5.5/5.5/#553","text":"\u6309\u7167 5.5.3 \u8282\u7684\u98ce\u683c\uff0c\u5c06\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u6bcf\u4e2a SDD \u548c\u4e00\u4e2a LL \u8bed\u6cd5\u5206\u6790\u5668\u4e00\u8d77\u5b9e\u73b0\u3002\u5b83\u4eec\u5e94\u8be5\u8fb9\u626b\u63cf\u8f93\u5165\u8fb9\u751f\u6210\u4ee3\u7801\u3002","title":"5.5.3"},{"location":"ch05/5.5/5.5/#554","text":"\u6309\u7167 5.5.3 \u8282\u7684\u98ce\u683c\uff0c\u5c06\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u6bcf\u4e2a SDD \u548c\u4e00\u4e2a LL \u8bed\u6cd5\u5206\u6790\u5668\u4e00\u8d77\u5b9e\u73b0\uff0c\u4f46\u662f\u4ee3\u7801\uff08\u6216\u8005\u6307\u5411\u4ee3\u7801\u7684\u6307\u9488\uff09\u5b58\u653e\u5728\u6808\u4e2d\u3002","title":"5.5.4"},{"location":"ch05/5.5/5.5/#555","text":"\u6309\u7167 5.5.4 \u8282\u7684\u98ce\u683c\uff0c\u5c06\u7ec3\u4e60 5.4.4 \u4e2d\u5f97\u5230\u7684\u6bcf\u4e2a SDD \u548c\u4e00\u4e2a LR \u8bed\u6cd5\u5206\u6790\u5668\u4e00\u8d77\u5b9e\u73b0\u3002","title":"5.5.5"},{"location":"ch05/5.5/5.5/#556","text":"\u6309\u7167 5.5.1 \u8282 \u7684\u98ce\u683c\u5b9e\u73b0\u7ec3\u4e60 5.2.4 \u4e2d\u5f97\u5230\u7684 SDD\u3002\u6309\u7167 5.5.2 \u8282\u7684\u98ce\u683c\u5f97\u5230\u7684\u5b9e\u73b0\u548c\u8fd9\u4e2a\u5b9e\u73b0\u76f8\u6bd4\u6709\u4ec0\u4e48\u4e0d\u540c\u5417\uff1f","title":"5.5.6"},{"location":"ch06/6.1/6.1/","text":"6.1 \u8282\u7684\u7ec3\u4e60 \u4e3a\u4e0b\u9762\u7684\u8868\u8fbe\u5f0f\u6784\u9020 DAG ((x+y)-((x+y)*(x-y)))+((x+y)*(x-y)) \u89e3\u7b54 \u4e3a\u4e0b\u5217\u8868\u8fbe\u5f0f\u6784\u9020 DAG\uff0c\u4e14\u6307\u51fa\u4ed6\u4eec\u6bcf\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u503c\u7f16\u7801\u3002\u5047\u5b9a + \u662f\u5de6\u7ed3\u5408\u7684\u3002 a+b+(a+b) a+b+a+b a+a+(a+a+a+(a+a+a+a)) \u89e3\u7b54 a+b+(a+b) 1 id a 2 id b 3 + 1 2 4 + 3 3 a+b+a+b 1 id a 2 id b 3 + 1 2 4 + 3 1 5 + 4 2 a+a+(a+a+a+(a+a+a+a)) 1 id a 2 + 1 1 3 + 2 1 4 + 3 1 5 + 3 4 6 + 2 5","title":"6.1 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.1/6.1/#61","text":"","title":"6.1 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.1/6.1/#dag","text":"((x+y)-((x+y)*(x-y)))+((x+y)*(x-y))","title":"\u4e3a\u4e0b\u9762\u7684\u8868\u8fbe\u5f0f\u6784\u9020 DAG"},{"location":"ch06/6.1/6.1/#_1","text":"","title":"\u89e3\u7b54"},{"location":"ch06/6.1/6.1/#dag_1","text":"a+b+(a+b) a+b+a+b a+a+(a+a+a+(a+a+a+a))","title":"\u4e3a\u4e0b\u5217\u8868\u8fbe\u5f0f\u6784\u9020 DAG\uff0c\u4e14\u6307\u51fa\u4ed6\u4eec\u6bcf\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u503c\u7f16\u7801\u3002\u5047\u5b9a + \u662f\u5de6\u7ed3\u5408\u7684\u3002"},{"location":"ch06/6.1/6.1/#_2","text":"a+b+(a+b) 1 id a 2 id b 3 + 1 2 4 + 3 3 a+b+a+b 1 id a 2 id b 3 + 1 2 4 + 3 1 5 + 4 2 a+a+(a+a+a+(a+a+a+a)) 1 id a 2 + 1 1 3 + 2 1 4 + 3 1 5 + 3 4 6 + 2 5","title":"\u89e3\u7b54"},{"location":"ch06/6.2/6.2/","text":"6.2 \u8282\u7684\u7ec3\u4e60 6.2.1 \u5c06\u7b97\u6570\u8868\u8fbe\u5f0f a+-(b+c) \u7ffb\u8bd1\u6210 \u62bd\u8c61\u8bed\u6cd5\u6811 \u56db\u5143\u5f0f\u5e8f\u5217 \u4e09\u5143\u5f0f\u5e8f\u5217 \u95f4\u63a5\u4e09\u5143\u5f0f\u5e8f\u5217 \u89e3\u7b54 \u62bd\u8c61\u8bed\u6cd5\u6811 \u56db\u5143\u5f0f\u5e8f\u5217 op arg1 arg2 result 0 + b c t1 1 minus t1 t2 2 + a t2 t3 \u4e09\u5143\u5f0f\u5e8f\u5217 op arg1 arg2 0 + b c 1 minus (0) 2 + a (1) \u95f4\u63a5\u4e09\u5143\u5f0f\u5e8f\u5217 op arg1 arg2 0 + b c 1 minus (0) 2 + a (1) instruction 0 (0) 1 (1) 2 (2) \u53c2\u8003 \u95f4\u63a5\u4e09\u5143\u5f0f\u66f4\u8be6\u7ec6\u7684\u8bb2\u89e3 6.2.2 \u5bf9\u4e0b\u5217\u8d4b\u503c\u8bed\u53e5\u91cd\u590d\u7ec3\u4e60 6.2.1 a = b[i] + c[j] a[i] = b*c - b*d x = f(y+1) + 2 x = *p + &y \u89e3\u7b54 a = b[i] + c[j] \u56db\u5143\u5f0f 0) =[] b i t1 1) =[] c j t2 2) + t1 t2 t3 3) = t3 a \u4e09\u5143\u5f0f 0) =[] b i 1) =[] c j 2) + (0) (1) 3) = a (2) \u95f4\u63a5\u4e09\u5143\u5f0f 0) =[] b i 1) =[] c j 2) + (0) (1) 3) = a (2) 0\uff09 1\uff09 2\uff09 3\uff09 a[i] = b*c - b*d \u56db\u5143\u5f0f 0) * b c t1 1) * b d t2 2) - t1 t2 t3 3) []= a i t4 4) = t3 t4 \u4e09\u5143\u5f0f 0) * b c 1) * b d 2) - (0) (1) 3) []= a i 4) = (3) (2) \u95f4\u63a5\u4e09\u5143\u5f0f 0) * b c 1) * b d 2) - (0) (1) 3) []= a i 4) = (3) (2) 0) 1) 2) 3) 4) x = f(y+1) + 2 \u56db\u5143\u5f0f 0) + y 1 t1 1) param t1 2) call f 1 t2 3) + t2 2 t3 4) = t3 x \u4e09\u5143\u5f0f 0) + y 1 1) param (0) 2) call f 1 3) + (2) 2 4) = x (3) \u95f4\u63a5\u4e09\u5143\u5f0f 0) + y 1 1) param (0) 2) call f 1 3) + (2) 2 4) = x (3) 0) 1) 2) 3) 4) \u53c2\u8003 \u6570\u7ec4\u5143\u7d20\u7684\u53d6\u503c\u548c\u8d4b\u503c 6.2.3 ! \u8bf4\u660e\u5982\u4f55\u5bf9\u4e00\u4e2a\u4e09\u5730\u5740\u4ee3\u7801\u5e8f\u5217\u8fdb\u884c\u8f6c\u6362\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u88ab\u5b9a\u503c\u7684\u53d8\u91cf\u90fd\u6709\u552f\u4e00\u7684\u53d8\u91cf\u540d\u3002","title":"6.2 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.2/6.2/#62","text":"","title":"6.2 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.2/6.2/#621","text":"\u5c06\u7b97\u6570\u8868\u8fbe\u5f0f a+-(b+c) \u7ffb\u8bd1\u6210 \u62bd\u8c61\u8bed\u6cd5\u6811 \u56db\u5143\u5f0f\u5e8f\u5217 \u4e09\u5143\u5f0f\u5e8f\u5217 \u95f4\u63a5\u4e09\u5143\u5f0f\u5e8f\u5217","title":"6.2.1"},{"location":"ch06/6.2/6.2/#_1","text":"\u62bd\u8c61\u8bed\u6cd5\u6811 \u56db\u5143\u5f0f\u5e8f\u5217 op arg1 arg2 result 0 + b c t1 1 minus t1 t2 2 + a t2 t3 \u4e09\u5143\u5f0f\u5e8f\u5217 op arg1 arg2 0 + b c 1 minus (0) 2 + a (1) \u95f4\u63a5\u4e09\u5143\u5f0f\u5e8f\u5217 op arg1 arg2 0 + b c 1 minus (0) 2 + a (1) instruction 0 (0) 1 (1) 2 (2)","title":"\u89e3\u7b54"},{"location":"ch06/6.2/6.2/#_2","text":"\u95f4\u63a5\u4e09\u5143\u5f0f\u66f4\u8be6\u7ec6\u7684\u8bb2\u89e3","title":"\u53c2\u8003"},{"location":"ch06/6.2/6.2/#622","text":"\u5bf9\u4e0b\u5217\u8d4b\u503c\u8bed\u53e5\u91cd\u590d\u7ec3\u4e60 6.2.1 a = b[i] + c[j] a[i] = b*c - b*d x = f(y+1) + 2 x = *p + &y","title":"6.2.2"},{"location":"ch06/6.2/6.2/#_3","text":"a = b[i] + c[j] \u56db\u5143\u5f0f 0) =[] b i t1 1) =[] c j t2 2) + t1 t2 t3 3) = t3 a \u4e09\u5143\u5f0f 0) =[] b i 1) =[] c j 2) + (0) (1) 3) = a (2) \u95f4\u63a5\u4e09\u5143\u5f0f 0) =[] b i 1) =[] c j 2) + (0) (1) 3) = a (2) 0\uff09 1\uff09 2\uff09 3\uff09 a[i] = b*c - b*d \u56db\u5143\u5f0f 0) * b c t1 1) * b d t2 2) - t1 t2 t3 3) []= a i t4 4) = t3 t4 \u4e09\u5143\u5f0f 0) * b c 1) * b d 2) - (0) (1) 3) []= a i 4) = (3) (2) \u95f4\u63a5\u4e09\u5143\u5f0f 0) * b c 1) * b d 2) - (0) (1) 3) []= a i 4) = (3) (2) 0) 1) 2) 3) 4) x = f(y+1) + 2 \u56db\u5143\u5f0f 0) + y 1 t1 1) param t1 2) call f 1 t2 3) + t2 2 t3 4) = t3 x \u4e09\u5143\u5f0f 0) + y 1 1) param (0) 2) call f 1 3) + (2) 2 4) = x (3) \u95f4\u63a5\u4e09\u5143\u5f0f 0) + y 1 1) param (0) 2) call f 1 3) + (2) 2 4) = x (3) 0) 1) 2) 3) 4)","title":"\u89e3\u7b54"},{"location":"ch06/6.2/6.2/#_4","text":"\u6570\u7ec4\u5143\u7d20\u7684\u53d6\u503c\u548c\u8d4b\u503c","title":"\u53c2\u8003"},{"location":"ch06/6.2/6.2/#623","text":"\u8bf4\u660e\u5982\u4f55\u5bf9\u4e00\u4e2a\u4e09\u5730\u5740\u4ee3\u7801\u5e8f\u5217\u8fdb\u884c\u8f6c\u6362\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u88ab\u5b9a\u503c\u7684\u53d8\u91cf\u90fd\u6709\u552f\u4e00\u7684\u53d8\u91cf\u540d\u3002","title":"6.2.3 !"},{"location":"ch06/6.3/6.3/","text":"6.3 \u8282\u7684\u7ec3\u4e60 6.3.1 \u786e\u5b9a\u4e0b\u5217\u58f0\u660e\u5e8f\u5217\u4e2d\u5404\u4e2a\u6807\u8bc6\u7b26\u7684\u7c7b\u578b\u548c\u76f8\u5bf9\u5730\u5740\u3002 float x; record {float x; float y;} p; record {int tag; float x; float y;} q; \u89e3\u7b54 SDT S -> {top = new Evn(); offset = 0;} D D -> T id; {top.put(id.lexeme, T.type, offset); offset += T.width} D1 D -> \u03b5 T -> int {T.type = interget; T.width = 4;} T -> float {T.type = float; T.width = 8;} T -> record '{' {Evn.push(top), top = new Evn(); Stack.push(offset), offset = 0;} D '}' {T.type = record(top); T.width = offset; top = Evn.top(); offset = Stack.pop();} \u6807\u8bc6\u7b26\u7c7b\u578b\u548c\u76f8\u5bf9\u5730\u5740 line id type offset Evn 1) x float 0 1 2) x float 0 2 2) y float 8 2 2) p record() 8 1 3) tag int 0 3 3) x float 4 3 3) y float 12 3 3) q record() 24 1 6.3.2 ! \u5c06\u56fe 6-18 \u5bf9\u5b57\u6bb5\u540d\u7684\u5904\u7406\u65b9\u6cd5\u6269\u5c55\u5230\u7c7b\u548c\u5355\u7ee7\u627f\u7684\u5c42\u6b21\u7ed3\u6784\u3002 \u7ed9\u51fa\u7c7b Evn \u7684\u4e00\u4e2a\u5b9e\u73b0\u3002\u8be5\u5b9e\u73b0\u652f\u6301\u7b26\u53f7\u8868\u94fe\uff0c\u4f7f\u5f97\u5b50\u7c7b\u53ef\u4ee5\u91cd\u5b9a\u4e49\u4e00\u4e2a\u5b57\u6bb5\u540d\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u67d0\u4e2a\u8d85\u7c7b\u4e2d\u7684\u5b57\u6bb5\u540d\u3002 \u7ed9\u51fa\u4e00\u4e2a\u7ffb\u8bd1\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u80fd\u591f\u4e3a\u7c7b\u4e2d\u7684\u5b57\u6bb5\u5206\u914d\u8fde\u7eed\u7684\u6570\u636e\u533a\u57df\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u4e2d\u5305\u542b\u7ee7\u627f\u800c\u6765\u7684\u57df\u3002\u7ee7\u627f\u800c\u6765\u7684\u5b57\u6bb5\u5fc5\u987b\u4fdd\u6301\u5728\u5bf9\u8d85\u7c7b\u8fdb\u884c\u5b58\u50a8\u5206\u914d\u65f6\u83b7\u5f97\u7684\u76f8\u5bf9\u5730\u5740\u3002","title":"6.3 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.3/6.3/#63","text":"","title":"6.3 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.3/6.3/#631","text":"\u786e\u5b9a\u4e0b\u5217\u58f0\u660e\u5e8f\u5217\u4e2d\u5404\u4e2a\u6807\u8bc6\u7b26\u7684\u7c7b\u578b\u548c\u76f8\u5bf9\u5730\u5740\u3002 float x; record {float x; float y;} p; record {int tag; float x; float y;} q;","title":"6.3.1"},{"location":"ch06/6.3/6.3/#_1","text":"SDT S -> {top = new Evn(); offset = 0;} D D -> T id; {top.put(id.lexeme, T.type, offset); offset += T.width} D1 D -> \u03b5 T -> int {T.type = interget; T.width = 4;} T -> float {T.type = float; T.width = 8;} T -> record '{' {Evn.push(top), top = new Evn(); Stack.push(offset), offset = 0;} D '}' {T.type = record(top); T.width = offset; top = Evn.top(); offset = Stack.pop();} \u6807\u8bc6\u7b26\u7c7b\u578b\u548c\u76f8\u5bf9\u5730\u5740 line id type offset Evn 1) x float 0 1 2) x float 0 2 2) y float 8 2 2) p record() 8 1 3) tag int 0 3 3) x float 4 3 3) y float 12 3 3) q record() 24 1","title":"\u89e3\u7b54"},{"location":"ch06/6.3/6.3/#632","text":"\u5c06\u56fe 6-18 \u5bf9\u5b57\u6bb5\u540d\u7684\u5904\u7406\u65b9\u6cd5\u6269\u5c55\u5230\u7c7b\u548c\u5355\u7ee7\u627f\u7684\u5c42\u6b21\u7ed3\u6784\u3002 \u7ed9\u51fa\u7c7b Evn \u7684\u4e00\u4e2a\u5b9e\u73b0\u3002\u8be5\u5b9e\u73b0\u652f\u6301\u7b26\u53f7\u8868\u94fe\uff0c\u4f7f\u5f97\u5b50\u7c7b\u53ef\u4ee5\u91cd\u5b9a\u4e49\u4e00\u4e2a\u5b57\u6bb5\u540d\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u67d0\u4e2a\u8d85\u7c7b\u4e2d\u7684\u5b57\u6bb5\u540d\u3002 \u7ed9\u51fa\u4e00\u4e2a\u7ffb\u8bd1\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u80fd\u591f\u4e3a\u7c7b\u4e2d\u7684\u5b57\u6bb5\u5206\u914d\u8fde\u7eed\u7684\u6570\u636e\u533a\u57df\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u4e2d\u5305\u542b\u7ee7\u627f\u800c\u6765\u7684\u57df\u3002\u7ee7\u627f\u800c\u6765\u7684\u5b57\u6bb5\u5fc5\u987b\u4fdd\u6301\u5728\u5bf9\u8d85\u7c7b\u8fdb\u884c\u5b58\u50a8\u5206\u914d\u65f6\u83b7\u5f97\u7684\u76f8\u5bf9\u5730\u5740\u3002","title":"6.3.2 !"},{"location":"ch06/6.4/6.4/","text":"6.4 \u8282\u7684\u7ec3\u4e60 6.4.1 \u5411\u56fe 6-19 \u7684\u7ffb\u8bd1\u65b9\u6848\u4e2d\u52a0\u5165\u5bf9\u5e94\u4e8e\u4e0b\u5217\u4ea7\u751f\u5f0f\u7684\u89c4\u5219\uff1a E -> E1 * E2 E -> +E1 \u89e3\u7b54 \u4ea7\u751f\u5f0f \u8bed\u4e49\u89c4\u5219 E -> E1 * E2 { E.addr = new Temp(); E.code = E1.code || E2.code || gen(E.addr '=' E1.addr '*' E2.addr); } | +E1 { E.addr = E1.addr; E.code = E1.code; } 6.4.2 \u4f7f\u7528\u56fe 6-20 \u7684\u589e\u91cf\u5f0f\u7ffb\u8bd1\u65b9\u6848\u91cd\u590d\u7ec3\u4e60 6.4.1 \u89e3\u7b54 \u4ea7\u751f\u5f0f \u8bed\u4e49\u89c4\u5219 E -> E1 * E2 { E.addr = new Temp(); gen(E.addr '=' E1.addr '*' E2.addr; } | +E1 { E.addr = E1.addr; } 6.4.3 \u4f7f\u7528\u56fe 6-22 \u7684\u7ffb\u8bd1\u65b9\u6848\u6765\u7ffb\u8bd1\u4e0b\u5217\u8d4b\u503c\u8bed\u53e5\uff1a x = a[i] + b[j] x = a[i][j] + b[i][j] ! x = a[b[i][j]][c[k]] \u89e3\u7b54 x = a[i] + b[j] \u8bed\u6cd5\u5206\u6790\u6811: \u4e09\u5730\u5740\u4ee3\u7801 t_1 = i * awidth t_2 = a[t_1] t_3 = j * bwidth t_4 = b[t_3] t_5 = t_2 + t_4 x = t_5 x = a[i][j] + b[i][j] \u8bed\u6cd5\u5206\u6790\u6811\uff1a \u4e09\u5730\u5740\u4ee3\u7801\uff1a t_1 = i * ai_width t_2 = j * aj_width t_3 = t_1 + t_2 t_4 = a[t_3] t_5 = i * bi_width t_6 = j * bj_width t_7 = t_5 + t_6 t_8 = b[t_7] t_9 = t_4 + t_8 x = t_9 ! x = a[b[i][j]][c[k]] 6.4.4 ! \u4fee\u6539\u56fe 6-22 \u7684\u7ffb\u8bd1\u65b9\u6848\uff0c\u4f7f\u4e4b\u9002\u5408 Fortran \u98ce\u683c\u7684\u6570\u636e\u5f15\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4 n \u7ef4\u6570\u7ec4\u7684\u5f15\u7528\u4e3a id[E1, E2, \u2026, En] \u89e3\u7b54 \u4ec5\u9700\u4fee\u6539 L \u4ea7\u751f\u5f0f\uff08\u540c\u56fe 6-22 \u4e00\u6837\uff0c\u672a\u8003\u8651\u6d88\u9664\u5de6\u9012\u5f52\uff09 L -> id[A] { L.addr = A.addr; global.array = top.get(id.lexeme); } A -> E { A.array = global.array; A.type = A.array.type.elem; A.addr = new Temp(); gen(A.addr '=' E.addr '*' A.type.width; } A -> A1,E { A.array = A1.array; A.type = A1.type.elem; t = new Temp(); A.addr = new Temp(); gen(t '=' E.addr '*' A.type.length); gen(A.addr '=' A1.addr '+' t); } \u6ce8\u610f \u4ee4 a \u8868\u793a\u4e00\u4e2a i*j \u7684\u6570\u7ec4\uff0c\u5355\u4e2a\u5143\u7d20\u5bbd\u5ea6\u4e3a w a.type = array(i, array(j, w)) a.type.length = i a.type.elem = array(j, w) 6.4.5 \u5c06\u516c\u5f0f 6.7 \u63a8\u5e7f\u5230\u591a\u7ef4\u6570\u636e\u4e0a\uff0c\u5e76\u6307\u51fa\u54ea\u4e9b\u503c\u53ef\u4ee5\u88ab\u5b58\u653e\u5230\u7b26\u53f7\u8868\u4e2d\u5e76\u7528\u6765\u8ba1\u7b97\u504f\u79fb\u91cf\u3002\u8003\u8651\u4e0b\u5217\u60c5\u51b5\uff1a \u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 A\uff0c\u6309\u884c\u5b58\u653e\u3002\u7b2c\u4e00\u7ef4\u7684\u4e0b\u6807\u4ece l_1 \u5230 h_1\uff0c\u7b2c\u4e8c\u7ef4\u7684\u4e0b\u6807\u4ece l_2 \u5230 h_2\u3002\u5355\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u5bbd\u5ea6\u4e3a w\u3002 \u5176\u4ed6\u6761\u4ef6\u548c 1 \u76f8\u540c\uff0c\u4f46\u662f\u91c7\u7528\u6309\u5217\u5b58\u653e\u65b9\u5f0f\u3002 \uff01\u4e00\u4e2a k \u7ef4\u6570\u7ec4 A\uff0c\u6309\u884c\u5b58\u653e\uff0c\u5143\u7d20\u5bbd\u5ea6\u4e3a w\uff0c\u7b2c j \u7ef4\u7684\u4e0b\u6807\u4ece l_j \u5230 h_j\u3002 \uff01\u5176\u4ed6\u6761\u4ef6\u548c 3 \u76f8\u540c\uff0c\u4f46\u662f\u91c7\u7528\u6309\u5217\u5b58\u653e\u65b9\u5f0f\u3002 \u89e3\u7b54 \u4ee4 n_i \u4e3a\u7b2c i \u7ef4\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u8ba1\u7b97\u516c\u5f0f\uff1an_i = h_i - l_i + 1 3. A[i_1]]\u2026[i_k] = base + ( (i_1 - l_1) * n_2 * \u2026 * n_k + \u2026 + (i_k-1 - l_k-1) * n_k + (i_k - l_k) ) * w 4. A[i_1]]\u2026[i_k] = base + ( (i_1 - l_1) + (i_2 - l_2) * n_1 + \u2026 + (i_k - l_k) * n_k-1 * n_k-2 * \u2026 * n_1 ) * w 6.4.6 \u4e00\u4e2a\u6309\u884c\u5b58\u653e\u7684\u6574\u6570\u6570\u7ec4 A[i, j] \u7684\u4e0b\u6807 i \u7684\u8303\u56f4\u4e3a 1~10\uff0c\u4e0b\u6807 j \u7684\u8303\u56f4\u4e3a 1~20\u3002\u6bcf\u4e2a\u6574\u6570\u5360 4 \u4e2a\u5b57\u8282\u3002\u5047\u8bbe\u6570\u7ec4 A \u4ece 0 \u5b57\u8282\u5f00\u59cb\u5b58\u653e\uff0c\u8bf7\u7ed9\u51fa\u4e0b\u5217\u5143\u7d20\u7684\u4f4d\u7f6e\uff1a A[4, 5] A[10, 8] A[3, 17] \u89e3\u7b54 \u8ba1\u7b97\u516c\u5f0f\uff1a((i-1) * 20 + (j-1)) * 4 (3 * 20 + 4) * 4 = 256 (9 * 20 + 7) * 4 = 748 (2 * 20 + 16) * 4 = 224 6.4.7 \u5047\u5b9a A \u662f\u6309\u5217\u5b58\u653e\u7684\uff0c\u91cd\u590d\u7ec3\u4e60 6.4.6 \u89e3\u7b54 \u8ba1\u7b97\u516c\u5f0f\uff1a((j-1) * 10 + (j-1)) * 4 (4 * 10 + 3) * 4 = 172 (7 * 10 + 9) * 4 = 316 (16 * 10 + 2) * 4 = 648 6.4.8 \u4e00\u4e2a\u6309\u884c\u5b58\u653e\u7684\u5b9e\u6570\u578b\u6570\u7ec4 A[i, j, k] \u7684\u4e0b\u6807 i \u7684\u8303\u56f4\u4e3a 1~4\uff0c\u4e0b\u6807 j \u7684\u8303\u56f4\u4e3a 0~4\uff0c\u4e14\u4e0b\u6807 k \u7684\u8303\u56f4\u4e3a 5~10\u3002\u6bcf\u4e2a\u5b9e\u6570\u5360 8 \u4e2a\u5b57\u8282\u3002\u5047\u8bbe\u6570\u7ec4 A \u4ece 0 \u5b57\u8282\u5f00\u59cb\u5b58\u653e\uff0c\u8ba1\u7b97\u4e0b\u5217\u5143\u7d20\u7684\u4f4d\u7f6e\uff1a A[3, 4, 5] A[1, 2, 7] A[4, 3, 9] \u89e3\u7b54 \u8ba1\u7b97\u516c\u5f0f\uff1a((i-1) * 5 * 6 + j * 6 + (k-5)) * 8 ((3-1) * 5 * 6 + 4 * 6 + (5-5)) * 8 = 672 ((1-1) * 5 * 6 + 2 * 6 + (7-5)) * 8 = 112 ((4-1) * 5 * 6 + 3 * 6 + (9-5)) * 8 = 896 6.4.9 \u5047\u5b9a A \u662f\u6309\u5217\u5b58\u653e\u7684\uff0c\u91cd\u590d\u7ec3\u4e60 6.4.8 \u89e3\u7b54 \u8ba1\u7b97\u516c\u5f0f\uff1a((i-1) + j * 4 + (k-5) * 5 * 4) * 8 ((3-1) + 4 * 4 + (5-5) * 5 * 4) * 8 = 144 ((1-1) + 2 * 4 + (7-5) * 5 * 4) * 8 = 384 ((4-1) + 3 * 4 + (9-5) * 5 * 4) * 8 = 760","title":"6.4 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.4/6.4/#64","text":"","title":"6.4 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.4/6.4/#641","text":"\u5411\u56fe 6-19 \u7684\u7ffb\u8bd1\u65b9\u6848\u4e2d\u52a0\u5165\u5bf9\u5e94\u4e8e\u4e0b\u5217\u4ea7\u751f\u5f0f\u7684\u89c4\u5219\uff1a E -> E1 * E2 E -> +E1","title":"6.4.1"},{"location":"ch06/6.4/6.4/#_1","text":"\u4ea7\u751f\u5f0f \u8bed\u4e49\u89c4\u5219 E -> E1 * E2 { E.addr = new Temp(); E.code = E1.code || E2.code || gen(E.addr '=' E1.addr '*' E2.addr); } | +E1 { E.addr = E1.addr; E.code = E1.code; }","title":"\u89e3\u7b54"},{"location":"ch06/6.4/6.4/#642","text":"\u4f7f\u7528\u56fe 6-20 \u7684\u589e\u91cf\u5f0f\u7ffb\u8bd1\u65b9\u6848\u91cd\u590d\u7ec3\u4e60 6.4.1","title":"6.4.2"},{"location":"ch06/6.4/6.4/#_2","text":"\u4ea7\u751f\u5f0f \u8bed\u4e49\u89c4\u5219 E -> E1 * E2 { E.addr = new Temp(); gen(E.addr '=' E1.addr '*' E2.addr; } | +E1 { E.addr = E1.addr; }","title":"\u89e3\u7b54"},{"location":"ch06/6.4/6.4/#643","text":"\u4f7f\u7528\u56fe 6-22 \u7684\u7ffb\u8bd1\u65b9\u6848\u6765\u7ffb\u8bd1\u4e0b\u5217\u8d4b\u503c\u8bed\u53e5\uff1a x = a[i] + b[j] x = a[i][j] + b[i][j] ! x = a[b[i][j]][c[k]]","title":"6.4.3"},{"location":"ch06/6.4/6.4/#_3","text":"x = a[i] + b[j] \u8bed\u6cd5\u5206\u6790\u6811: \u4e09\u5730\u5740\u4ee3\u7801 t_1 = i * awidth t_2 = a[t_1] t_3 = j * bwidth t_4 = b[t_3] t_5 = t_2 + t_4 x = t_5 x = a[i][j] + b[i][j] \u8bed\u6cd5\u5206\u6790\u6811\uff1a \u4e09\u5730\u5740\u4ee3\u7801\uff1a t_1 = i * ai_width t_2 = j * aj_width t_3 = t_1 + t_2 t_4 = a[t_3] t_5 = i * bi_width t_6 = j * bj_width t_7 = t_5 + t_6 t_8 = b[t_7] t_9 = t_4 + t_8 x = t_9 ! x = a[b[i][j]][c[k]]","title":"\u89e3\u7b54"},{"location":"ch06/6.4/6.4/#644","text":"\u4fee\u6539\u56fe 6-22 \u7684\u7ffb\u8bd1\u65b9\u6848\uff0c\u4f7f\u4e4b\u9002\u5408 Fortran \u98ce\u683c\u7684\u6570\u636e\u5f15\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4 n \u7ef4\u6570\u7ec4\u7684\u5f15\u7528\u4e3a id[E1, E2, \u2026, En]","title":"6.4.4 !"},{"location":"ch06/6.4/6.4/#_4","text":"\u4ec5\u9700\u4fee\u6539 L \u4ea7\u751f\u5f0f\uff08\u540c\u56fe 6-22 \u4e00\u6837\uff0c\u672a\u8003\u8651\u6d88\u9664\u5de6\u9012\u5f52\uff09 L -> id[A] { L.addr = A.addr; global.array = top.get(id.lexeme); } A -> E { A.array = global.array; A.type = A.array.type.elem; A.addr = new Temp(); gen(A.addr '=' E.addr '*' A.type.width; } A -> A1,E { A.array = A1.array; A.type = A1.type.elem; t = new Temp(); A.addr = new Temp(); gen(t '=' E.addr '*' A.type.length); gen(A.addr '=' A1.addr '+' t); }","title":"\u89e3\u7b54"},{"location":"ch06/6.4/6.4/#_5","text":"\u4ee4 a \u8868\u793a\u4e00\u4e2a i*j \u7684\u6570\u7ec4\uff0c\u5355\u4e2a\u5143\u7d20\u5bbd\u5ea6\u4e3a w a.type = array(i, array(j, w)) a.type.length = i a.type.elem = array(j, w)","title":"\u6ce8\u610f"},{"location":"ch06/6.4/6.4/#645","text":"\u5c06\u516c\u5f0f 6.7 \u63a8\u5e7f\u5230\u591a\u7ef4\u6570\u636e\u4e0a\uff0c\u5e76\u6307\u51fa\u54ea\u4e9b\u503c\u53ef\u4ee5\u88ab\u5b58\u653e\u5230\u7b26\u53f7\u8868\u4e2d\u5e76\u7528\u6765\u8ba1\u7b97\u504f\u79fb\u91cf\u3002\u8003\u8651\u4e0b\u5217\u60c5\u51b5\uff1a \u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 A\uff0c\u6309\u884c\u5b58\u653e\u3002\u7b2c\u4e00\u7ef4\u7684\u4e0b\u6807\u4ece l_1 \u5230 h_1\uff0c\u7b2c\u4e8c\u7ef4\u7684\u4e0b\u6807\u4ece l_2 \u5230 h_2\u3002\u5355\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u5bbd\u5ea6\u4e3a w\u3002 \u5176\u4ed6\u6761\u4ef6\u548c 1 \u76f8\u540c\uff0c\u4f46\u662f\u91c7\u7528\u6309\u5217\u5b58\u653e\u65b9\u5f0f\u3002 \uff01\u4e00\u4e2a k \u7ef4\u6570\u7ec4 A\uff0c\u6309\u884c\u5b58\u653e\uff0c\u5143\u7d20\u5bbd\u5ea6\u4e3a w\uff0c\u7b2c j \u7ef4\u7684\u4e0b\u6807\u4ece l_j \u5230 h_j\u3002 \uff01\u5176\u4ed6\u6761\u4ef6\u548c 3 \u76f8\u540c\uff0c\u4f46\u662f\u91c7\u7528\u6309\u5217\u5b58\u653e\u65b9\u5f0f\u3002","title":"6.4.5"},{"location":"ch06/6.4/6.4/#_6","text":"\u4ee4 n_i \u4e3a\u7b2c i \u7ef4\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u8ba1\u7b97\u516c\u5f0f\uff1an_i = h_i - l_i + 1 3. A[i_1]]\u2026[i_k] = base + ( (i_1 - l_1) * n_2 * \u2026 * n_k + \u2026 + (i_k-1 - l_k-1) * n_k + (i_k - l_k) ) * w 4. A[i_1]]\u2026[i_k] = base + ( (i_1 - l_1) + (i_2 - l_2) * n_1 + \u2026 + (i_k - l_k) * n_k-1 * n_k-2 * \u2026 * n_1 ) * w","title":"\u89e3\u7b54"},{"location":"ch06/6.4/6.4/#646","text":"\u4e00\u4e2a\u6309\u884c\u5b58\u653e\u7684\u6574\u6570\u6570\u7ec4 A[i, j] \u7684\u4e0b\u6807 i \u7684\u8303\u56f4\u4e3a 1~10\uff0c\u4e0b\u6807 j \u7684\u8303\u56f4\u4e3a 1~20\u3002\u6bcf\u4e2a\u6574\u6570\u5360 4 \u4e2a\u5b57\u8282\u3002\u5047\u8bbe\u6570\u7ec4 A \u4ece 0 \u5b57\u8282\u5f00\u59cb\u5b58\u653e\uff0c\u8bf7\u7ed9\u51fa\u4e0b\u5217\u5143\u7d20\u7684\u4f4d\u7f6e\uff1a A[4, 5] A[10, 8] A[3, 17]","title":"6.4.6"},{"location":"ch06/6.4/6.4/#_7","text":"\u8ba1\u7b97\u516c\u5f0f\uff1a((i-1) * 20 + (j-1)) * 4 (3 * 20 + 4) * 4 = 256 (9 * 20 + 7) * 4 = 748 (2 * 20 + 16) * 4 = 224","title":"\u89e3\u7b54"},{"location":"ch06/6.4/6.4/#647","text":"\u5047\u5b9a A \u662f\u6309\u5217\u5b58\u653e\u7684\uff0c\u91cd\u590d\u7ec3\u4e60 6.4.6","title":"6.4.7"},{"location":"ch06/6.4/6.4/#_8","text":"\u8ba1\u7b97\u516c\u5f0f\uff1a((j-1) * 10 + (j-1)) * 4 (4 * 10 + 3) * 4 = 172 (7 * 10 + 9) * 4 = 316 (16 * 10 + 2) * 4 = 648","title":"\u89e3\u7b54"},{"location":"ch06/6.4/6.4/#648","text":"\u4e00\u4e2a\u6309\u884c\u5b58\u653e\u7684\u5b9e\u6570\u578b\u6570\u7ec4 A[i, j, k] \u7684\u4e0b\u6807 i \u7684\u8303\u56f4\u4e3a 1~4\uff0c\u4e0b\u6807 j \u7684\u8303\u56f4\u4e3a 0~4\uff0c\u4e14\u4e0b\u6807 k \u7684\u8303\u56f4\u4e3a 5~10\u3002\u6bcf\u4e2a\u5b9e\u6570\u5360 8 \u4e2a\u5b57\u8282\u3002\u5047\u8bbe\u6570\u7ec4 A \u4ece 0 \u5b57\u8282\u5f00\u59cb\u5b58\u653e\uff0c\u8ba1\u7b97\u4e0b\u5217\u5143\u7d20\u7684\u4f4d\u7f6e\uff1a A[3, 4, 5] A[1, 2, 7] A[4, 3, 9]","title":"6.4.8"},{"location":"ch06/6.4/6.4/#_9","text":"\u8ba1\u7b97\u516c\u5f0f\uff1a((i-1) * 5 * 6 + j * 6 + (k-5)) * 8 ((3-1) * 5 * 6 + 4 * 6 + (5-5)) * 8 = 672 ((1-1) * 5 * 6 + 2 * 6 + (7-5)) * 8 = 112 ((4-1) * 5 * 6 + 3 * 6 + (9-5)) * 8 = 896","title":"\u89e3\u7b54"},{"location":"ch06/6.4/6.4/#649","text":"\u5047\u5b9a A \u662f\u6309\u5217\u5b58\u653e\u7684\uff0c\u91cd\u590d\u7ec3\u4e60 6.4.8","title":"6.4.9"},{"location":"ch06/6.4/6.4/#_10","text":"\u8ba1\u7b97\u516c\u5f0f\uff1a((i-1) + j * 4 + (k-5) * 5 * 4) * 8 ((3-1) + 4 * 4 + (5-5) * 5 * 4) * 8 = 144 ((1-1) + 2 * 4 + (7-5) * 5 * 4) * 8 = 384 ((4-1) + 3 * 4 + (9-5) * 5 * 4) * 8 = 760","title":"\u89e3\u7b54"},{"location":"ch06/6.5/6.5/","text":"6.5 \u8282\u7684\u7ec3\u4e60 6.5.1 \u5047\u5b9a\u56fe 6-26 \u4e2d\u7684\u51fd\u6570 widen \u53ef\u4ee5\u5904\u7406\u56fe 6-25a \u7684\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u6240\u6709\u7c7b\u578b\uff0c\u7ffb\u8bd1\u4e0b\u5217\u8868\u8fbe\u5f0f\u3002\u5047\u5b9a c \u548c d \u662f\u5b57\u7b26\u7c7b\u578b\uff0cs \u548c t \u662f\u77ed\u6574\u578b\uff0c i \u548c j \u4e3a\u6574\u578b\uff0c x \u662f\u6d6e\u70b9\u578b\u3002 x = s + c i = s + c x = (s + c) * (t + d) \u89e3\u7b54 x = s + c t1 = (int) s t2 = (int) c t3 = t1 + t2 x = (float) t3 i = s + c t1 = (int) s t2 = (int) c i = t1 + t2 x = (s + c) * (t + d) t1 = (int) s t2 = (int) c t3 = t1 + t2 t4 = (int) t t5 = (int) d t6 = t4 + t5 t7 = t3 + t6 x = (float) t7 6.5.2 \u50cf Ada \u4e2d\u90a3\u6837\uff0c\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u5fc5\u987b\u5177\u6709\u552f\u4e00\u7684\u7c7b\u578b\uff0c\u4f46\u662f\u6211\u4eec\u6839\u636e\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u672c\u8eab\u53ea\u80fd\u63a8\u5bfc\u51fa\u4e00\u4e2a\u53ef\u80fd\u7c7b\u578b\u7684\u96c6\u5408\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06\u51fd\u6570 E1 \u5e94\u7528\u4e8e\u53c2\u6570 E2\uff08\u6587\u6cd5\u4ea7\u751f\u5f0f\u4e3a E -> E1(E2)\uff09\u6709\u5982\u4e0b\u89c4\u5219\uff1a E.type = {t | \u5bf9 E2.type \u4e2d\u7684\u67d0\u4e2a s, s -> t \u5728 E1.type \u4e2d} \u63cf\u8ff0\u4e00\u4e2a\u53ef\u4ee5\u786e\u5b9a\u6bcf\u4e2a\u5b57\u8868\u8fbe\u5f0f\u7684\u552f\u4e00\u7c7b\u578b\u7684 SDD\u3002\u5b83\u9996\u5148\u4f7f\u7528\u5c5e\u6027 type\uff0c\u6309\u7167\u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u5f0f\u7efc\u5408\u5f97\u5230\u4e00\u4e2a\u53ef\u80fd\u7c7b\u578b\u7684\u96c6\u5408\u3002\u5728\u786e\u5b9a\u4e86\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u552f\u4e00\u7c7b\u578b\u4e4b\u540e\uff0c\u81ea\u9876\u5411\u4e0b\u5730\u786e\u5b9a\u5c5e\u6027 unique \u7684\u503c\uff0c\u6574\u4e2a\u5c5e\u6027\u8868\u793a\u5404\u5b50\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u3002","title":"6.5 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.5/6.5/#65","text":"","title":"6.5 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.5/6.5/#651","text":"\u5047\u5b9a\u56fe 6-26 \u4e2d\u7684\u51fd\u6570 widen \u53ef\u4ee5\u5904\u7406\u56fe 6-25a \u7684\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u6240\u6709\u7c7b\u578b\uff0c\u7ffb\u8bd1\u4e0b\u5217\u8868\u8fbe\u5f0f\u3002\u5047\u5b9a c \u548c d \u662f\u5b57\u7b26\u7c7b\u578b\uff0cs \u548c t \u662f\u77ed\u6574\u578b\uff0c i \u548c j \u4e3a\u6574\u578b\uff0c x \u662f\u6d6e\u70b9\u578b\u3002 x = s + c i = s + c x = (s + c) * (t + d)","title":"6.5.1"},{"location":"ch06/6.5/6.5/#_1","text":"x = s + c t1 = (int) s t2 = (int) c t3 = t1 + t2 x = (float) t3 i = s + c t1 = (int) s t2 = (int) c i = t1 + t2 x = (s + c) * (t + d) t1 = (int) s t2 = (int) c t3 = t1 + t2 t4 = (int) t t5 = (int) d t6 = t4 + t5 t7 = t3 + t6 x = (float) t7","title":"\u89e3\u7b54"},{"location":"ch06/6.5/6.5/#652","text":"\u50cf Ada \u4e2d\u90a3\u6837\uff0c\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u5fc5\u987b\u5177\u6709\u552f\u4e00\u7684\u7c7b\u578b\uff0c\u4f46\u662f\u6211\u4eec\u6839\u636e\u4e00\u4e2a\u5b50\u8868\u8fbe\u5f0f\u672c\u8eab\u53ea\u80fd\u63a8\u5bfc\u51fa\u4e00\u4e2a\u53ef\u80fd\u7c7b\u578b\u7684\u96c6\u5408\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06\u51fd\u6570 E1 \u5e94\u7528\u4e8e\u53c2\u6570 E2\uff08\u6587\u6cd5\u4ea7\u751f\u5f0f\u4e3a E -> E1(E2)\uff09\u6709\u5982\u4e0b\u89c4\u5219\uff1a E.type = {t | \u5bf9 E2.type \u4e2d\u7684\u67d0\u4e2a s, s -> t \u5728 E1.type \u4e2d} \u63cf\u8ff0\u4e00\u4e2a\u53ef\u4ee5\u786e\u5b9a\u6bcf\u4e2a\u5b57\u8868\u8fbe\u5f0f\u7684\u552f\u4e00\u7c7b\u578b\u7684 SDD\u3002\u5b83\u9996\u5148\u4f7f\u7528\u5c5e\u6027 type\uff0c\u6309\u7167\u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u5f0f\u7efc\u5408\u5f97\u5230\u4e00\u4e2a\u53ef\u80fd\u7c7b\u578b\u7684\u96c6\u5408\u3002\u5728\u786e\u5b9a\u4e86\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u552f\u4e00\u7c7b\u578b\u4e4b\u540e\uff0c\u81ea\u9876\u5411\u4e0b\u5730\u786e\u5b9a\u5c5e\u6027 unique \u7684\u503c\uff0c\u6574\u4e2a\u5c5e\u6027\u8868\u793a\u5404\u5b50\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u3002","title":"6.5.2"},{"location":"ch06/6.6/6.6/","text":"6.6 \u8282\u7684\u7ec3\u4e60 6.6.1 \u5728\u56fe 6-36 \u7684\u8bed\u6cd5\u5236\u5bfc\u5b9a\u4e49\u4e2d\u6dfb\u52a0\u5904\u7406\u4e0b\u5217\u63a7\u5236\u6d41\u6784\u9020\u7684\u89c4\u5219\uff1a \u4e00\u4e2a repeat \u8bed\u53e5\uff1arepeat S while B \uff01\u4e00\u4e2a for \u5faa\u73af\u8bed\u53e5\uff1afor (S1; B; S2) S3 \u89e3\u7b54 Production Syntax Rule S -> repeat S1 while B S1.next = newlabel() B.true = newlabel() B.false = S.next S.code = label(B.true) || S1.code || label(S1.next) || B.code S -> for (S1; B; S2) S3 S1.next = newlabel() B.true = newlabel() B.false = S.next S2.next = S1.next S3.next = newlabel() S.code = S1.code || lable(S1.next) || B.code || lable(B.true) || S3.code || label(S3.next) || S2.code || gen('goto', S1.next) 6.6.2 \u73b0\u4ee3\u8ba1\u7b97\u673a\u8bd5\u56fe\u5728\u540c\u4e00\u4e2a\u65f6\u523b\u6267\u884c\u591a\u6761\u6307\u4ee4\uff0c\u5176\u4e2d\u5305\u62ec\u5404\u79cd\u5206\u652f\u6307\u4ee4\u3002\u56e0\u6b64\uff0c\u5f53\u8ba1\u7b97\u673a\u6295\u673a\u6027\u5730\u9884\u5148\u6267\u884c\u67d0\u4e2a\u5206\u652f\uff0c\u4f46\u5b9e\u9645\u63a7\u5236\u6d41\u5374\u8fdb\u5165\u53e6\u4e00\u4e2a\u5206\u652f\u65f6\uff0c\u4ed8\u51fa\u7684\u4ee3\u4ef7\u662f\u5f88\u5927\u7684\u3002\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u5c3d\u53ef\u80fd\u5730\u51cf\u5c11\u5206\u652f\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u56fe 6-35c \u4e2d while \u5faa\u73af\u8bed\u53e5\u7684\u5b9e\u73b0\u4e2d\uff0c\u6bcf\u4e2a\u8fed\u4ee3\u6709\u4e24\u4e2a\u5206\u652f\uff1a\u4e00\u4e2a\u662f\u4ece\u6761\u4ef6 B \u8fdb\u5165\u5230\u5faa\u73af\u4f53\u4e2d\uff0c\u53e6\u4e00\u4e2a\u5206\u652f\u8df3\u8f6c\u56de B \u7684\u4ee3\u7801\u3002\u57fa\u4e8e\u5c3d\u91cf\u51cf\u5c11\u5206\u652f\u7684\u8003\u8651\uff0c\u6211\u4eec\u901a\u5e38\u66f4\u503e\u5411\u4e8e\u5c06 while(B) S \u5f53\u4f5c if(B) {repeat S until !(B)} \u6765\u5b9e\u73b0\u3002\u7ed9\u51fa\u8fd9\u79cd\u7ffb\u8bd1\u65b9\u6cd5\u7684\u4ee3\u7801\u5e03\u5c40\uff0c\u5e76\u4fee\u6539\u56fe 6-36 \u4e2d while \u5faa\u73af\u8bed\u53e5\u7684\u89c4\u5219\u3002 \u89e3\u7b54 Production Syntax Rule S -> if(B) { B.true = newlabel() repeat S1 B.false = S.next until !(B) S1.next = newlabel() } S.code = B.code || label(B.true) || S1.code || label(S1.next) || B.code 6.6.3\uff01 \u5047\u8bbe C \u4e2d\u5b58\u5728\u4e00\u4e2a\u5f02\u6216\u8fd0\u7b97\u3002\u6309\u7167\u56fe 6-37 \u7684\u98ce\u683c\u5199\u51fa\u8fd9\u4e2a\u8fd0\u7b97\u7b26\u7684\u4ee3\u7801\u751f\u6210\u89c4\u5219\u3002 \u89e3\u7b54 B1 ^ B2 \u7b49\u4ef7\u4e8e !B1 && B2 || B1 && !B2 (\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 ! > && > ||) Production Syntax Rule B -> B1 ^ B2 B1.true = newlabel() B1.false = newlabel() B2.true = B.true B2.false = B1.true b3 = newboolean() b3.code = B1.code b3.true = newlabel() b3.false = B.false b4 = newboolean() b4.code = B2.code b4.true = B.false b4.false = B.true S.code = B1.code || label(B1.false) || B2.code || label(B1.true) || b3.code || label(b3.true) || b4.code 6.6.4 \u4f7f\u7528 6.6.5 \u8282\u4e2d\u4ecb\u7ecd\u7684\u907f\u514d goto \u8bed\u53e5\u7684\u7ffb\u8bd1\u65b9\u6848\uff0c\u7ffb\u8bd1\u4e0b\u5217\u8868\u8fbe\u5f0f\uff1a if (a==b && c==d || e==f) x == 1 if (a==b || c==d || e==f) x == 1 if (a==b || c==d && e==f) x == 1 \u89e3\u7b54 if (a==b && c==d || e==f) x == 1 ifFalse a==b goto L3 if c==d goto L2 L3: ifFalse e==f goto L1 L2: x == 1 L1: if (a==b || c==d || e==f) x == 1 if a==b goto L2 if c==d goto L2 ifFalse e==f goto L1 L2: x==1 L1: if (a==b || c==d && e==f) x == 1 if a==b goto L2 ifFalse c==d goto L1 ifFalse e==f goto L1 L2: x==1 L1: 6.6.5 \u57fa\u4e8e\u56fe 6-36 \u548c\u56fe 6-37 \u4e2d\u7ed9\u51fa\u7684\u8bed\u6cd5\u5236\u5bfc\u5b9a\u4e49\uff0c\u7ed9\u51fa\u4e00\u4e2a\u7ffb\u8bd1\u65b9\u6848\u3002 6.6.6 \u4f7f\u7528\u7c7b\u4f3c\u4e8e\u56fe 6-39 \u548c\u56fe 6-40 \u4e2d\u7684\u89c4\u5219\uff0c\u4fee\u6539\u56fe 6-36 \u548c\u56fe 6-37 \u7684\u8bed\u4e49\u89c4\u5219\uff0c\u4f7f\u4e4b\u5141\u8bb8\u63a7\u5236\u6d41\u7a7f\u8d8a\u3002 \u89e3\u7b54 \u4ec5\u8865\u5145\u5b8c\u6bd5\u4e66\u4e2d\u672a\u89e3\u7b54\u90e8\u5206 Production Syntax Rule S -> if(B) S1 else S2 B.true = fall B.false = newlabel() S1.next = S.next S2.next = S.next S.code = B.code || S1.code || gen('goto' S1.next) || label(B.false) || S2.code S -> while(B) S1 begin = newlabel() B.true = fall B.false = S.next S1.next = begin S.code = label(begin) || B.code || S1.code || gen('goto' begin) S -> S1 S2 S1.next = fall S2.next = S.next S.code = S1.code || S2.code B -> B1 && B2 B1.true = fall B1.false = if B.false == fall then newlabel() else B.false B2.true = B.true B2.false = B.false B.code = if B.false == fall then B1.code || B2.code || label(B1.false) else B1.code || B2.code 6.6.7\uff01 \u7ec3\u4e60 6.6.6 \u4e2d\u7684\u8bed\u4e49\u89c4\u5219\u4ea7\u751f\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u6807\u53f7\u3002\u4fee\u6539\u56fe 6-36 \u4e2d\u8bed\u53e5\u7684\u89c4\u5219\uff0c\u4f7f\u4e4b\u53ea\u521b\u5efa\u5fc5\u8981\u7684\u6807\u53f7\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u7b26\u53f7 deferred \u6765\u8868\u793a\u8fd8\u6ca1\u6709\u521b\u5efa\u7684\u4e00\u4e2a\u6807\u53f7\u3002\u4f60\u7684\u8bed\u4e49\u89c4\u5219\u5fc5\u987b\u80fd\u751f\u6210\u7c7b\u4f3c\u4e8e\u4f8b 6.21 \u7684\u4ee3\u7801\u3002 6.6.8\uff01\uff01 6.6.5 \u8282\u4e2d\u8ba8\u8bba\u4e86\u5982\u4f55\u4f7f\u7528\u7a7f\u8d8a\u4ee3\u7801\u6765\u5c3d\u53ef\u80fd\u51cf\u5c11\u751f\u6210\u7684\u4e2d\u95f4\u4ee3\u7801\u4e2d\u8df3\u8f6c\u6307\u4ee4\u7684\u6570\u636e\u3002\u7136\u800c\uff0c\u5b83\u5e76\u6ca1\u6709\u5145\u5206\u8003\u8651\u5c06\u4e00\u4e2a\u6761\u4ef6\u66ff\u6362\u4e3a\u5b83\u7684\u8865\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\u5c06 if a < b goto L1; goto L2 \u66ff\u6362\u6210 ifFalse a >= b goto L2; goto L1 \u3002\u7ed9\u51fa\u8bed\u6cd5\u5236\u5bfc\u5b9a\u4e49\uff0c\u5b83\u5728\u9700\u8981\u65f6\u53ef\u4ee5\u5229\u7528\u8fd9\u79cd\u66ff\u6362\u65b9\u6cd5\u3002","title":"6.6 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.6/6.6/#66","text":"","title":"6.6 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.6/6.6/#661","text":"\u5728\u56fe 6-36 \u7684\u8bed\u6cd5\u5236\u5bfc\u5b9a\u4e49\u4e2d\u6dfb\u52a0\u5904\u7406\u4e0b\u5217\u63a7\u5236\u6d41\u6784\u9020\u7684\u89c4\u5219\uff1a \u4e00\u4e2a repeat \u8bed\u53e5\uff1arepeat S while B \uff01\u4e00\u4e2a for \u5faa\u73af\u8bed\u53e5\uff1afor (S1; B; S2) S3","title":"6.6.1"},{"location":"ch06/6.6/6.6/#_1","text":"Production Syntax Rule S -> repeat S1 while B S1.next = newlabel() B.true = newlabel() B.false = S.next S.code = label(B.true) || S1.code || label(S1.next) || B.code S -> for (S1; B; S2) S3 S1.next = newlabel() B.true = newlabel() B.false = S.next S2.next = S1.next S3.next = newlabel() S.code = S1.code || lable(S1.next) || B.code || lable(B.true) || S3.code || label(S3.next) || S2.code || gen('goto', S1.next)","title":"\u89e3\u7b54"},{"location":"ch06/6.6/6.6/#662","text":"\u73b0\u4ee3\u8ba1\u7b97\u673a\u8bd5\u56fe\u5728\u540c\u4e00\u4e2a\u65f6\u523b\u6267\u884c\u591a\u6761\u6307\u4ee4\uff0c\u5176\u4e2d\u5305\u62ec\u5404\u79cd\u5206\u652f\u6307\u4ee4\u3002\u56e0\u6b64\uff0c\u5f53\u8ba1\u7b97\u673a\u6295\u673a\u6027\u5730\u9884\u5148\u6267\u884c\u67d0\u4e2a\u5206\u652f\uff0c\u4f46\u5b9e\u9645\u63a7\u5236\u6d41\u5374\u8fdb\u5165\u53e6\u4e00\u4e2a\u5206\u652f\u65f6\uff0c\u4ed8\u51fa\u7684\u4ee3\u4ef7\u662f\u5f88\u5927\u7684\u3002\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u5c3d\u53ef\u80fd\u5730\u51cf\u5c11\u5206\u652f\u6570\u91cf\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u56fe 6-35c \u4e2d while \u5faa\u73af\u8bed\u53e5\u7684\u5b9e\u73b0\u4e2d\uff0c\u6bcf\u4e2a\u8fed\u4ee3\u6709\u4e24\u4e2a\u5206\u652f\uff1a\u4e00\u4e2a\u662f\u4ece\u6761\u4ef6 B \u8fdb\u5165\u5230\u5faa\u73af\u4f53\u4e2d\uff0c\u53e6\u4e00\u4e2a\u5206\u652f\u8df3\u8f6c\u56de B \u7684\u4ee3\u7801\u3002\u57fa\u4e8e\u5c3d\u91cf\u51cf\u5c11\u5206\u652f\u7684\u8003\u8651\uff0c\u6211\u4eec\u901a\u5e38\u66f4\u503e\u5411\u4e8e\u5c06 while(B) S \u5f53\u4f5c if(B) {repeat S until !(B)} \u6765\u5b9e\u73b0\u3002\u7ed9\u51fa\u8fd9\u79cd\u7ffb\u8bd1\u65b9\u6cd5\u7684\u4ee3\u7801\u5e03\u5c40\uff0c\u5e76\u4fee\u6539\u56fe 6-36 \u4e2d while \u5faa\u73af\u8bed\u53e5\u7684\u89c4\u5219\u3002","title":"6.6.2"},{"location":"ch06/6.6/6.6/#_2","text":"Production Syntax Rule S -> if(B) { B.true = newlabel() repeat S1 B.false = S.next until !(B) S1.next = newlabel() } S.code = B.code || label(B.true) || S1.code || label(S1.next) || B.code","title":"\u89e3\u7b54"},{"location":"ch06/6.6/6.6/#663","text":"\u5047\u8bbe C \u4e2d\u5b58\u5728\u4e00\u4e2a\u5f02\u6216\u8fd0\u7b97\u3002\u6309\u7167\u56fe 6-37 \u7684\u98ce\u683c\u5199\u51fa\u8fd9\u4e2a\u8fd0\u7b97\u7b26\u7684\u4ee3\u7801\u751f\u6210\u89c4\u5219\u3002","title":"6.6.3\uff01"},{"location":"ch06/6.6/6.6/#_3","text":"B1 ^ B2 \u7b49\u4ef7\u4e8e !B1 && B2 || B1 && !B2 (\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 ! > && > ||) Production Syntax Rule B -> B1 ^ B2 B1.true = newlabel() B1.false = newlabel() B2.true = B.true B2.false = B1.true b3 = newboolean() b3.code = B1.code b3.true = newlabel() b3.false = B.false b4 = newboolean() b4.code = B2.code b4.true = B.false b4.false = B.true S.code = B1.code || label(B1.false) || B2.code || label(B1.true) || b3.code || label(b3.true) || b4.code","title":"\u89e3\u7b54"},{"location":"ch06/6.6/6.6/#664","text":"\u4f7f\u7528 6.6.5 \u8282\u4e2d\u4ecb\u7ecd\u7684\u907f\u514d goto \u8bed\u53e5\u7684\u7ffb\u8bd1\u65b9\u6848\uff0c\u7ffb\u8bd1\u4e0b\u5217\u8868\u8fbe\u5f0f\uff1a if (a==b && c==d || e==f) x == 1 if (a==b || c==d || e==f) x == 1 if (a==b || c==d && e==f) x == 1","title":"6.6.4"},{"location":"ch06/6.6/6.6/#_4","text":"if (a==b && c==d || e==f) x == 1 ifFalse a==b goto L3 if c==d goto L2 L3: ifFalse e==f goto L1 L2: x == 1 L1: if (a==b || c==d || e==f) x == 1 if a==b goto L2 if c==d goto L2 ifFalse e==f goto L1 L2: x==1 L1: if (a==b || c==d && e==f) x == 1 if a==b goto L2 ifFalse c==d goto L1 ifFalse e==f goto L1 L2: x==1 L1:","title":"\u89e3\u7b54"},{"location":"ch06/6.6/6.6/#665","text":"\u57fa\u4e8e\u56fe 6-36 \u548c\u56fe 6-37 \u4e2d\u7ed9\u51fa\u7684\u8bed\u6cd5\u5236\u5bfc\u5b9a\u4e49\uff0c\u7ed9\u51fa\u4e00\u4e2a\u7ffb\u8bd1\u65b9\u6848\u3002","title":"6.6.5"},{"location":"ch06/6.6/6.6/#666","text":"\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u56fe 6-39 \u548c\u56fe 6-40 \u4e2d\u7684\u89c4\u5219\uff0c\u4fee\u6539\u56fe 6-36 \u548c\u56fe 6-37 \u7684\u8bed\u4e49\u89c4\u5219\uff0c\u4f7f\u4e4b\u5141\u8bb8\u63a7\u5236\u6d41\u7a7f\u8d8a\u3002","title":"6.6.6"},{"location":"ch06/6.6/6.6/#_5","text":"\u4ec5\u8865\u5145\u5b8c\u6bd5\u4e66\u4e2d\u672a\u89e3\u7b54\u90e8\u5206 Production Syntax Rule S -> if(B) S1 else S2 B.true = fall B.false = newlabel() S1.next = S.next S2.next = S.next S.code = B.code || S1.code || gen('goto' S1.next) || label(B.false) || S2.code S -> while(B) S1 begin = newlabel() B.true = fall B.false = S.next S1.next = begin S.code = label(begin) || B.code || S1.code || gen('goto' begin) S -> S1 S2 S1.next = fall S2.next = S.next S.code = S1.code || S2.code B -> B1 && B2 B1.true = fall B1.false = if B.false == fall then newlabel() else B.false B2.true = B.true B2.false = B.false B.code = if B.false == fall then B1.code || B2.code || label(B1.false) else B1.code || B2.code","title":"\u89e3\u7b54"},{"location":"ch06/6.6/6.6/#667","text":"\u7ec3\u4e60 6.6.6 \u4e2d\u7684\u8bed\u4e49\u89c4\u5219\u4ea7\u751f\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u6807\u53f7\u3002\u4fee\u6539\u56fe 6-36 \u4e2d\u8bed\u53e5\u7684\u89c4\u5219\uff0c\u4f7f\u4e4b\u53ea\u521b\u5efa\u5fc5\u8981\u7684\u6807\u53f7\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u7b26\u53f7 deferred \u6765\u8868\u793a\u8fd8\u6ca1\u6709\u521b\u5efa\u7684\u4e00\u4e2a\u6807\u53f7\u3002\u4f60\u7684\u8bed\u4e49\u89c4\u5219\u5fc5\u987b\u80fd\u751f\u6210\u7c7b\u4f3c\u4e8e\u4f8b 6.21 \u7684\u4ee3\u7801\u3002","title":"6.6.7\uff01"},{"location":"ch06/6.6/6.6/#668","text":"6.6.5 \u8282\u4e2d\u8ba8\u8bba\u4e86\u5982\u4f55\u4f7f\u7528\u7a7f\u8d8a\u4ee3\u7801\u6765\u5c3d\u53ef\u80fd\u51cf\u5c11\u751f\u6210\u7684\u4e2d\u95f4\u4ee3\u7801\u4e2d\u8df3\u8f6c\u6307\u4ee4\u7684\u6570\u636e\u3002\u7136\u800c\uff0c\u5b83\u5e76\u6ca1\u6709\u5145\u5206\u8003\u8651\u5c06\u4e00\u4e2a\u6761\u4ef6\u66ff\u6362\u4e3a\u5b83\u7684\u8865\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\u5c06 if a < b goto L1; goto L2 \u66ff\u6362\u6210 ifFalse a >= b goto L2; goto L1 \u3002\u7ed9\u51fa\u8bed\u6cd5\u5236\u5bfc\u5b9a\u4e49\uff0c\u5b83\u5728\u9700\u8981\u65f6\u53ef\u4ee5\u5229\u7528\u8fd9\u79cd\u66ff\u6362\u65b9\u6cd5\u3002","title":"6.6.8\uff01\uff01"},{"location":"ch06/6.7/6.7/","text":"6.7 \u8282\u7684\u7ec3\u4e60 6.7.1 \u4f7f\u7528\u56fe 6-43 \u4e2d\u7684\u7ffb\u8bd1\u65b9\u6848\u7ffb\u8bd1\u4e0b\u5217\u8868\u8fbe\u5f0f\u3002\u7ed9\u51fa\u6bcf\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684 truelist \u548c falselist\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u7b2c\u4e00\u6761\u88ab\u751f\u6210\u7684\u6307\u4ee4\u7684\u5730\u5740\u662f 100. a==b && (c==d || e==f) (a==b || c==d) || e==f (a==b && c==d) && e==f \u89e3\u7b54 a==b && (c==d || e==f) 6.7.2 \u89e3\u7b54 E3.false = i1 S2.next = i7 E4.false = i7 S1.next = i3 E2.true = i3 6.7.3 \u5f53\u4f7f\u7528\u56fe 6-46 \u4e2d\u7684\u7ffb\u8bd1\u65b9\u6848\u5bf9\u56fe 6-47 \u8fdb\u884c\u7ffb\u8bd1\u65f6\uff0c\u6211\u4eec\u4e3a\u6bcf\u6761\u8bed\u53e5\u521b\u5efa S.next \u5217\u8868\u3002\u4e00\u5f00\u59cb\u662f\u8d4b\u503c\u8bed\u53e5 S1, S2, S3\uff0c\u7136\u540e\u9010\u6b65\u5904\u7406\u8d8a\u6765\u8d8a\u5927\u7684 if \u8bed\u53e5\uff0cif-else \u8bed\u53e5\uff0cwhile \u8bed\u53e5\u548c\u8bed\u53e5\u5757\u3002\u5728\u56fe 6-47 \u4e2d\u6709 5 \u4e2a\u8fd9\u79cd\u7c7b\u578b\u7684\u7ed3\u6784\u8bed\u53e5\uff1a S4: while (E3) S1 S5: if(E4) S2 S6: \u5305\u542b S5 \u548c S3 \u7684\u8bed\u53e5\u5757 S7: if(E2) S4 else S6 S8: \u6574\u4e2a\u7a0b\u5e8f \u5bf9\u4e8e\u8fd9\u4e9b\u7ed3\u6784\u8bed\u53e5\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u89c4\u5219\u7528\u5176\u4ed6\u7684 Sj.next \u5217\u8868\u4ee5\u53ca\u7a0b\u5e8f\u4e2d\u7684\u8868\u8fbe\u5f0f\u7684\u5217\u8868 Ek.true \u548c Ek.false \u6784\u9020\u51fa Si.next\u3002\u7ed9\u51fa\u8ba1\u7b97\u4e0b\u5217 next \u5217\u8868\u7684\u89c4\u5219\uff1a S4.next S5.next S6.next S7.next S8.next \u89e3\u7b54 (\u8be5\u9898\u89e3\u7b54\u4e0d\u662f\u5f88\u80af\u5b9a) S4.next = S3.next S5.next = S2.next S6.next = S3.next S7.next = S3.next S8.next = E1.false","title":"6.7 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.7/6.7/#67","text":"","title":"6.7 \u8282\u7684\u7ec3\u4e60"},{"location":"ch06/6.7/6.7/#671","text":"\u4f7f\u7528\u56fe 6-43 \u4e2d\u7684\u7ffb\u8bd1\u65b9\u6848\u7ffb\u8bd1\u4e0b\u5217\u8868\u8fbe\u5f0f\u3002\u7ed9\u51fa\u6bcf\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684 truelist \u548c falselist\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u7b2c\u4e00\u6761\u88ab\u751f\u6210\u7684\u6307\u4ee4\u7684\u5730\u5740\u662f 100. a==b && (c==d || e==f) (a==b || c==d) || e==f (a==b && c==d) && e==f","title":"6.7.1"},{"location":"ch06/6.7/6.7/#_1","text":"a==b && (c==d || e==f)","title":"\u89e3\u7b54"},{"location":"ch06/6.7/6.7/#672","text":"","title":"6.7.2"},{"location":"ch06/6.7/6.7/#_2","text":"E3.false = i1 S2.next = i7 E4.false = i7 S1.next = i3 E2.true = i3","title":"\u89e3\u7b54"},{"location":"ch06/6.7/6.7/#673","text":"\u5f53\u4f7f\u7528\u56fe 6-46 \u4e2d\u7684\u7ffb\u8bd1\u65b9\u6848\u5bf9\u56fe 6-47 \u8fdb\u884c\u7ffb\u8bd1\u65f6\uff0c\u6211\u4eec\u4e3a\u6bcf\u6761\u8bed\u53e5\u521b\u5efa S.next \u5217\u8868\u3002\u4e00\u5f00\u59cb\u662f\u8d4b\u503c\u8bed\u53e5 S1, S2, S3\uff0c\u7136\u540e\u9010\u6b65\u5904\u7406\u8d8a\u6765\u8d8a\u5927\u7684 if \u8bed\u53e5\uff0cif-else \u8bed\u53e5\uff0cwhile \u8bed\u53e5\u548c\u8bed\u53e5\u5757\u3002\u5728\u56fe 6-47 \u4e2d\u6709 5 \u4e2a\u8fd9\u79cd\u7c7b\u578b\u7684\u7ed3\u6784\u8bed\u53e5\uff1a S4: while (E3) S1 S5: if(E4) S2 S6: \u5305\u542b S5 \u548c S3 \u7684\u8bed\u53e5\u5757 S7: if(E2) S4 else S6 S8: \u6574\u4e2a\u7a0b\u5e8f \u5bf9\u4e8e\u8fd9\u4e9b\u7ed3\u6784\u8bed\u53e5\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u89c4\u5219\u7528\u5176\u4ed6\u7684 Sj.next \u5217\u8868\u4ee5\u53ca\u7a0b\u5e8f\u4e2d\u7684\u8868\u8fbe\u5f0f\u7684\u5217\u8868 Ek.true \u548c Ek.false \u6784\u9020\u51fa Si.next\u3002\u7ed9\u51fa\u8ba1\u7b97\u4e0b\u5217 next \u5217\u8868\u7684\u89c4\u5219\uff1a S4.next S5.next S6.next S7.next S8.next","title":"6.7.3"},{"location":"ch06/6.7/6.7/#_3","text":"(\u8be5\u9898\u89e3\u7b54\u4e0d\u662f\u5f88\u80af\u5b9a) S4.next = S3.next S5.next = S2.next S6.next = S3.next S7.next = S3.next S8.next = E1.false","title":"\u89e3\u7b54"},{"location":"ch07/7.2/7.2/","text":"Exercises for Section 7.2 7.2.1 Suppose that the program of Fig.7.2 uses a partition function that always picks a[m] as the separator v. Also, when the array a[m], \u2026 , a[n] is reordered, assume that the order is preserved as much as possible. That is, first come all the elements less than v, in their original order, then all elements equal to v, and finally all elements greater than v, in their original order. Draw the activation tree when the numbers 9,8,7,6,5,4,3,2,1 are sorted. What is the largest number of activation records that ever appear together on the stack? Answer Draw the activation tree when the numbers 9,8,7,6,5,4,3,2,1 are sorted. What is the largest number of activation records that ever appear together on the stack? 9 7.2.2 Repeat Exercise 7.2.1 when the initial order of the numbers is 1,3,5,7,9,2,4,6,8. 7.2.3 In Fig. 7.9 is C code to compute Fibonacci numbers recur\u00adsively. Suppose that the activation record for f includes the following elements in order: (return value, argument n, local s, local t); there will normally be other elements in the activation record as well. The questions below assume that the initial call is f(5). int f(int n) { int t, s; if (n < 2) return 1; s = f(n-1); t = f(n-2); return s+t; } Figure 7.9: Fibonacci program for Exercise 7.2.3 Show the complete activation tree. What dose the stack and its activation records look like the first time f(1) is about to return? ! What does the stack and its activation records look like the fifth time f(1) is about to return? Answer Show the complete activation tree. What dose the stack and its activation records look like the first time f(1) is about to return? ! What does the stack and its activation records look like the fifth time f(1) is about to return? 7.2.4 Here is a sketch of two C functions f and g: int f(int x){int i;...return i+1;...} int g(int y) {int j;...f(j+1). ..} That is, function g calls f. Draw the top of the stack, starting with the acti\u00advation record for g, after g calls f, and f is about to return. You can consider only return values, parameters, control links, and space for local variables; you do not have to consider stored state or temporary or local values not shown in the code sketch. However, you should indicate: Which function creates the space on the stack for each element? Which function writes the value of each element? To which activation record does the element belong? Answer 7.2.5 In a language that passes parameters by reference, there is a function f(x, y) that does the following: x = x + 1; y = y + 2; return x+y; If a is assigned the value 3, and then f(a, a) is called, what is returned? Answer x = x + 1 -> a = a + 1 -> now a is 4 y = y + 2 -> a = a + 2 -> now a is 6 x + y -> a + a -> 6 + 6 -> 12 f(a, a) is 12 7.2.6 The C function f is defined by: int f(int x, *py, **ppz) { **ppz += 1; *py += 2; x += 3; return x+y+z; } Variable a is a pointer to b; variable b is a pointer to c, and c is an integer currently with value 4. If we call f(c, b, a) , what is returned? Answer f(c, b, a) is 21 view source code mind that c is passed by value, so the process is: sentence x in f() x out of f() *py **ppz **ppz += 1; 4 5 5 5 *py += 2; 4 7 7 7 x += 3; 7 7 7 7","title":"Exercises for Section 7.2"},{"location":"ch07/7.2/7.2/#exercises-for-section-72","text":"","title":"Exercises for Section 7.2"},{"location":"ch07/7.2/7.2/#721","text":"Suppose that the program of Fig.7.2 uses a partition function that always picks a[m] as the separator v. Also, when the array a[m], \u2026 , a[n] is reordered, assume that the order is preserved as much as possible. That is, first come all the elements less than v, in their original order, then all elements equal to v, and finally all elements greater than v, in their original order. Draw the activation tree when the numbers 9,8,7,6,5,4,3,2,1 are sorted. What is the largest number of activation records that ever appear together on the stack?","title":"7.2.1"},{"location":"ch07/7.2/7.2/#answer","text":"Draw the activation tree when the numbers 9,8,7,6,5,4,3,2,1 are sorted. What is the largest number of activation records that ever appear together on the stack? 9","title":"Answer"},{"location":"ch07/7.2/7.2/#722","text":"Repeat Exercise 7.2.1 when the initial order of the numbers is 1,3,5,7,9,2,4,6,8.","title":"7.2.2"},{"location":"ch07/7.2/7.2/#723","text":"In Fig. 7.9 is C code to compute Fibonacci numbers recur\u00adsively. Suppose that the activation record for f includes the following elements in order: (return value, argument n, local s, local t); there will normally be other elements in the activation record as well. The questions below assume that the initial call is f(5). int f(int n) { int t, s; if (n < 2) return 1; s = f(n-1); t = f(n-2); return s+t; } Figure 7.9: Fibonacci program for Exercise 7.2.3 Show the complete activation tree. What dose the stack and its activation records look like the first time f(1) is about to return? ! What does the stack and its activation records look like the fifth time f(1) is about to return?","title":"7.2.3"},{"location":"ch07/7.2/7.2/#answer_1","text":"Show the complete activation tree. What dose the stack and its activation records look like the first time f(1) is about to return? ! What does the stack and its activation records look like the fifth time f(1) is about to return?","title":"Answer"},{"location":"ch07/7.2/7.2/#724","text":"Here is a sketch of two C functions f and g: int f(int x){int i;...return i+1;...} int g(int y) {int j;...f(j+1). ..} That is, function g calls f. Draw the top of the stack, starting with the acti\u00advation record for g, after g calls f, and f is about to return. You can consider only return values, parameters, control links, and space for local variables; you do not have to consider stored state or temporary or local values not shown in the code sketch. However, you should indicate: Which function creates the space on the stack for each element? Which function writes the value of each element? To which activation record does the element belong?","title":"7.2.4"},{"location":"ch07/7.2/7.2/#answer_2","text":"","title":"Answer"},{"location":"ch07/7.2/7.2/#725","text":"In a language that passes parameters by reference, there is a function f(x, y) that does the following: x = x + 1; y = y + 2; return x+y; If a is assigned the value 3, and then f(a, a) is called, what is returned?","title":"7.2.5"},{"location":"ch07/7.2/7.2/#answer_3","text":"x = x + 1 -> a = a + 1 -> now a is 4 y = y + 2 -> a = a + 2 -> now a is 6 x + y -> a + a -> 6 + 6 -> 12 f(a, a) is 12","title":"Answer"},{"location":"ch07/7.2/7.2/#726","text":"The C function f is defined by: int f(int x, *py, **ppz) { **ppz += 1; *py += 2; x += 3; return x+y+z; } Variable a is a pointer to b; variable b is a pointer to c, and c is an integer currently with value 4. If we call f(c, b, a) , what is returned?","title":"7.2.6"},{"location":"ch07/7.2/7.2/#answer_4","text":"f(c, b, a) is 21 view source code mind that c is passed by value, so the process is: sentence x in f() x out of f() *py **ppz **ppz += 1; 4 5 5 5 *py += 2; 4 7 7 7 x += 3; 7 7 7 7","title":"Answer"},{"location":"ch07/7.3/7.3/","text":"Exercises for Section 7.3 7.3.1 In Fig. 7.15 is a ML function main that computes Fibonacci numbers in a nonstandard way. Function fibO will compute the nth Fibonacci number for any n >= O. Nested within in is fib1, which computes the nth Fibonacci number on the assumption n >= 2, and nested within fib1 is fib2, which assumes n >= 4. Note that neither fib1 nor fib2 need to check for the basis cases. Show the stack of activation records that result from a call to main, up until the time that the first call (to fibO(1)) is about to return. Show the access link in each of the activation records on the stack. fun main() { let fun fibO(n) let fun fib1(n) = let fun fib2(n) = fib1(n-l) + fib1(n-2) in if n >= 4 then fib2(n) else fibO(n-l) + fibO(n-2) end in if n >= 2 then fib1(n) else 1 end in fibO(4) end ; Figure 7.15: Nested functions computing Fibonacci numbers Answer activation tree: activation stack when first call to fib0(1) is about to return: 7.3.2 Suppose that we implement the functions of Fig. 7.15 using a display. Show the display at the moment the first call to fibO(1) is about to return. Also, indicate the saved display entry in each of the activation records on the stack at that time. \ufffc Answer","title":"Exercises for Section 7.3"},{"location":"ch07/7.3/7.3/#exercises-for-section-73","text":"","title":"Exercises for Section 7.3"},{"location":"ch07/7.3/7.3/#731","text":"In Fig. 7.15 is a ML function main that computes Fibonacci numbers in a nonstandard way. Function fibO will compute the nth Fibonacci number for any n >= O. Nested within in is fib1, which computes the nth Fibonacci number on the assumption n >= 2, and nested within fib1 is fib2, which assumes n >= 4. Note that neither fib1 nor fib2 need to check for the basis cases. Show the stack of activation records that result from a call to main, up until the time that the first call (to fibO(1)) is about to return. Show the access link in each of the activation records on the stack. fun main() { let fun fibO(n) let fun fib1(n) = let fun fib2(n) = fib1(n-l) + fib1(n-2) in if n >= 4 then fib2(n) else fibO(n-l) + fibO(n-2) end in if n >= 2 then fib1(n) else 1 end in fibO(4) end ; Figure 7.15: Nested functions computing Fibonacci numbers","title":"7.3.1"},{"location":"ch07/7.3/7.3/#answer","text":"activation tree: activation stack when first call to fib0(1) is about to return:","title":"Answer"},{"location":"ch07/7.3/7.3/#732","text":"Suppose that we implement the functions of Fig. 7.15 using a display. Show the display at the moment the first call to fibO(1) is about to return. Also, indicate the saved display entry in each of the activation records on the stack at that time. \ufffc","title":"7.3.2"},{"location":"ch07/7.3/7.3/#answer_1","text":"","title":"Answer"},{"location":"ch07/7.4/7.4/","text":"Exercises for Section 7.4 7.4.1 Suppose the heap consists of seven chunks, starting at address 0. The sizes of the chunks, in order, are 80, 30, 60, 50, 70, 20, 40 bytes. When we place an object in a chunk, we put it at the high end if there is enough space remaining to form a smaller chunk (so that the smaller chunk can easily remain on the linked list of free space) . However , we cannot tolerate chunks of fewer that 8 bytes, so if an object is almost as large as the selected chunk, we give it the entire chunk and place the object at the low end of the chunk. If we request space for objects of the following sizes: 32, 64, 48, 16, in that order, what does the free space list look like after satisfying the requests, if the method of selecting chunks is First fit. Best fit. Answer values in parentheses are sizes actually in use First fit. 48, 32(32), 14, 16(16), 60, 50(48), 70(64), 20, 40 Best fit. 80, 30, 60, 50(48), 70(64), 20(16), 8, 32(32)","title":"Exercises for Section 7.4"},{"location":"ch07/7.4/7.4/#exercises-for-section-74","text":"","title":"Exercises for Section 7.4"},{"location":"ch07/7.4/7.4/#741","text":"Suppose the heap consists of seven chunks, starting at address 0. The sizes of the chunks, in order, are 80, 30, 60, 50, 70, 20, 40 bytes. When we place an object in a chunk, we put it at the high end if there is enough space remaining to form a smaller chunk (so that the smaller chunk can easily remain on the linked list of free space) . However , we cannot tolerate chunks of fewer that 8 bytes, so if an object is almost as large as the selected chunk, we give it the entire chunk and place the object at the low end of the chunk. If we request space for objects of the following sizes: 32, 64, 48, 16, in that order, what does the free space list look like after satisfying the requests, if the method of selecting chunks is First fit. Best fit.","title":"7.4.1"},{"location":"ch07/7.4/7.4/#answer","text":"values in parentheses are sizes actually in use First fit. 48, 32(32), 14, 16(16), 60, 50(48), 70(64), 20, 40 Best fit. 80, 30, 60, 50(48), 70(64), 20(16), 8, 32(32)","title":"Answer"},{"location":"ch07/7.5/7.5/","text":"Exercises for Section 7.5 7.5.1 What happens to the reference counts of the objects in Fig. 7.19 if: The pointer from A to B is deleted. The pointer from X to A is deleted. The node C is deleted. Figure 7.19: A network of objects Answer The pointer from A to B is deleted. The pointer from X to A is deleted. The node C is deleted. 7.5.2 What happens to reference counts when the pointer from A to D in Fig. 7.20 is deleted? Figure 7.20: Another network of objects Answer","title":"Exercises for Section 7.5"},{"location":"ch07/7.5/7.5/#exercises-for-section-75","text":"","title":"Exercises for Section 7.5"},{"location":"ch07/7.5/7.5/#751","text":"What happens to the reference counts of the objects in Fig. 7.19 if: The pointer from A to B is deleted. The pointer from X to A is deleted. The node C is deleted. Figure 7.19: A network of objects","title":"7.5.1"},{"location":"ch07/7.5/7.5/#answer","text":"The pointer from A to B is deleted. The pointer from X to A is deleted. The node C is deleted.","title":"Answer"},{"location":"ch07/7.5/7.5/#752","text":"What happens to reference counts when the pointer from A to D in Fig. 7.20 is deleted? Figure 7.20: Another network of objects","title":"7.5.2"},{"location":"ch07/7.5/7.5/#answer_1","text":"","title":"Answer"},{"location":"ch07/7.6/7.6/","text":"Exercises for Section 7.6 7.6.1 Show the steps of a mark-and-sweep garbage collector on Fig. 7.19 with the pointer A to B deleted. Fig. 7.19 with the pointer A to C deleted. Fig. 7.20 with the pointer A to D deleted. Fig. 7.20 with the object B deleted. Answer Fig. 7.19 with the pointer A to B deleted. before: A.reached = \u2026 = I.reached = 0 Unscanned = [] line1: A.reached = 1 Unscanned.push(A) line2~7: loop1: Unscanned.shift() C.reached = 1 Unscanned.push( C ) loop2: Unscanned.shift() F.reached = 1 Uncanned.push(F) loop3: Unscanned.shift() H.reached = 1 Uncanned.push(H) loop4: Unscanned.shift() I.reached = 1 Uncanned.push(I) loop5: Unscanned.shift() G.reached = 1 Uncanned.push(G) loop6: Unscanned.shift() E.reached = 1 Uncanned.push(E) loop7: Unscanned.shift() // no more object add to list Unscanned // now it is empty, loop end line8: Free = [] line9~11: Free = [B, D] A.reached = C.reached = E.reached = \u2026 = I.reached = 0 7.6.2 The Baker mark-and-sweep algorithm moves objects among four lists: Free, Unreached, Unscanned, and Scanned. For each of the object networks of Exercise 7.6.1, indicate for each object the sequence of lists on which it finds itself from just before garbage collection begins until just after it finishes. Answer Fig. 7.19 with the pointer A to B deleted. line1: Free = [] // assume it is empty Unreached = [A, B, C, D, E, F, G, H, I] Unscanned = [] Scanned = [] line2: Unscanned = [A] Unreached = [B, C, D, E, F, G, H, I] line3~7: loop1: Scanned = [A] Unscanned = [C] Unreached = [B, D, E, F, G, H, I] loop2: Scanned = [A, C] Unscanned = [F] Unreached = [B, D, E, G, H, I] loop3: Scanned = [A, C, F] Unscanned = [H] Unreached = [B, D, E, G, I] loop4: Scanned = [A, C, F, H] Unscanned = [I] Unreached = [B, D, E, G] loop5: Scanned = [A, C, F, H, I] Unscanned = [G] Unreached = [B, D, E] loop6: Scanned = [A, C, F, H, I, G] Unscanned = [E] Unreached = [B, D] loop7: Scanned = [A, C, F, H, I, G, E] Unscanned = [] Unreached = [B, D] line8: Free = [B, D] line9: Unreached = [A, C, F, H, I, G, E] 7.6.3 Suppose we perform a mark-and-compact garbage collection on each of the networks of Exercise 7.6.1. Also, suppose that Each object has size 100 bytes, and Initially, the nine objects in the heap are arranged in alphabetical order, starting at byte 0 of the heap. What is the address of each object after garbage collection? Answer Fig. 7.19 with the pointer A to B deleted. A(0), C(100), E(200), F(300), G(400), H(500), I(600) 7.6.4 Suppose we execute Cheney's copying garbage collection al\u00adgorithm on each of the networks of Exercise 7.6.1. Also, suppose that Each object has size 100 bytes, The unscanned list is managed as a queue, and when an object has more than one pointer, the reached objects are added to the queue in alpha\u00ad betical order, and The From semispace starts at location 0, and the To semispace starts at location 10,000. What is the value of NewLocation(o) for each object o that remains after garbage collection? Answer Fig. 7.19 with the pointer A to B deleted. A(10000), C(10100), F(10200), H(10300), I(10400), G(10500), E(10600)","title":"Exercises for Section 7.6"},{"location":"ch07/7.6/7.6/#exercises-for-section-76","text":"","title":"Exercises for Section 7.6"},{"location":"ch07/7.6/7.6/#761","text":"Show the steps of a mark-and-sweep garbage collector on Fig. 7.19 with the pointer A to B deleted. Fig. 7.19 with the pointer A to C deleted. Fig. 7.20 with the pointer A to D deleted. Fig. 7.20 with the object B deleted.","title":"7.6.1"},{"location":"ch07/7.6/7.6/#answer","text":"Fig. 7.19 with the pointer A to B deleted. before: A.reached = \u2026 = I.reached = 0 Unscanned = [] line1: A.reached = 1 Unscanned.push(A) line2~7: loop1: Unscanned.shift() C.reached = 1 Unscanned.push( C ) loop2: Unscanned.shift() F.reached = 1 Uncanned.push(F) loop3: Unscanned.shift() H.reached = 1 Uncanned.push(H) loop4: Unscanned.shift() I.reached = 1 Uncanned.push(I) loop5: Unscanned.shift() G.reached = 1 Uncanned.push(G) loop6: Unscanned.shift() E.reached = 1 Uncanned.push(E) loop7: Unscanned.shift() // no more object add to list Unscanned // now it is empty, loop end line8: Free = [] line9~11: Free = [B, D] A.reached = C.reached = E.reached = \u2026 = I.reached = 0","title":"Answer"},{"location":"ch07/7.6/7.6/#762","text":"The Baker mark-and-sweep algorithm moves objects among four lists: Free, Unreached, Unscanned, and Scanned. For each of the object networks of Exercise 7.6.1, indicate for each object the sequence of lists on which it finds itself from just before garbage collection begins until just after it finishes.","title":"7.6.2"},{"location":"ch07/7.6/7.6/#answer_1","text":"Fig. 7.19 with the pointer A to B deleted. line1: Free = [] // assume it is empty Unreached = [A, B, C, D, E, F, G, H, I] Unscanned = [] Scanned = [] line2: Unscanned = [A] Unreached = [B, C, D, E, F, G, H, I] line3~7: loop1: Scanned = [A] Unscanned = [C] Unreached = [B, D, E, F, G, H, I] loop2: Scanned = [A, C] Unscanned = [F] Unreached = [B, D, E, G, H, I] loop3: Scanned = [A, C, F] Unscanned = [H] Unreached = [B, D, E, G, I] loop4: Scanned = [A, C, F, H] Unscanned = [I] Unreached = [B, D, E, G] loop5: Scanned = [A, C, F, H, I] Unscanned = [G] Unreached = [B, D, E] loop6: Scanned = [A, C, F, H, I, G] Unscanned = [E] Unreached = [B, D] loop7: Scanned = [A, C, F, H, I, G, E] Unscanned = [] Unreached = [B, D] line8: Free = [B, D] line9: Unreached = [A, C, F, H, I, G, E]","title":"Answer"},{"location":"ch07/7.6/7.6/#763","text":"Suppose we perform a mark-and-compact garbage collection on each of the networks of Exercise 7.6.1. Also, suppose that Each object has size 100 bytes, and Initially, the nine objects in the heap are arranged in alphabetical order, starting at byte 0 of the heap. What is the address of each object after garbage collection?","title":"7.6.3"},{"location":"ch07/7.6/7.6/#answer_2","text":"Fig. 7.19 with the pointer A to B deleted. A(0), C(100), E(200), F(300), G(400), H(500), I(600)","title":"Answer"},{"location":"ch07/7.6/7.6/#764","text":"Suppose we execute Cheney's copying garbage collection al\u00adgorithm on each of the networks of Exercise 7.6.1. Also, suppose that Each object has size 100 bytes, The unscanned list is managed as a queue, and when an object has more than one pointer, the reached objects are added to the queue in alpha\u00ad betical order, and The From semispace starts at location 0, and the To semispace starts at location 10,000. What is the value of NewLocation(o) for each object o that remains after garbage collection?","title":"7.6.4"},{"location":"ch07/7.6/7.6/#answer_3","text":"Fig. 7.19 with the pointer A to B deleted. A(10000), C(10100), F(10200), H(10300), I(10400), G(10500), E(10600)","title":"Answer"},{"location":"ch07/7.7/7.7/","text":"Exercises for Section 7.7 7.7.1 Suppose that the network of objects from Fig.7.20 is managed by an incremental algorithm that uses the four lists Unreached, Unscanned, Scanned, and Free, as in Baker's algorithm. To be specific, the Unscanned list is managed as a queue, and when more than one object is to be placed on this list due to the scanning of one object, we do so in alphabetical order. Suppose also that we use write barriers to assure that no reachable object is made garbage. Starting with A and B on the Unscanned list, suppose the following events occur: A is scanned. The pointer A -> D is rewritten to be A -> H. B is scanned. D is scanned. The pointer B -> C is rewritten to be B -> I. Simulate the entire incremental garbage collection, assuming no more pointers are rewritten. Which objects are garbage? Which objects are placed on the Free list? Answer init Free = [] Unreached = [C, D, E, F, G, H, I] Uscanned = [A, B] Scanned = [] A is scanned. Unreached = [C, F, G, H, I] Uscanned = [B, D, E] Scanned = [A] The pointer A -> D is rewritten to be A -> H. Unreached = [C, F, G, I] Uscanned = [B, D, E, H] Scanned = [A] B is scanned. Unreached = [F, G, I] Uscanned = [D, E, H, C] Scanned = [A, B] D is scanned. Unreached = [F, G, I] Uscanned = [E, H, C] Scanned = [A, B, D] The pointer B -> C is rewritten to be B -> I. Unreached = [F, G] Uscanned = [E, H, C, I] Scanned = [A, B, D] E is scanned. Unreached = [F, G] Uscanned = [H, C, I] Scanned = [A, B, D, E] H is scanned. Unreached = [F, G] Uscanned = [C, I] Scanned = [A, B, D, E, H] C is scanned. Unreached = [F, G] Uscanned = [I] Scanned = [A, B, D, E, H, C] I is scanned. Unreached = [F, G] Uscanned = [] Scanned = [A, B, D, E, H, C, I] end Free = [F, G] Unreached = [A, B, D, E, H, C, I] Unscanned = [] Scanned = [] so, [C, D, F, G] is garbage, Free list is [F, G] . 7.7.2 Repeat Exercise 7.7.1 on the assumption that Events (2) and (5) are interchanged in order. Events (2) and (5) occur before (1), (3), and (4). Answer Events (2) and (5) are interchanged in order. omit Events (2) and (5) occur before (1), (3), and (4). init Free = [] Unreached = [C, D, E, F, G, H, I] Uscanned = [A, B] Scanned = [] The pointer A -> D is rewritten to be A -> H. Unreached = [C, D, E, F, G, I] Uscanned = [A, B, H] The pointer B -> C is rewritten to be B -> I. Unreached = [C, D, E, F, G] Uscanned = [A, B, H, I] A is scanned. Unreached = [C, D, F, G] Unscanned = [B, H, I, E] Scanned = [A] B is scanned. Unreached = [C, D, F, G] Unscanned = [H, I, E] Scanned = [A, B] H is scanned. Unreached = [C, D, F, G] Unscanned = [I, E] Scanned = [A, B, H] I is scanned. Unreached = [C, D, F, G] Unscanned = [E] Scanned = [A, B, H, I] E is scanned. Unreached = [C, D, F, G] Unscanned = [] Scanned = [A, B, H, I, E] end Free = [C, D, F, G] Unreached = [A, B, H, I, E] Unscanned = [] Scanned = [] so, [C, D, F, G] is garbage, Free list also is [C, D, F, G] . 7.7.3 Suppose the heap consists of exactly the nine cars on three trains shown in Fig. 7.30 (i.e., ignore the ellipses). Object o in car 11 has references from cars 12, 23, and 32. When we garbage collect car 11, where might o wind up? Answer if any room in trains 2 and 3 o can go in some existing car of either trains 2 and 3. else o can go in a new, last car of either trains 2 and 3. 7.7.4 Repeat Exercise 7.7.3 for the cases that o has Only references from cars 22 and 31. No references other than from car 11. Answer Only references from cars 22 and 31. The same with Exercise 7.7.3. No references other than from car 11. if there is room in car 12 o can go in car 12 else if there is room in other cars of train 1 o can go in any car has room else o can go in a new, last car of train 1 7.7.5 Suppose the heap consists of exactly the nine cars on three trains shown in Fig. 7.30 (i.e., ignore the ellipses). We are currently in panic mode. Object o1 in car 11 has only one reference, from object o2 in car 12. That reference is rewritten. When we garbage collect car 11, what could happen to o1? Answer It is not important which train we move it to, as long as it is not the first train\uff1f","title":"Exercises for Section 7.7"},{"location":"ch07/7.7/7.7/#exercises-for-section-77","text":"","title":"Exercises for Section 7.7"},{"location":"ch07/7.7/7.7/#771","text":"Suppose that the network of objects from Fig.7.20 is managed by an incremental algorithm that uses the four lists Unreached, Unscanned, Scanned, and Free, as in Baker's algorithm. To be specific, the Unscanned list is managed as a queue, and when more than one object is to be placed on this list due to the scanning of one object, we do so in alphabetical order. Suppose also that we use write barriers to assure that no reachable object is made garbage. Starting with A and B on the Unscanned list, suppose the following events occur: A is scanned. The pointer A -> D is rewritten to be A -> H. B is scanned. D is scanned. The pointer B -> C is rewritten to be B -> I. Simulate the entire incremental garbage collection, assuming no more pointers are rewritten. Which objects are garbage? Which objects are placed on the Free list?","title":"7.7.1"},{"location":"ch07/7.7/7.7/#answer","text":"init Free = [] Unreached = [C, D, E, F, G, H, I] Uscanned = [A, B] Scanned = [] A is scanned. Unreached = [C, F, G, H, I] Uscanned = [B, D, E] Scanned = [A] The pointer A -> D is rewritten to be A -> H. Unreached = [C, F, G, I] Uscanned = [B, D, E, H] Scanned = [A] B is scanned. Unreached = [F, G, I] Uscanned = [D, E, H, C] Scanned = [A, B] D is scanned. Unreached = [F, G, I] Uscanned = [E, H, C] Scanned = [A, B, D] The pointer B -> C is rewritten to be B -> I. Unreached = [F, G] Uscanned = [E, H, C, I] Scanned = [A, B, D] E is scanned. Unreached = [F, G] Uscanned = [H, C, I] Scanned = [A, B, D, E] H is scanned. Unreached = [F, G] Uscanned = [C, I] Scanned = [A, B, D, E, H] C is scanned. Unreached = [F, G] Uscanned = [I] Scanned = [A, B, D, E, H, C] I is scanned. Unreached = [F, G] Uscanned = [] Scanned = [A, B, D, E, H, C, I] end Free = [F, G] Unreached = [A, B, D, E, H, C, I] Unscanned = [] Scanned = [] so, [C, D, F, G] is garbage, Free list is [F, G] .","title":"Answer"},{"location":"ch07/7.7/7.7/#772","text":"Repeat Exercise 7.7.1 on the assumption that Events (2) and (5) are interchanged in order. Events (2) and (5) occur before (1), (3), and (4).","title":"7.7.2"},{"location":"ch07/7.7/7.7/#answer_1","text":"Events (2) and (5) are interchanged in order. omit Events (2) and (5) occur before (1), (3), and (4). init Free = [] Unreached = [C, D, E, F, G, H, I] Uscanned = [A, B] Scanned = [] The pointer A -> D is rewritten to be A -> H. Unreached = [C, D, E, F, G, I] Uscanned = [A, B, H] The pointer B -> C is rewritten to be B -> I. Unreached = [C, D, E, F, G] Uscanned = [A, B, H, I] A is scanned. Unreached = [C, D, F, G] Unscanned = [B, H, I, E] Scanned = [A] B is scanned. Unreached = [C, D, F, G] Unscanned = [H, I, E] Scanned = [A, B] H is scanned. Unreached = [C, D, F, G] Unscanned = [I, E] Scanned = [A, B, H] I is scanned. Unreached = [C, D, F, G] Unscanned = [E] Scanned = [A, B, H, I] E is scanned. Unreached = [C, D, F, G] Unscanned = [] Scanned = [A, B, H, I, E] end Free = [C, D, F, G] Unreached = [A, B, H, I, E] Unscanned = [] Scanned = [] so, [C, D, F, G] is garbage, Free list also is [C, D, F, G] .","title":"Answer"},{"location":"ch07/7.7/7.7/#773","text":"Suppose the heap consists of exactly the nine cars on three trains shown in Fig. 7.30 (i.e., ignore the ellipses). Object o in car 11 has references from cars 12, 23, and 32. When we garbage collect car 11, where might o wind up?","title":"7.7.3"},{"location":"ch07/7.7/7.7/#answer_2","text":"if any room in trains 2 and 3 o can go in some existing car of either trains 2 and 3. else o can go in a new, last car of either trains 2 and 3.","title":"Answer"},{"location":"ch07/7.7/7.7/#774","text":"Repeat Exercise 7.7.3 for the cases that o has Only references from cars 22 and 31. No references other than from car 11.","title":"7.7.4"},{"location":"ch07/7.7/7.7/#answer_3","text":"Only references from cars 22 and 31. The same with Exercise 7.7.3. No references other than from car 11. if there is room in car 12 o can go in car 12 else if there is room in other cars of train 1 o can go in any car has room else o can go in a new, last car of train 1","title":"Answer"},{"location":"ch07/7.7/7.7/#775","text":"Suppose the heap consists of exactly the nine cars on three trains shown in Fig. 7.30 (i.e., ignore the ellipses). We are currently in panic mode. Object o1 in car 11 has only one reference, from object o2 in car 12. That reference is rewritten. When we garbage collect car 11, what could happen to o1?","title":"7.7.5"},{"location":"ch07/7.7/7.7/#answer_4","text":"It is not important which train we move it to, as long as it is not the first train\uff1f","title":"Answer"},{"location":"ch08/8.2/8.2/","text":"Exercises for Section 8.2 8.2.1 Generate code for the following three-address statements assuming all variables are stored in memory locations. x = 1 x = a x = a + 1 x = a + b The two statements x = b * c y = a + x answer 1. LD R1, #1 ST x, R1 2. LD R1, a ST x, R1 3. LD R1, a ADD R1, R1, #1 ST x, R1 4. LD R1, a LD R2, b ADD R1, R1, R2 ST x, R1 5. LD R1, b LD R2, c MUL R1, R1, R2 LD R3, a ADD R3, R3, R1 ST y, R3 Note\uff1a\u7b2c 5 \u5c0f\u9898\uff0c\u53ef\u4ee5\u5728\u751f\u6210\u7684\u6c47\u7f16\u7801\u7b2c\u4e09\u884c\u540e\u63d2\u5165 ST x, R1 \u548c LD R1, x \u4e24\u53e5\uff0c\u8fd9\u4e24\u53e5\u5c5e\u4e8e\u5197\u4f59\u4ee3\u7801\uff08redundant store-load\uff09\u3002\u4f7f\u7528\u7b80\u6613\u4ee3\u7801\u751f\u6210\u7b56\u7565\u5f88\u5bb9\u6613\u751f\u6210\u8fd9\u79cd\u5197\u4f59\u4ee3\u7801\uff0c\u6162\u662f\u6162\u4e00\u4e9b\u4f46\u662f\u4e5f\u662f\u6b63\u786e\u7684\uff0c\u6709\u4e13\u95e8\u5904\u7406\u8fd9\u79cd\u95ee\u9898\u7684\u4f18\u5316\uff08redundant store-load elimination\uff09\uff0c\u6240\u4ee5\u751f\u4e0d\u751f\u6210\u5728\u8fd9\u9898\u7684\u7b54\u6848\u91cc\u611f\u89c9\u90fd\u884c\u3002 8.2.2 Generate code for the following three-address statements assuming a and b are arrays whose elements are 4-byte values. The four-statement sequence x = a[i] y = b[j] a[i] = y b[j] = x The three-statement sequence x = a[i] y = b[i] z = x * y The three-statement sequence x = a[i] y = b[x] a[i] = y answer 1. LD R1, i MUL R1, R1, #4 LD R2, a(R1) LD R3, j MUL R3, R3, #4 LD R4, b(R3) ST a(R1), R4 ST b(R3), R2 2. LD R1, i MUL R1, R1, #4 LD R2, a(R1) LD R1, b(R1) MUL R1, R2, R1 ST z, R1 3. LD R1, i MUL R1, R1, #4 LD R2, a(R1) MUL R2, R2, #4 LD R2, b(R2) ST a(R1), R2 8.2.3 Generate code for the following three-address sequence assuming that p and q are in memory locations: y = *q q = q + 4 *p = y p = p + 4 answer LD R1, q LD R2, 0(R1) ADD R1, R1, #4 ST q, R1 LD R1, p ST 0(R1), R2 ADD R1, R1, #4 ST p, R1 8.2.4 Generate code for the following sequence assuming that x, y, and z are in memory locations: if x < y goto L1 z = 0 goto L2 L1: z = 1 answer LD R1, x LD R2, y SUB R1, R1, R2 BLTZ R1, L1 LD R1, #0 ST z, R1 BR L2 L1: LD R1, #1 ST z, R1 Note\uff1a\u5b9e\u9645\u751f\u6210\u4ee3\u7801\u65f6\u4f1a\u628a\u6807\u7b7e\u5bf9\u5e94\u5230\u5177\u4f53\u7684\u6570\u5b57\u5730\u5740\u4e0a\uff0c\u4f46\u8fd9\u5c0f\u8282\u8fd8\u6ca1\u5230\u90a3\u4e00\u6b65\uff0c\u628a\u539f\u672c\u9898\u76ee\u91cc\u7684\u6807\u7b7e\u540d\u62ff\u6765\u968f\u4fbf\u5199\u5199\u5c31\u597d\u5566\u3002 8.2.5 Generate code for the following sequence assuming that n is in a memory location: s = 0 i = 0 L1: if i > n goto L2 s = s + i i = i + 1 goto L1 L2: answer Long version: LD R1, #0 ST s, R1 ST i, R1 L1: LD R1, i LD R2, n SUB R2, R1, R2 BGTZ R2, L2 LD R2, s ADD R2, R2, R1 ST s, R2 ADD R1, R1, #1 ST i, R1 BR L1 L2: Short version: LD R2, #0 LD R1, R2 LD R3, n L1: SUB R4, R1, R3 BGTZ R4, L2 ADD R2, R2, R1 ADD R1, R1, #1 BR L1 L2: Note\uff1a\u77ed\u7248\u672c\u7684\u4f18\u5316 1\uff09\u6d88\u9664\u5197\u4f59\u5b58-\u8bfb 2\uff09\u5faa\u73af\u4e0d\u53d8\u4ee3\u7801\u5916\u63d0 3\uff09\u7136\u540e\u5916\u52a0\u5bc4\u5b58\u5668\u5206\u914d 8.2.6 Determine the costs of the following instruction sequences: 1. LD R0, y LD R1, z ADD R0, R0, R1 ST x, R0 2. LD R0, i MUL R0, R0, 8 LD R1, a(R0) ST b, R1 3. LD R0, c LD R1, i MUL R1, R1, 8 ST a(R1),R0 4. LD R0, p LD R1, 0(R0) ST x, R1 5. LD R0, p LD R1, x ST 0(R0), R1 6. LD R0, x LD R1, y SUB R0, R0, R1 BLTZ *R3, R0 answer 2 + 2 + 1 + 2 = 7 2 + 2 + 2 + 2 = 8 2 + 2 + 2 + 2 = 8 2 + 2 + 2 = 6 2 + 2 + 2 = 6 2 + 2 + 1 + 1 = 6 Note\uff1a\u8fd9\u672c\u4e66\u7528\u7684\u6307\u4ee4\u96c6\u6ca1\u660e\u786e\u5b9a\u4e49\u6240\u6709\u6307\u4ee4\u7684\u7ec6\u8282\uff0c\u4f46\u770b\u8d77\u6765\u6240\u8c13\u7528\u53d8\u91cf\u540d\u6765\u6307\u5b9a\u5185\u5b58\u5730\u5740\u5b9e\u9645\u4e0a\u9690\u542b\u7740\u8fd9\u4e9b\u53d8\u91cf\u662f\u9759\u6001\u5206\u914d\u7684\u5047\u8bbe\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u771f\u6b63\u751f\u6210\u5b8c\u7684\u6307\u4ee4\u91cc\u8fd9\u4e9b\u53d8\u91cf\u540d\u90fd\u4f1a\u88ab\u66ff\u6362\u4e3a\u5b83\u4eec\u5bf9\u5e94\u7684\u6570\u5b57\u5f62\u5f0f\u7684\u5730\u5740\u5e38\u91cf\uff0c\u800c\u5730\u5740\u5b58\u5728\u6307\u4ee4\u540e\u7684\u4e00\u4e2a\u989d\u5916\u7684word\u91cc\uff0c\u8fd9\u5c31\u7b97\u591a\u4e00\u5355\u4f4d\u7684\u5f00\u9500\u3002 Note \u5f88\u660e\u663e\u672c\u8282\u5185\u5bb9\u5199\u5f97\u975e\u5e38\u968f\u610f\uff0c\u63a8\u8350\u6570\u5b57\u5e38\u91cf\u662f\u5e94\u8be5\u90fd\u52a0#\u524d\u7f00\u7684\uff0c\u9664\u4e86\u653e\u5728\u5730\u5740\u91cc\u7528\u3002\u6bd4\u5982 LD R1, #1 \u548c ADD R1, R1, #1 \u3002 \u672c\u4e66\u4e2d Ri \u8868\u793a\u7b2c i \u53f7\u5bc4\u5b58\u5668\u3002 \u5728\u7ffb\u8bd1\u6210\u6c47\u7f16\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u662f\u53ef\u4ee5\u968f\u610f\u6307\u5b9a i \u7684\u503c\uff08\u6bd4\u5982 R3, R4, R1000\uff09\u5462\u8fd8\u662f\u4f1a\u6709\u67d0\u79cd\u9650\u5236\uff1f \u56de\u7b54\uff1a\u73b0\u5728\u6682\u65f6\u968f\u610f\u3002\u7b49\u540e\u9762\u8bf4\u5bc4\u5b58\u5668\u4e2a\u6570\u6709\u9650\u5236\u7684\u65f6\u5019\u518d\u8003\u8651\u6709\u9650\u5236\u7684\u60c5\u51b5\u3002 \u53e6\u5916\uff0c\u5982\u679c\u4ee3\u7801\u4e2d\u6240\u793a\u7684 R1 \u5728\u540e\u9762\u7684\u4ee3\u7801\u4e2d\u7528\u4e0d\u7740\u4e86\uff0c\u90a3\u4e48\u65b0\u7684\u503c\u662f\u4e0d\u662f\u53ef\u4ee5\u88ab\u52a0\u8f7d\u5230 R1 \u4e2d\uff1f\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u5982\u4f55\u77e5\u9053\u4e4b\u524d\u7684 R1 \u7528\u4e0d\u7740\u4e86\uff1f \u56de\u7b54\uff1a\u53ef\u4ee5\u8986\u76d6\u3002\u81f3\u4e8e\u5982\u4f55\u77e5\u9053\u524d\u9762\u7684\u503c\u6b7b\u4e86\u5c31\u8981\u770b def-use \u94fe\u3002\u8fd9\u662f\u4f18\u5316\u7684\u91cd\u8981\u95ee\u9898\u3002\u4f8b\u59829.2.5\u5c0f\u8282\u8bb2 live variable \u5c31\u8ddf\u8fd9\u4e2a\u6709\u5173\u3002 b = a[i] \u5bf9\u5e94\u7684\u6c47\u7f16\u7801\uff1a LD R1, i MUL R1, R1, 8 LD R2, a(R1) ... \u5176\u4e2d a \u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981\u5148 load \u5230\u5bc4\u5b58\u5668\uff1f \u56de\u7b54\uff1a\u8fd9\u91cc\u9690\u542b\u4e00\u4e2a\u5047\u8bbe\uff1a\u53d8\u91cf\u662f\u9759\u6001\u5206\u914d\u5b58\u50a8\u7684\u3002\u540e\u9762\u6d89\u53ca\u4e0d\u662f\u9759\u6001\u53d8\u91cf\u7684\u65f6\u5019\u60c5\u51b5\u4f1a\u6709\u53d8\u5316\u3002","title":"Exercises for Section 8.2"},{"location":"ch08/8.2/8.2/#exercises-for-section-82","text":"","title":"Exercises for Section 8.2"},{"location":"ch08/8.2/8.2/#821","text":"Generate code for the following three-address statements assuming all variables are stored in memory locations. x = 1 x = a x = a + 1 x = a + b The two statements x = b * c y = a + x","title":"8.2.1"},{"location":"ch08/8.2/8.2/#answer","text":"1. LD R1, #1 ST x, R1 2. LD R1, a ST x, R1 3. LD R1, a ADD R1, R1, #1 ST x, R1 4. LD R1, a LD R2, b ADD R1, R1, R2 ST x, R1 5. LD R1, b LD R2, c MUL R1, R1, R2 LD R3, a ADD R3, R3, R1 ST y, R3 Note\uff1a\u7b2c 5 \u5c0f\u9898\uff0c\u53ef\u4ee5\u5728\u751f\u6210\u7684\u6c47\u7f16\u7801\u7b2c\u4e09\u884c\u540e\u63d2\u5165 ST x, R1 \u548c LD R1, x \u4e24\u53e5\uff0c\u8fd9\u4e24\u53e5\u5c5e\u4e8e\u5197\u4f59\u4ee3\u7801\uff08redundant store-load\uff09\u3002\u4f7f\u7528\u7b80\u6613\u4ee3\u7801\u751f\u6210\u7b56\u7565\u5f88\u5bb9\u6613\u751f\u6210\u8fd9\u79cd\u5197\u4f59\u4ee3\u7801\uff0c\u6162\u662f\u6162\u4e00\u4e9b\u4f46\u662f\u4e5f\u662f\u6b63\u786e\u7684\uff0c\u6709\u4e13\u95e8\u5904\u7406\u8fd9\u79cd\u95ee\u9898\u7684\u4f18\u5316\uff08redundant store-load elimination\uff09\uff0c\u6240\u4ee5\u751f\u4e0d\u751f\u6210\u5728\u8fd9\u9898\u7684\u7b54\u6848\u91cc\u611f\u89c9\u90fd\u884c\u3002","title":"answer"},{"location":"ch08/8.2/8.2/#822","text":"Generate code for the following three-address statements assuming a and b are arrays whose elements are 4-byte values. The four-statement sequence x = a[i] y = b[j] a[i] = y b[j] = x The three-statement sequence x = a[i] y = b[i] z = x * y The three-statement sequence x = a[i] y = b[x] a[i] = y","title":"8.2.2"},{"location":"ch08/8.2/8.2/#answer_1","text":"1. LD R1, i MUL R1, R1, #4 LD R2, a(R1) LD R3, j MUL R3, R3, #4 LD R4, b(R3) ST a(R1), R4 ST b(R3), R2 2. LD R1, i MUL R1, R1, #4 LD R2, a(R1) LD R1, b(R1) MUL R1, R2, R1 ST z, R1 3. LD R1, i MUL R1, R1, #4 LD R2, a(R1) MUL R2, R2, #4 LD R2, b(R2) ST a(R1), R2","title":"answer"},{"location":"ch08/8.2/8.2/#823","text":"Generate code for the following three-address sequence assuming that p and q are in memory locations: y = *q q = q + 4 *p = y p = p + 4","title":"8.2.3"},{"location":"ch08/8.2/8.2/#answer_2","text":"LD R1, q LD R2, 0(R1) ADD R1, R1, #4 ST q, R1 LD R1, p ST 0(R1), R2 ADD R1, R1, #4 ST p, R1","title":"answer"},{"location":"ch08/8.2/8.2/#824","text":"Generate code for the following sequence assuming that x, y, and z are in memory locations: if x < y goto L1 z = 0 goto L2 L1: z = 1","title":"8.2.4"},{"location":"ch08/8.2/8.2/#answer_3","text":"LD R1, x LD R2, y SUB R1, R1, R2 BLTZ R1, L1 LD R1, #0 ST z, R1 BR L2 L1: LD R1, #1 ST z, R1 Note\uff1a\u5b9e\u9645\u751f\u6210\u4ee3\u7801\u65f6\u4f1a\u628a\u6807\u7b7e\u5bf9\u5e94\u5230\u5177\u4f53\u7684\u6570\u5b57\u5730\u5740\u4e0a\uff0c\u4f46\u8fd9\u5c0f\u8282\u8fd8\u6ca1\u5230\u90a3\u4e00\u6b65\uff0c\u628a\u539f\u672c\u9898\u76ee\u91cc\u7684\u6807\u7b7e\u540d\u62ff\u6765\u968f\u4fbf\u5199\u5199\u5c31\u597d\u5566\u3002","title":"answer"},{"location":"ch08/8.2/8.2/#825","text":"Generate code for the following sequence assuming that n is in a memory location: s = 0 i = 0 L1: if i > n goto L2 s = s + i i = i + 1 goto L1 L2:","title":"8.2.5"},{"location":"ch08/8.2/8.2/#answer_4","text":"Long version: LD R1, #0 ST s, R1 ST i, R1 L1: LD R1, i LD R2, n SUB R2, R1, R2 BGTZ R2, L2 LD R2, s ADD R2, R2, R1 ST s, R2 ADD R1, R1, #1 ST i, R1 BR L1 L2: Short version: LD R2, #0 LD R1, R2 LD R3, n L1: SUB R4, R1, R3 BGTZ R4, L2 ADD R2, R2, R1 ADD R1, R1, #1 BR L1 L2: Note\uff1a\u77ed\u7248\u672c\u7684\u4f18\u5316 1\uff09\u6d88\u9664\u5197\u4f59\u5b58-\u8bfb 2\uff09\u5faa\u73af\u4e0d\u53d8\u4ee3\u7801\u5916\u63d0 3\uff09\u7136\u540e\u5916\u52a0\u5bc4\u5b58\u5668\u5206\u914d","title":"answer"},{"location":"ch08/8.2/8.2/#826","text":"Determine the costs of the following instruction sequences: 1. LD R0, y LD R1, z ADD R0, R0, R1 ST x, R0 2. LD R0, i MUL R0, R0, 8 LD R1, a(R0) ST b, R1 3. LD R0, c LD R1, i MUL R1, R1, 8 ST a(R1),R0 4. LD R0, p LD R1, 0(R0) ST x, R1 5. LD R0, p LD R1, x ST 0(R0), R1 6. LD R0, x LD R1, y SUB R0, R0, R1 BLTZ *R3, R0","title":"8.2.6"},{"location":"ch08/8.2/8.2/#answer_5","text":"2 + 2 + 1 + 2 = 7 2 + 2 + 2 + 2 = 8 2 + 2 + 2 + 2 = 8 2 + 2 + 2 = 6 2 + 2 + 2 = 6 2 + 2 + 1 + 1 = 6 Note\uff1a\u8fd9\u672c\u4e66\u7528\u7684\u6307\u4ee4\u96c6\u6ca1\u660e\u786e\u5b9a\u4e49\u6240\u6709\u6307\u4ee4\u7684\u7ec6\u8282\uff0c\u4f46\u770b\u8d77\u6765\u6240\u8c13\u7528\u53d8\u91cf\u540d\u6765\u6307\u5b9a\u5185\u5b58\u5730\u5740\u5b9e\u9645\u4e0a\u9690\u542b\u7740\u8fd9\u4e9b\u53d8\u91cf\u662f\u9759\u6001\u5206\u914d\u7684\u5047\u8bbe\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u771f\u6b63\u751f\u6210\u5b8c\u7684\u6307\u4ee4\u91cc\u8fd9\u4e9b\u53d8\u91cf\u540d\u90fd\u4f1a\u88ab\u66ff\u6362\u4e3a\u5b83\u4eec\u5bf9\u5e94\u7684\u6570\u5b57\u5f62\u5f0f\u7684\u5730\u5740\u5e38\u91cf\uff0c\u800c\u5730\u5740\u5b58\u5728\u6307\u4ee4\u540e\u7684\u4e00\u4e2a\u989d\u5916\u7684word\u91cc\uff0c\u8fd9\u5c31\u7b97\u591a\u4e00\u5355\u4f4d\u7684\u5f00\u9500\u3002","title":"answer"},{"location":"ch08/8.2/8.2/#note","text":"\u5f88\u660e\u663e\u672c\u8282\u5185\u5bb9\u5199\u5f97\u975e\u5e38\u968f\u610f\uff0c\u63a8\u8350\u6570\u5b57\u5e38\u91cf\u662f\u5e94\u8be5\u90fd\u52a0#\u524d\u7f00\u7684\uff0c\u9664\u4e86\u653e\u5728\u5730\u5740\u91cc\u7528\u3002\u6bd4\u5982 LD R1, #1 \u548c ADD R1, R1, #1 \u3002 \u672c\u4e66\u4e2d Ri \u8868\u793a\u7b2c i \u53f7\u5bc4\u5b58\u5668\u3002 \u5728\u7ffb\u8bd1\u6210\u6c47\u7f16\u7801\u7684\u8fc7\u7a0b\u4e2d\uff0c\u662f\u53ef\u4ee5\u968f\u610f\u6307\u5b9a i \u7684\u503c\uff08\u6bd4\u5982 R3, R4, R1000\uff09\u5462\u8fd8\u662f\u4f1a\u6709\u67d0\u79cd\u9650\u5236\uff1f \u56de\u7b54\uff1a\u73b0\u5728\u6682\u65f6\u968f\u610f\u3002\u7b49\u540e\u9762\u8bf4\u5bc4\u5b58\u5668\u4e2a\u6570\u6709\u9650\u5236\u7684\u65f6\u5019\u518d\u8003\u8651\u6709\u9650\u5236\u7684\u60c5\u51b5\u3002 \u53e6\u5916\uff0c\u5982\u679c\u4ee3\u7801\u4e2d\u6240\u793a\u7684 R1 \u5728\u540e\u9762\u7684\u4ee3\u7801\u4e2d\u7528\u4e0d\u7740\u4e86\uff0c\u90a3\u4e48\u65b0\u7684\u503c\u662f\u4e0d\u662f\u53ef\u4ee5\u88ab\u52a0\u8f7d\u5230 R1 \u4e2d\uff1f\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u5982\u4f55\u77e5\u9053\u4e4b\u524d\u7684 R1 \u7528\u4e0d\u7740\u4e86\uff1f \u56de\u7b54\uff1a\u53ef\u4ee5\u8986\u76d6\u3002\u81f3\u4e8e\u5982\u4f55\u77e5\u9053\u524d\u9762\u7684\u503c\u6b7b\u4e86\u5c31\u8981\u770b def-use \u94fe\u3002\u8fd9\u662f\u4f18\u5316\u7684\u91cd\u8981\u95ee\u9898\u3002\u4f8b\u59829.2.5\u5c0f\u8282\u8bb2 live variable \u5c31\u8ddf\u8fd9\u4e2a\u6709\u5173\u3002 b = a[i] \u5bf9\u5e94\u7684\u6c47\u7f16\u7801\uff1a LD R1, i MUL R1, R1, 8 LD R2, a(R1) ... \u5176\u4e2d a \u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981\u5148 load \u5230\u5bc4\u5b58\u5668\uff1f \u56de\u7b54\uff1a\u8fd9\u91cc\u9690\u542b\u4e00\u4e2a\u5047\u8bbe\uff1a\u53d8\u91cf\u662f\u9759\u6001\u5206\u914d\u5b58\u50a8\u7684\u3002\u540e\u9762\u6d89\u53ca\u4e0d\u662f\u9759\u6001\u53d8\u91cf\u7684\u65f6\u5019\u60c5\u51b5\u4f1a\u6709\u53d8\u5316\u3002","title":"Note"},{"location":"ch08/8.3/8.3/","text":"Exercises for Section 8.3 8.3.1 Generate code for the following three-address statements assuming stack allocation where register SP points to the top of the stack. call p call q return call r return return Answer 100: LD SP, #stackStart 108\uff1a ADD SP, SP, #psize 116: ST *SP, #132 124: BR pStart 132: SUB SP, SP, #psize 140: ADD SP, SP, #qsize 148: ST *SP, #164 156: BR qStart 164: SUB SP, SP, #qsize 172: BR **SP 8.3.2 Generate code for the following three-address statements assuming stack allocation where register SP points to the top of the stack. x = 1 x=a x = a + 1 x = a+b The two statements x = b * c y = a + x 8.3.3 Generate code for the following three-address statements again assuming stack allocation and assuming a and b are arrays whose elements are 4-byte values. The four-statement sequence x = a[i] y = b[j] a[i] = y b[j] = x 2. The three-statement sequence x = a[i] y = b[i] z = x * y The three-statement sequence x = a[i] y = b[x] a[i] = y Note 1. \u6307\u4ee4\u957f\u5ea6 120: ST 364, #140 132: BR 200 140: ACTION2 \u56fe 8-4 \u90e8\u5206\u4ee3\u7801 \u6bcf\u884c\u6307\u4ee4\u524d\u9762\u7684\u6807\u53f7\u4ee3\u8868\u4e86\u8fd9\u884c\u4ee3\u7801\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5373\u504f\u79fb\u91cf\uff09\uff0c\u548c\u4e0b\u4e00\u884c\u6307\u4ee4\u7684\u6807\u53f7\u5dee\u4ee3\u8868\u8fd9\u884c\u6307\u4ee4\u7684\u957f\u5ea6\u3002 \u7b2c\u4e00\u884c\u6709 1 \u4e2a\u6307\u4ee4\u548c 2 \u4e2a\u5e38\u91cf\uff0c\u6240\u4ee5\u6307\u4ee4\u957f\u5ea6\u662f 12\uff0c\u540c\u7406\u7b2c\u4e8c\u884c\u6709 1 \u4e2a\u6307\u4ee4\u548c 1 \u4e2a\u5e38\u91cf\uff0c\u6240\u4ee5\u957f\u5ea6\u4e3a 8. 100: LD, SP, #600 108: ACTION1 128: ADD SP, SP, #msize 136: ST *SP, #152 \u56fe 8-6 \u90e8\u5206\u4ee3\u7801 \u7531\u4e8e SP \u4e0d\u5360\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e0a\u56fe\u4e2d\u7684\u51e0\u884c\u6307\u4ee4\u957f\u5ea6\u5747\u4e3a 8\u3002","title":"Exercises for Section 8.3"},{"location":"ch08/8.3/8.3/#exercises-for-section-83","text":"","title":"Exercises for Section 8.3"},{"location":"ch08/8.3/8.3/#831","text":"Generate code for the following three-address statements assuming stack allocation where register SP points to the top of the stack. call p call q return call r return return","title":"8.3.1"},{"location":"ch08/8.3/8.3/#answer","text":"100: LD SP, #stackStart 108\uff1a ADD SP, SP, #psize 116: ST *SP, #132 124: BR pStart 132: SUB SP, SP, #psize 140: ADD SP, SP, #qsize 148: ST *SP, #164 156: BR qStart 164: SUB SP, SP, #qsize 172: BR **SP","title":"Answer"},{"location":"ch08/8.3/8.3/#832","text":"Generate code for the following three-address statements assuming stack allocation where register SP points to the top of the stack. x = 1 x=a x = a + 1 x = a+b The two statements x = b * c y = a + x","title":"8.3.2"},{"location":"ch08/8.3/8.3/#833","text":"Generate code for the following three-address statements again assuming stack allocation and assuming a and b are arrays whose elements are 4-byte values. The four-statement sequence x = a[i] y = b[j] a[i] = y b[j] = x 2. The three-statement sequence x = a[i] y = b[i] z = x * y The three-statement sequence x = a[i] y = b[x] a[i] = y","title":"8.3.3"},{"location":"ch08/8.3/8.3/#note","text":"","title":"Note"},{"location":"ch08/8.3/8.3/#1","text":"120: ST 364, #140 132: BR 200 140: ACTION2 \u56fe 8-4 \u90e8\u5206\u4ee3\u7801 \u6bcf\u884c\u6307\u4ee4\u524d\u9762\u7684\u6807\u53f7\u4ee3\u8868\u4e86\u8fd9\u884c\u4ee3\u7801\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5373\u504f\u79fb\u91cf\uff09\uff0c\u548c\u4e0b\u4e00\u884c\u6307\u4ee4\u7684\u6807\u53f7\u5dee\u4ee3\u8868\u8fd9\u884c\u6307\u4ee4\u7684\u957f\u5ea6\u3002 \u7b2c\u4e00\u884c\u6709 1 \u4e2a\u6307\u4ee4\u548c 2 \u4e2a\u5e38\u91cf\uff0c\u6240\u4ee5\u6307\u4ee4\u957f\u5ea6\u662f 12\uff0c\u540c\u7406\u7b2c\u4e8c\u884c\u6709 1 \u4e2a\u6307\u4ee4\u548c 1 \u4e2a\u5e38\u91cf\uff0c\u6240\u4ee5\u957f\u5ea6\u4e3a 8. 100: LD, SP, #600 108: ACTION1 128: ADD SP, SP, #msize 136: ST *SP, #152 \u56fe 8-6 \u90e8\u5206\u4ee3\u7801 \u7531\u4e8e SP \u4e0d\u5360\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e0a\u56fe\u4e2d\u7684\u51e0\u884c\u6307\u4ee4\u957f\u5ea6\u5747\u4e3a 8\u3002","title":"1. \u6307\u4ee4\u957f\u5ea6"},{"location":"ch08/8.4/8.4/","text":"Exercises for Section 8.4 8.4.1 Figure 8.10 is a simple matrix-multiplication program. Translate the program into three-address statements of the type we have been using in this section. Assume the matrix entries are numbers that require 8 bytes, and that matrices are stored in row-major order. Construct the flow graph for your code from (a). Identify the loops in your flow graph from (b). for (i=O; i<n; i++) for (j=O; j<n; j++) c[i][j] = 0.0; for (i=O; i<n; i++) for (j=O; j<n; j++) for (k=O; k<n; k++) \ufffcc[i][j] = c[i][j] + a[i][k]*b[k][j]; Figure 8.10: A matrix-multiplication algorithm Answer three-address statements ``` B1 1) i = 0 B2 2) if i >= n goto(13) B3 3) j = 0 B4 4) if j >= n goto(11) B5 5\uff09 t1 = n * i 6) t2 = t1 + j 7) t3 = t2 * 8 8) c[t3] = 0.0 9) j = j + 1 10) goto(4) B6 11) i = i + 1 12) goto(2) B7 13) i = 0 B8 14) if i >= n goto(40) B9 15) j = 0 B10 16) if j >= n goto(38) B11 17) k = 0 B12 18) if k >= n goto(36) B13 19) t4 = n * i 20) t5 = t4 + j 21) t6 = t5 * 8 22) t7 = c[t6] 23) t8 = n * i 24) t9 = t8 + k 25) t10 = t9 * 8 26) t11 = a[t10] 27) t12 = n * k 28) t13 = t12 + j 29) t14 = t13 * 8 30) t15 = b[t14] 31) t16 = t11 * t15 32) t17 = t7 + t16 33) c[t6] = t17 34) k = k + 1 35) goto(18) B14 36) j = j + 1 37) goto(16) B15 38) i = i + 1 39) goto(14) ``` flow graph loops {B2, B3, B4, B6} {B4, B5} {B8, B9, B10, B15} {B10, B11, B12, B14} {B12, B13} 8.4.2 Figure 8.11 is code to count the number of primes from 2 to n, using the sieve method on a suitably large array a. That is, a[i] is TRUE at the end only if there is no prime i^0.5 or less that evenly divides i. We initialize all a[i] to TRUE and then set a[j] to FALSE if we find a divisor of j. Translate the program into three-address statements of the type we have been using in this section. Assume integers require 4 bytes. Construct the flow graph for your code from (a). Identify the loops in your flow graph from (b). for (i=2; i<=n; i++) a[i] = TRUE; count = 0; s = sqrt(n); for (i=2; i<=s; i++) if (a[i]) 1* i has been found to be a prime *1 { count++ ; for (j=2*i; j<=n; j = j+i) a[j] = FALSE; 1* no multiple of i is a prime *1 } Figure 8.11: Code to sieve for primes Answer three-address statements ``` B1 1) i = 2 B2 2) if i > n goto(7) B3 3) t1 = i * 4 4) a[t1] = TRUE 5) i = i + 1 6) goto(2) B4 7) count = 0 8) s = sqrt(n) 9) i = 2 B5 10) if i > s goto(22) B6 11) t2 = i * 4 12) ifFalse a[t2] goto(20) B7 13) count = count + 1 14) j = 2 * i B8 15) if j > n goto(20) B9 16) t3 = j * 4 17) a[t3] = FALSE 18\uff09 j = j + i 19) goto(15) B10 20) i = i + 1 21) goto(10) ``` flow graph loops {B2, B3} {B5, B6, B10} {B5, B6, B7, B8, B10} {B8, B9} Note 1. A demo for algorithm 8.7: Determining the liveness and next-use information foreach statement in a basic block. init: three-address statements symbol table symbol live nextuse i) a = b + c [a, true, null] j) t = a + b [b, true, null] [c, true, null] [t, true, null] step1: Attach to statement j the information currently found in the symbol table symbol live nextuse i) a = b + c [a, true, null] j) t = a + b [t, true, null] [b, true, null] [a, true, null] [c, true, null] [b, true, null] [t, true, null] step2: In the symbol table, set x.live = false and x.nextuse = null symbol live nextuse i) a = b + c [a, true, null] j) t = a + b [t, true, null] [b, true, null] [a, true, null] [c, true, null] [b, true, null] [t, false, null] step3: In the symbol table, set a.live = true, b.live = true and a.nextuse = j, b.nextuse = j symbol live nextuse i) a = b + c [a, true, j ] j) t = a + b [t, true, null] [b, true, j ] [a, true, null] [c, true, null] [b, true, null] [t, false, null] step4: symbol live nextuse i) a = b + c [a, true, j ] [a, true, j ] [b, true, j ] [b, true, j ] [c, true, null] [c, true, null] [t, false, null] j) t = a + b [t, true, null] [a, true, null] [b, true, null] step5: symbol live nextuse i) a = b + c [a, true, j ] [a, false, null] [b, true, j ] [b, true, j ] [c, true, null] [c, true, null] [t, false, null] j) t = a + b [t, true, null] [a, true, null] [b, true, null] step6: symbol live nextuse i) a = b + c [a, true, j ] [a, false, null] [b, true, j ] [b, true, i ] [c, true, null] [c, true, i ] [t, false, null] j) t = a + b [t, true, null] [a, true, null] [b, true, null] 2. Three ways to generate code for \"for(i = 0; i < n ; i++)\" statement 1) i = 0 2) if i >= n goto(9) 3) ... 7) i = i + 1 8) if i < n goto(3) 9) 1) i = 0 2) goto(8) 3) ... 7) i = i + 1 8) if i < n goto(3) 9) 1) i= 0 2) if i >= n goto(9) ... 7) i = i + 1 8) goto(2) 9) \u66f4\u591a\u53ef\u53c2\u8003 RednaxelaFX \u7684 \u5bf9C\u8bed\u4e49\u7684for\u5faa\u73af\u7684\u57fa\u672c\u4ee3\u7801\u751f\u6210\u6a21\u5f0f","title":"Exercises for Section 8.4"},{"location":"ch08/8.4/8.4/#exercises-for-section-84","text":"","title":"Exercises for Section 8.4"},{"location":"ch08/8.4/8.4/#841","text":"Figure 8.10 is a simple matrix-multiplication program. Translate the program into three-address statements of the type we have been using in this section. Assume the matrix entries are numbers that require 8 bytes, and that matrices are stored in row-major order. Construct the flow graph for your code from (a). Identify the loops in your flow graph from (b). for (i=O; i<n; i++) for (j=O; j<n; j++) c[i][j] = 0.0; for (i=O; i<n; i++) for (j=O; j<n; j++) for (k=O; k<n; k++) \ufffcc[i][j] = c[i][j] + a[i][k]*b[k][j]; Figure 8.10: A matrix-multiplication algorithm","title":"8.4.1"},{"location":"ch08/8.4/8.4/#answer","text":"three-address statements ``` B1 1) i = 0 B2 2) if i >= n goto(13) B3 3) j = 0 B4 4) if j >= n goto(11) B5 5\uff09 t1 = n * i 6) t2 = t1 + j 7) t3 = t2 * 8 8) c[t3] = 0.0 9) j = j + 1 10) goto(4) B6 11) i = i + 1 12) goto(2) B7 13) i = 0 B8 14) if i >= n goto(40) B9 15) j = 0 B10 16) if j >= n goto(38) B11 17) k = 0 B12 18) if k >= n goto(36) B13 19) t4 = n * i 20) t5 = t4 + j 21) t6 = t5 * 8 22) t7 = c[t6] 23) t8 = n * i 24) t9 = t8 + k 25) t10 = t9 * 8 26) t11 = a[t10] 27) t12 = n * k 28) t13 = t12 + j 29) t14 = t13 * 8 30) t15 = b[t14] 31) t16 = t11 * t15 32) t17 = t7 + t16 33) c[t6] = t17 34) k = k + 1 35) goto(18) B14 36) j = j + 1 37) goto(16) B15 38) i = i + 1 39) goto(14) ``` flow graph loops {B2, B3, B4, B6} {B4, B5} {B8, B9, B10, B15} {B10, B11, B12, B14} {B12, B13}","title":"Answer"},{"location":"ch08/8.4/8.4/#842","text":"Figure 8.11 is code to count the number of primes from 2 to n, using the sieve method on a suitably large array a. That is, a[i] is TRUE at the end only if there is no prime i^0.5 or less that evenly divides i. We initialize all a[i] to TRUE and then set a[j] to FALSE if we find a divisor of j. Translate the program into three-address statements of the type we have been using in this section. Assume integers require 4 bytes. Construct the flow graph for your code from (a). Identify the loops in your flow graph from (b). for (i=2; i<=n; i++) a[i] = TRUE; count = 0; s = sqrt(n); for (i=2; i<=s; i++) if (a[i]) 1* i has been found to be a prime *1 { count++ ; for (j=2*i; j<=n; j = j+i) a[j] = FALSE; 1* no multiple of i is a prime *1 } Figure 8.11: Code to sieve for primes","title":"8.4.2"},{"location":"ch08/8.4/8.4/#answer_1","text":"three-address statements ``` B1 1) i = 2 B2 2) if i > n goto(7) B3 3) t1 = i * 4 4) a[t1] = TRUE 5) i = i + 1 6) goto(2) B4 7) count = 0 8) s = sqrt(n) 9) i = 2 B5 10) if i > s goto(22) B6 11) t2 = i * 4 12) ifFalse a[t2] goto(20) B7 13) count = count + 1 14) j = 2 * i B8 15) if j > n goto(20) B9 16) t3 = j * 4 17) a[t3] = FALSE 18\uff09 j = j + i 19) goto(15) B10 20) i = i + 1 21) goto(10) ``` flow graph loops {B2, B3} {B5, B6, B10} {B5, B6, B7, B8, B10} {B8, B9}","title":"Answer"},{"location":"ch08/8.4/8.4/#note","text":"","title":"Note"},{"location":"ch08/8.4/8.4/#1-a-demo-for-algorithm-87-determining-the-liveness-and-next-use-information-foreach-statement-in-a-basic-block","text":"init: three-address statements symbol table symbol live nextuse i) a = b + c [a, true, null] j) t = a + b [b, true, null] [c, true, null] [t, true, null] step1: Attach to statement j the information currently found in the symbol table symbol live nextuse i) a = b + c [a, true, null] j) t = a + b [t, true, null] [b, true, null] [a, true, null] [c, true, null] [b, true, null] [t, true, null] step2: In the symbol table, set x.live = false and x.nextuse = null symbol live nextuse i) a = b + c [a, true, null] j) t = a + b [t, true, null] [b, true, null] [a, true, null] [c, true, null] [b, true, null] [t, false, null] step3: In the symbol table, set a.live = true, b.live = true and a.nextuse = j, b.nextuse = j symbol live nextuse i) a = b + c [a, true, j ] j) t = a + b [t, true, null] [b, true, j ] [a, true, null] [c, true, null] [b, true, null] [t, false, null] step4: symbol live nextuse i) a = b + c [a, true, j ] [a, true, j ] [b, true, j ] [b, true, j ] [c, true, null] [c, true, null] [t, false, null] j) t = a + b [t, true, null] [a, true, null] [b, true, null] step5: symbol live nextuse i) a = b + c [a, true, j ] [a, false, null] [b, true, j ] [b, true, j ] [c, true, null] [c, true, null] [t, false, null] j) t = a + b [t, true, null] [a, true, null] [b, true, null] step6: symbol live nextuse i) a = b + c [a, true, j ] [a, false, null] [b, true, j ] [b, true, i ] [c, true, null] [c, true, i ] [t, false, null] j) t = a + b [t, true, null] [a, true, null] [b, true, null]","title":"1. A demo for algorithm 8.7: Determining the liveness and next-use information foreach statement in a basic block."},{"location":"ch08/8.4/8.4/#2-three-ways-to-generate-code-for-fori-0-i-n-i-statement","text":"1) i = 0 2) if i >= n goto(9) 3) ... 7) i = i + 1 8) if i < n goto(3) 9) 1) i = 0 2) goto(8) 3) ... 7) i = i + 1 8) if i < n goto(3) 9) 1) i= 0 2) if i >= n goto(9) ... 7) i = i + 1 8) goto(2) 9) \u66f4\u591a\u53ef\u53c2\u8003 RednaxelaFX \u7684 \u5bf9C\u8bed\u4e49\u7684for\u5faa\u73af\u7684\u57fa\u672c\u4ee3\u7801\u751f\u6210\u6a21\u5f0f","title":"2. Three ways to generate code for \"for(i = 0; i &lt; n ; i++)\" statement"},{"location":"ch08/8.5/8.5/","text":"Exercises for Section 8.5 8.5.1 Construct the DAG for the basic block d = b * c e = a + b b = b * c a = e - d Answer 8.5.2 Simplify the three-address code of Exercise 8.5.1, assuming Only a is live on exit from the block. a, b, and c are live on exit from the block. Answer Only a is live on exit from the block. e = a + b d = b * c a = e - d a, b, and c are live on exit from the block. e = a + b b = b * c a = e - b 8.5.3 Construct the basic block for the code in block B6 of Fig. 8.9. Do not forget to include the comparison i <= 10. Answer \u7591\u95ee \u201cConstruct the basic block\u201d \u88ab\u7ffb\u8bd1\u6210 \u201c\u6784\u9020 DAG\u201d\uff0c\u662f\u8fd9\u4e2a\u610f\u601d\u5417\uff1f \u5982\u4f55\u4e3a\u4e00\u4e2a \u201cif goto\u201d \u8bed\u53e5 construct the basic block\uff1f 8.5.4 Construct the DAG for the code in block B3 of Fig. 8.9. Answer 8.5.5 Extend Algorithm 8.7 to process three-statements of the form a[i] = b a = b[i] a = *b *a = b 8.5.6 Construct the DAG for the basic block a[i] = b *p = c d = a[j] e = *p *p = a[i] on the assumption that p can point anywhere. p can point only to b or d. \u7591\u95ee 8.5.6 \u8282\u8bb2\u6307\u9488\u8d4b\u503c\u8fd9\u91cc\u53c8\u6ca1\u6709 demo \u554a\uff01\uff01\uff01 *p = c \u548c c = *p \u7ffb\u8bd1\u6210 DAG \u662f\u4e0d\u662f\u8fd9\u6837\u7684\uff1a *p = a[i] \u8fd9\u6837\u7684\u8bed\u53e5\u7528 DAG \u5982\u4f55\u8868\u793a\uff1f 8.5.6 \u8282\u8bb2\u5230\uff1athe operator =* must take all nodes that are currently associated with identifiers as arguments\u3002\u8fd9\u53e5\u8bdd\u518d DAG \u4e2d\u5982\u4f55\u8868\u793a\uff1f 8.5.7 ! If a pointer or array expression, such as a[i] or *p is assigned and then used, without the possibility of being changed in the interim, we can take advantage of the situation to simplify the DAG. For example, in the code of Exercise 8.5.6, since p is not assigned between the second and fourth statements,the statement e = *p can be replaced by e = c, regardless of what p points to. Revise the DAG-construction algorithm to take advantage of such situations, and apply your algorithm to the code of Example 8.5.6. 8.5.8 Suppose a basic block is formed from the C assignment statements x = a + b + c + d + e + f; y = a + c + e; Give the three-address statements (only one addition per statement) for this block. Use the associative and commutative laws to modify the block to use the fewest possible number of instructions, assuming both x and y are live on exit from the block. Answer three-address statements t1 = a + b t2 = t1 + c t3 = t2 + d t4 = t3 + e t5 = t4 + f x = t5 t6 = a + c t7 = c + e y = t6 + t7 optimized statments t1 = a + c t2 = t1 + e y = t2 t3 = t2 + b t4 = t3 + d t5 = t4 + f x = t5","title":"Exercises for Section 8.5"},{"location":"ch08/8.5/8.5/#exercises-for-section-85","text":"","title":"Exercises for Section 8.5"},{"location":"ch08/8.5/8.5/#851","text":"Construct the DAG for the basic block d = b * c e = a + b b = b * c a = e - d","title":"8.5.1"},{"location":"ch08/8.5/8.5/#answer","text":"","title":"Answer"},{"location":"ch08/8.5/8.5/#852","text":"Simplify the three-address code of Exercise 8.5.1, assuming Only a is live on exit from the block. a, b, and c are live on exit from the block.","title":"8.5.2"},{"location":"ch08/8.5/8.5/#answer_1","text":"Only a is live on exit from the block. e = a + b d = b * c a = e - d a, b, and c are live on exit from the block. e = a + b b = b * c a = e - b","title":"Answer"},{"location":"ch08/8.5/8.5/#853","text":"Construct the basic block for the code in block B6 of Fig. 8.9. Do not forget to include the comparison i <= 10.","title":"8.5.3"},{"location":"ch08/8.5/8.5/#answer_2","text":"","title":"Answer"},{"location":"ch08/8.5/8.5/#_1","text":"\u201cConstruct the basic block\u201d \u88ab\u7ffb\u8bd1\u6210 \u201c\u6784\u9020 DAG\u201d\uff0c\u662f\u8fd9\u4e2a\u610f\u601d\u5417\uff1f \u5982\u4f55\u4e3a\u4e00\u4e2a \u201cif goto\u201d \u8bed\u53e5 construct the basic block\uff1f","title":"\u7591\u95ee"},{"location":"ch08/8.5/8.5/#854","text":"Construct the DAG for the code in block B3 of Fig. 8.9.","title":"8.5.4"},{"location":"ch08/8.5/8.5/#answer_3","text":"","title":"Answer"},{"location":"ch08/8.5/8.5/#855","text":"Extend Algorithm 8.7 to process three-statements of the form a[i] = b a = b[i] a = *b *a = b","title":"8.5.5"},{"location":"ch08/8.5/8.5/#856","text":"Construct the DAG for the basic block a[i] = b *p = c d = a[j] e = *p *p = a[i] on the assumption that p can point anywhere. p can point only to b or d.","title":"8.5.6"},{"location":"ch08/8.5/8.5/#_2","text":"8.5.6 \u8282\u8bb2\u6307\u9488\u8d4b\u503c\u8fd9\u91cc\u53c8\u6ca1\u6709 demo \u554a\uff01\uff01\uff01 *p = c \u548c c = *p \u7ffb\u8bd1\u6210 DAG \u662f\u4e0d\u662f\u8fd9\u6837\u7684\uff1a *p = a[i] \u8fd9\u6837\u7684\u8bed\u53e5\u7528 DAG \u5982\u4f55\u8868\u793a\uff1f 8.5.6 \u8282\u8bb2\u5230\uff1athe operator =* must take all nodes that are currently associated with identifiers as arguments\u3002\u8fd9\u53e5\u8bdd\u518d DAG \u4e2d\u5982\u4f55\u8868\u793a\uff1f","title":"\u7591\u95ee"},{"location":"ch08/8.5/8.5/#857","text":"If a pointer or array expression, such as a[i] or *p is assigned and then used, without the possibility of being changed in the interim, we can take advantage of the situation to simplify the DAG. For example, in the code of Exercise 8.5.6, since p is not assigned between the second and fourth statements,the statement e = *p can be replaced by e = c, regardless of what p points to. Revise the DAG-construction algorithm to take advantage of such situations, and apply your algorithm to the code of Example 8.5.6.","title":"8.5.7 !"},{"location":"ch08/8.5/8.5/#858","text":"Suppose a basic block is formed from the C assignment statements x = a + b + c + d + e + f; y = a + c + e; Give the three-address statements (only one addition per statement) for this block. Use the associative and commutative laws to modify the block to use the fewest possible number of instructions, assuming both x and y are live on exit from the block.","title":"8.5.8"},{"location":"ch08/8.5/8.5/#answer_4","text":"three-address statements t1 = a + b t2 = t1 + c t3 = t2 + d t4 = t3 + e t5 = t4 + f x = t5 t6 = a + c t7 = c + e y = t6 + t7 optimized statments t1 = a + c t2 = t1 + e y = t2 t3 = t2 + b t4 = t3 + d t5 = t4 + f x = t5","title":"Answer"},{"location":"ch12/12.3/12.3/","text":"Exercises for Section 12.3 12.3.1 Answer 1) kill(I,D,X) :- defines(I,X) & defines(D,X) 2) out(D,D,X) :- defines(D,X) 3) out(I,D,X) :- in(I,D,X) & NOT kill (I,D,X) 4) in(I,D,X) :- out(J,D,X) & pred(J,I,X) 12.3.2 Answer 1) kill(I,X,O,Y) :- defines(I,X) OR defines(I,Y) 2) out(I,X,O,Y) :- eval(I,X,O,Y) 3) out(I,X,O,Y) :- in(I,X,O,Y) & NOT kill(I,X,O,Y) 4) in(I,X,O,Y) :- out(J,X,O,Y) & pred(J,I) 12.3.3 Answer 1) out(I,X) :- in(J,X) & pred(I,J) 2) in(I,X) :- use(I,X) & NOT defines(I,X) 12.3.5 Answer a) R1: Path(1,2) Path(2,3) Path(3,4) Path(4,1) Path(4,5) Path(5,6) R2: Path(1,3) Path(2,4) Path(3,1) Path(3,5) Path(4,6) R3: Path(1,4) Path(1,5) Path(2,1) Path(2,5) Path(3,6) Path(4,3) Path(2,6) Path(3,2) R4: Path(1,6) Path(4,2) b) Same to above","title":"Exercises for Section 12.3"},{"location":"ch12/12.3/12.3/#exercises-for-section-123","text":"","title":"Exercises for Section 12.3"},{"location":"ch12/12.3/12.3/#1231","text":"","title":"12.3.1"},{"location":"ch12/12.3/12.3/#answer","text":"1) kill(I,D,X) :- defines(I,X) & defines(D,X) 2) out(D,D,X) :- defines(D,X) 3) out(I,D,X) :- in(I,D,X) & NOT kill (I,D,X) 4) in(I,D,X) :- out(J,D,X) & pred(J,I,X)","title":"Answer"},{"location":"ch12/12.3/12.3/#1232","text":"","title":"12.3.2"},{"location":"ch12/12.3/12.3/#answer_1","text":"1) kill(I,X,O,Y) :- defines(I,X) OR defines(I,Y) 2) out(I,X,O,Y) :- eval(I,X,O,Y) 3) out(I,X,O,Y) :- in(I,X,O,Y) & NOT kill(I,X,O,Y) 4) in(I,X,O,Y) :- out(J,X,O,Y) & pred(J,I)","title":"Answer"},{"location":"ch12/12.3/12.3/#1233","text":"","title":"12.3.3"},{"location":"ch12/12.3/12.3/#answer_2","text":"1) out(I,X) :- in(J,X) & pred(I,J) 2) in(I,X) :- use(I,X) & NOT defines(I,X)","title":"Answer"},{"location":"ch12/12.3/12.3/#1235","text":"","title":"12.3.5"},{"location":"ch12/12.3/12.3/#answer_3","text":"a) R1: Path(1,2) Path(2,3) Path(3,4) Path(4,1) Path(4,5) Path(5,6) R2: Path(1,3) Path(2,4) Path(3,1) Path(3,5) Path(4,6) R3: Path(1,4) Path(1,5) Path(2,1) Path(2,5) Path(3,6) Path(4,3) Path(2,6) Path(3,2) R4: Path(1,6) Path(4,2) b) Same to above","title":"Answer"},{"location":"ch12/12.7/12.7/","text":"Exercises for Section 12.7 12.7.1 Using the encoding of symbols in Example 12.28, develop a BDD that represents the relation consisting of the tuples (b,b), (c,a), and (b,a). You may order the boolean variables in whatever way gives you the most succinct BDD. Answer 12.7.2 As a function of n, how many nodes are there in the most succinct BDD that represents the exclusive-or function on n variables. That is, the functions is true if an odd number of the n variables are true and false if an even number are true. Answer For each variable, we put it on one layer. Their is only two possible arrangement left 0 or left 1. So for each variable, we need at most two nodes for it. And we need only one node for the first variable. So the answer is: 2n-1 For example, when n is 4: 12.7.3 Modify Algorithm 12.29 so it produces the intersection (logical AND) of two BDD's. Answer There are two places to modify: a. BASIS: Zero variables. The BDD's must both be leaves, labeled either 0 or 1. The output is the leaf labeled 1 if both input are 1, or the leaf labeled 0 if either is 0. b. INDEUCTION 2. ...The first of these BDD's represents the function that is true for all truth assignments that have y 1 = 0 and that make both of the give BDD's true.","title":"Exercises for Section 12.7"},{"location":"ch12/12.7/12.7/#exercises-for-section-127","text":"","title":"Exercises for Section 12.7"},{"location":"ch12/12.7/12.7/#1271","text":"Using the encoding of symbols in Example 12.28, develop a BDD that represents the relation consisting of the tuples (b,b), (c,a), and (b,a). You may order the boolean variables in whatever way gives you the most succinct BDD.","title":"12.7.1"},{"location":"ch12/12.7/12.7/#answer","text":"","title":"Answer"},{"location":"ch12/12.7/12.7/#1272","text":"As a function of n, how many nodes are there in the most succinct BDD that represents the exclusive-or function on n variables. That is, the functions is true if an odd number of the n variables are true and false if an even number are true.","title":"12.7.2"},{"location":"ch12/12.7/12.7/#answer_1","text":"For each variable, we put it on one layer. Their is only two possible arrangement left 0 or left 1. So for each variable, we need at most two nodes for it. And we need only one node for the first variable. So the answer is: 2n-1 For example, when n is 4:","title":"Answer"},{"location":"ch12/12.7/12.7/#1273","text":"Modify Algorithm 12.29 so it produces the intersection (logical AND) of two BDD's.","title":"12.7.3"},{"location":"ch12/12.7/12.7/#answer_2","text":"There are two places to modify: a. BASIS: Zero variables. The BDD's must both be leaves, labeled either 0 or 1. The output is the leaf labeled 1 if both input are 1, or the leaf labeled 0 if either is 0. b. INDEUCTION 2. ...The first of these BDD's represents the function that is true for all truth assignments that have y 1 = 0 and that make both of the give BDD's true.","title":"Answer"}]}